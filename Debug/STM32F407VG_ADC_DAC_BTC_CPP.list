
STM32F407VG_ADC_DAC_BTC_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a93c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800aac8  0800aac8  0001aac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad90  0800ad90  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad90  0800ad90  0001ad90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad98  0800ad98  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad98  0800ad98  0001ad98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad9c  0800ad9c  0001ad9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  0800ada0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff0  200002a0  0800b040  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002290  0800b040  00022290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f0c6  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000629c  00000000  00000000  0005f396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00065638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  000669d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029521  00000000  00000000  00067b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8a5  00000000  00000000  00091079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6734  00000000  00000000  000ae91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00185052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ac  00000000  00000000  00185118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000712  00000000  00000000  0018a8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002a0 	.word	0x200002a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aaac 	.word	0x0800aaac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002a4 	.word	0x200002a4
 80001c4:	0800aaac 	.word	0x0800aaac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b96e 	b.w	8000df4 <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9d08      	ldr	r5, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	468c      	mov	ip, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f040 8083 	bne.w	8000c46 <__udivmoddi4+0x116>
 8000b40:	428a      	cmp	r2, r1
 8000b42:	4617      	mov	r7, r2
 8000b44:	d947      	bls.n	8000bd6 <__udivmoddi4+0xa6>
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	b142      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4c:	f1c2 0020 	rsb	r0, r2, #32
 8000b50:	fa24 f000 	lsr.w	r0, r4, r0
 8000b54:	4091      	lsls	r1, r2
 8000b56:	4097      	lsls	r7, r2
 8000b58:	ea40 0c01 	orr.w	ip, r0, r1
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbbc f6f8 	udiv	r6, ip, r8
 8000b68:	fa1f fe87 	uxth.w	lr, r7
 8000b6c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b74:	fb06 f10e 	mul.w	r1, r6, lr
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 8119 	bcs.w	8000db8 <__udivmoddi4+0x288>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8116 	bls.w	8000db8 <__udivmoddi4+0x288>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	443b      	add	r3, r7
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba4:	45a6      	cmp	lr, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8105 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000bb2:	45a6      	cmp	lr, r4
 8000bb4:	f240 8102 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc0:	eba4 040e 	sub.w	r4, r4, lr
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	b902      	cbnz	r2, 8000bda <__udivmoddi4+0xaa>
 8000bd8:	deff      	udf	#255	; 0xff
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d150      	bne.n	8000c84 <__udivmoddi4+0x154>
 8000be2:	1bcb      	subs	r3, r1, r7
 8000be4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be8:	fa1f f887 	uxth.w	r8, r7
 8000bec:	2601      	movs	r6, #1
 8000bee:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf2:	0c21      	lsrs	r1, r4, #16
 8000bf4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bfc:	fb08 f30c 	mul.w	r3, r8, ip
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d907      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000c04:	1879      	adds	r1, r7, r1
 8000c06:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0xe2>
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	f200 80e9 	bhi.w	8000de4 <__udivmoddi4+0x2b4>
 8000c12:	4684      	mov	ip, r0
 8000c14:	1ac9      	subs	r1, r1, r3
 8000c16:	b2a3      	uxth	r3, r4
 8000c18:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c20:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c24:	fb08 f800 	mul.w	r8, r8, r0
 8000c28:	45a0      	cmp	r8, r4
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x10c>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x10a>
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	f200 80d9 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	eba4 0408 	sub.w	r4, r4, r8
 8000c40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c44:	e7bf      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0x12e>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80b1 	beq.w	8000db2 <__udivmoddi4+0x282>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x1cc>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0x140>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80b8 	bhi.w	8000de0 <__udivmoddi4+0x2b0>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0103 	sbc.w	r1, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	468c      	mov	ip, r1
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0a8      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c7e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c84:	f1c2 0320 	rsb	r3, r2, #32
 8000c88:	fa20 f603 	lsr.w	r6, r0, r3
 8000c8c:	4097      	lsls	r7, r2
 8000c8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c92:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c96:	40d9      	lsrs	r1, r3
 8000c98:	4330      	orrs	r0, r6
 8000c9a:	0c03      	lsrs	r3, r0, #16
 8000c9c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f108 	mul.w	r1, r6, r8
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x19c>
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cbe:	f080 808d 	bcs.w	8000ddc <__udivmoddi4+0x2ac>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 808a 	bls.w	8000ddc <__udivmoddi4+0x2ac>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	443b      	add	r3, r7
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b281      	uxth	r1, r0
 8000cd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cdc:	fb00 f308 	mul.w	r3, r0, r8
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x1c4>
 8000ce4:	1879      	adds	r1, r7, r1
 8000ce6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cea:	d273      	bcs.n	8000dd4 <__udivmoddi4+0x2a4>
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d971      	bls.n	8000dd4 <__udivmoddi4+0x2a4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4439      	add	r1, r7
 8000cf4:	1acb      	subs	r3, r1, r3
 8000cf6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfa:	e778      	b.n	8000bee <__udivmoddi4+0xbe>
 8000cfc:	f1c6 0c20 	rsb	ip, r6, #32
 8000d00:	fa03 f406 	lsl.w	r4, r3, r6
 8000d04:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d08:	431c      	orrs	r4, r3
 8000d0a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d16:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	0c3b      	lsrs	r3, r7, #16
 8000d1e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d22:	fa1f f884 	uxth.w	r8, r4
 8000d26:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d2e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d32:	458a      	cmp	sl, r1
 8000d34:	fa02 f206 	lsl.w	r2, r2, r6
 8000d38:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x220>
 8000d3e:	1861      	adds	r1, r4, r1
 8000d40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d44:	d248      	bcs.n	8000dd8 <__udivmoddi4+0x2a8>
 8000d46:	458a      	cmp	sl, r1
 8000d48:	d946      	bls.n	8000dd8 <__udivmoddi4+0x2a8>
 8000d4a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4e:	4421      	add	r1, r4
 8000d50:	eba1 010a 	sub.w	r1, r1, sl
 8000d54:	b2bf      	uxth	r7, r7
 8000d56:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d5e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d62:	fb00 f808 	mul.w	r8, r0, r8
 8000d66:	45b8      	cmp	r8, r7
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x24a>
 8000d6a:	19e7      	adds	r7, r4, r7
 8000d6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d70:	d22e      	bcs.n	8000dd0 <__udivmoddi4+0x2a0>
 8000d72:	45b8      	cmp	r8, r7
 8000d74:	d92c      	bls.n	8000dd0 <__udivmoddi4+0x2a0>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4427      	add	r7, r4
 8000d7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7e:	eba7 0708 	sub.w	r7, r7, r8
 8000d82:	fba0 8902 	umull	r8, r9, r0, r2
 8000d86:	454f      	cmp	r7, r9
 8000d88:	46c6      	mov	lr, r8
 8000d8a:	4649      	mov	r1, r9
 8000d8c:	d31a      	bcc.n	8000dc4 <__udivmoddi4+0x294>
 8000d8e:	d017      	beq.n	8000dc0 <__udivmoddi4+0x290>
 8000d90:	b15d      	cbz	r5, 8000daa <__udivmoddi4+0x27a>
 8000d92:	ebb3 020e 	subs.w	r2, r3, lr
 8000d96:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d9e:	40f2      	lsrs	r2, r6
 8000da0:	ea4c 0202 	orr.w	r2, ip, r2
 8000da4:	40f7      	lsrs	r7, r6
 8000da6:	e9c5 2700 	strd	r2, r7, [r5]
 8000daa:	2600      	movs	r6, #0
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	462e      	mov	r6, r5
 8000db4:	4628      	mov	r0, r5
 8000db6:	e70b      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000db8:	4606      	mov	r6, r0
 8000dba:	e6e9      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fd      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc0:	4543      	cmp	r3, r8
 8000dc2:	d2e5      	bcs.n	8000d90 <__udivmoddi4+0x260>
 8000dc4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dcc:	3801      	subs	r0, #1
 8000dce:	e7df      	b.n	8000d90 <__udivmoddi4+0x260>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e7d2      	b.n	8000d7a <__udivmoddi4+0x24a>
 8000dd4:	4660      	mov	r0, ip
 8000dd6:	e78d      	b.n	8000cf4 <__udivmoddi4+0x1c4>
 8000dd8:	4681      	mov	r9, r0
 8000dda:	e7b9      	b.n	8000d50 <__udivmoddi4+0x220>
 8000ddc:	4666      	mov	r6, ip
 8000dde:	e775      	b.n	8000ccc <__udivmoddi4+0x19c>
 8000de0:	4630      	mov	r0, r6
 8000de2:	e74a      	b.n	8000c7a <__udivmoddi4+0x14a>
 8000de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de8:	4439      	add	r1, r7
 8000dea:	e713      	b.n	8000c14 <__udivmoddi4+0xe4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	e724      	b.n	8000c3c <__udivmoddi4+0x10c>
 8000df2:	bf00      	nop

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <_ZN6BiquadC1Eiddd>:
    Q = 0.707;
    peakGain = 0.0;
    z1 = z2 = 0.0;
}

Biquad::Biquad(int type, double Fc, double Q, double peakGainDB) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	61f8      	str	r0, [r7, #28]
 8000e00:	61b9      	str	r1, [r7, #24]
 8000e02:	ed87 0b04 	vstr	d0, [r7, #16]
 8000e06:	ed87 1b02 	vstr	d1, [r7, #8]
 8000e0a:	ed87 2b00 	vstr	d2, [r7]
    setBiquad(type, Fc, Q, peakGainDB);
 8000e0e:	ed97 2b00 	vldr	d2, [r7]
 8000e12:	ed97 1b02 	vldr	d1, [r7, #8]
 8000e16:	ed97 0b04 	vldr	d0, [r7, #16]
 8000e1a:	69b9      	ldr	r1, [r7, #24]
 8000e1c:	69f8      	ldr	r0, [r7, #28]
 8000e1e:	f000 f830 	bl	8000e82 <_ZN6Biquad9setBiquadEiddd>
    z1 = z2 = 0.0;
 8000e22:	69f9      	ldr	r1, [r7, #28]
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000e30:	69f9      	ldr	r1, [r7, #28]
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	f04f 0300 	mov.w	r3, #0
 8000e3a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	4618      	mov	r0, r3
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_ZN6BiquadD1Ev>:

Biquad::~Biquad() {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_ZN6Biquad11setPeakGainEd>:
void Biquad::setFc(double Fc) {
    this->Fc = Fc;
    calcBiquad();
}

void Biquad::setPeakGain(double peakGainDB) {
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	ed87 0b00 	vstr	d0, [r7]
    this->peakGain = peakGainDB;
 8000e6a:	68f9      	ldr	r1, [r7, #12]
 8000e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e70:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    calcBiquad();
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f000 f83f 	bl	8000ef8 <_ZN6Biquad10calcBiquadEv>
}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_ZN6Biquad9setBiquadEiddd>:

void Biquad::setBiquad(int type, double Fc, double Q, double peakGainDB) {
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b088      	sub	sp, #32
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	61f8      	str	r0, [r7, #28]
 8000e8a:	61b9      	str	r1, [r7, #24]
 8000e8c:	ed87 0b04 	vstr	d0, [r7, #16]
 8000e90:	ed87 1b02 	vstr	d1, [r7, #8]
 8000e94:	ed87 2b00 	vstr	d2, [r7]
    this->type = type;
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	601a      	str	r2, [r3, #0]
    this->Q = Q;
 8000e9e:	69f9      	ldr	r1, [r7, #28]
 8000ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ea4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    this->Fc = Fc;
 8000ea8:	69f9      	ldr	r1, [r7, #28]
 8000eaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000eae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    setPeakGain(peakGainDB);
 8000eb2:	ed97 0b00 	vldr	d0, [r7]
 8000eb6:	69f8      	ldr	r0, [r7, #28]
 8000eb8:	f7ff ffd1 	bl	8000e5e <_ZN6Biquad11setPeakGainEd>
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fad5 	bl	800047c <__aeabi_i2d>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	ec43 2b10 	vmov	d0, r2, r3
 8000eda:	f007 fc0f 	bl	80086fc <sqrt>
 8000ede:	eeb0 7a40 	vmov.f32	s14, s0
 8000ee2:	eef0 7a60 	vmov.f32	s15, s1
 8000ee6:	eeb0 0a47 	vmov.f32	s0, s14
 8000eea:	eef0 0a67 	vmov.f32	s1, s15
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	0000      	movs	r0, r0
	...

08000ef8 <_ZN6Biquad10calcBiquadEv>:

void Biquad::calcBiquad(void) {
 8000ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000efc:	b088      	sub	sp, #32
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
    double norm;
    double V = pow(10, fabs(peakGain) / 20.0);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f08:	4690      	mov	r8, r2
 8000f0a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4bbb      	ldr	r3, [pc, #748]	; (8001200 <_ZN6Biquad10calcBiquadEv+0x308>)
 8000f14:	4640      	mov	r0, r8
 8000f16:	4649      	mov	r1, r9
 8000f18:	f7ff fc44 	bl	80007a4 <__aeabi_ddiv>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	ec43 2b17 	vmov	d7, r2, r3
 8000f24:	eeb0 0a47 	vmov.f32	s0, s14
 8000f28:	eef0 0a67 	vmov.f32	s1, s15
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f001 f987 	bl	8002240 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f32:	ed87 0b06 	vstr	d0, [r7, #24]
    double K = tan(M_PI * Fc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000f3c:	a3ae      	add	r3, pc, #696	; (adr r3, 80011f8 <_ZN6Biquad10calcBiquadEv+0x300>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fb05 	bl	8000550 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	ec43 2b17 	vmov	d7, r2, r3
 8000f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f52:	eef0 0a67 	vmov.f32	s1, s15
 8000f56:	f007 faf3 	bl	8008540 <tan>
 8000f5a:	ed87 0b04 	vstr	d0, [r7, #16]
    switch (this->type) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	f201 8165 	bhi.w	8002232 <_ZN6Biquad10calcBiquadEv+0x133a>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <_ZN6Biquad10calcBiquadEv+0x78>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000f8d 	.word	0x08000f8d
 8000f74:	080010cf 	.word	0x080010cf
 8000f78:	08001209 	.word	0x08001209
 8000f7c:	08001349 	.word	0x08001349
 8000f80:	08001495 	.word	0x08001495
 8000f84:	080018b5 	.word	0x080018b5
 8000f88:	08001dad 	.word	0x08001dad
        case bq_type_lowpass:
            norm = 1 / (1 + K / Q + K * K);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000f92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f96:	f7ff fc05 	bl	80007a4 <__aeabi_ddiv>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	4b97      	ldr	r3, [pc, #604]	; (8001204 <_ZN6Biquad10calcBiquadEv+0x30c>)
 8000fa8:	f7ff f91c 	bl	80001e4 <__adddf3>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fbc:	f7ff fac8 	bl	8000550 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff f90c 	bl	80001e4 <__adddf3>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	f04f 0000 	mov.w	r0, #0
 8000fd4:	498b      	ldr	r1, [pc, #556]	; (8001204 <_ZN6Biquad10calcBiquadEv+0x30c>)
 8000fd6:	f7ff fbe5 	bl	80007a4 <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	e9c7 2302 	strd	r2, r3, [r7, #8]
            a0 = K * K * norm;
 8000fe2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fe6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fea:	f7ff fab1 	bl	8000550 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ffa:	f7ff faa9 	bl	8000550 <__aeabi_dmul>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	e9c1 2302 	strd	r2, r3, [r1, #8]
            a1 = 2 * a0;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	f7ff f8e7 	bl	80001e4 <__adddf3>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            a2 = a0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	e9c1 2306 	strd	r2, r3, [r1, #24]
            b1 = 2 * (K * K - 1) * norm;
 800102c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001030:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001034:	f7ff fa8c 	bl	8000550 <__aeabi_dmul>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b6f      	ldr	r3, [pc, #444]	; (8001204 <_ZN6Biquad10calcBiquadEv+0x30c>)
 8001046:	f7ff f8cb 	bl	80001e0 <__aeabi_dsub>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	f7ff f8c5 	bl	80001e4 <__adddf3>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001066:	f7ff fa73 	bl	8000550 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	e9c1 2308 	strd	r2, r3, [r1, #32]
            b2 = (1 - K / Q + K * K) * norm;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800107a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800107e:	f7ff fb91 	bl	80007a4 <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	495e      	ldr	r1, [pc, #376]	; (8001204 <_ZN6Biquad10calcBiquadEv+0x30c>)
 800108c:	f7ff f8a8 	bl	80001e0 <__aeabi_dsub>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4614      	mov	r4, r2
 8001096:	461d      	mov	r5, r3
 8001098:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800109c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010a0:	f7ff fa56 	bl	8000550 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4620      	mov	r0, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	f7ff f89a 	bl	80001e4 <__adddf3>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010bc:	f7ff fa48 	bl	8000550 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            break;
 80010ca:	f001 b8b1 	b.w	8002230 <_ZN6Biquad10calcBiquadEv+0x1338>

        case bq_type_highpass:
            norm = 1 / (1 + K / Q + K * K);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010d8:	f7ff fb64 	bl	80007a4 <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <_ZN6Biquad10calcBiquadEv+0x30c>)
 80010ea:	f7ff f87b 	bl	80001e4 <__adddf3>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4614      	mov	r4, r2
 80010f4:	461d      	mov	r5, r3
 80010f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010fe:	f7ff fa27 	bl	8000550 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4620      	mov	r0, r4
 8001108:	4629      	mov	r1, r5
 800110a:	f7ff f86b 	bl	80001e4 <__adddf3>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	493b      	ldr	r1, [pc, #236]	; (8001204 <_ZN6Biquad10calcBiquadEv+0x30c>)
 8001118:	f7ff fb44 	bl	80007a4 <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	e9c7 2302 	strd	r2, r3, [r7, #8]
            a0 = 1 * norm;
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800112a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            a1 = -2 * a0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800113c:	f7ff fa08 	bl	8000550 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	e9c1 2304 	strd	r2, r3, [r1, #16]
            a2 = a0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	e9c1 2306 	strd	r2, r3, [r1, #24]
            b1 = 2 * (K * K - 1) * norm;
 8001156:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800115a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800115e:	f7ff f9f7 	bl	8000550 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <_ZN6Biquad10calcBiquadEv+0x30c>)
 8001170:	f7ff f836 	bl	80001e0 <__aeabi_dsub>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	f7ff f830 	bl	80001e4 <__adddf3>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001190:	f7ff f9de 	bl	8000550 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	e9c1 2308 	strd	r2, r3, [r1, #32]
            b2 = (1 - K / Q + K * K) * norm;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80011a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011a8:	f7ff fafc 	bl	80007a4 <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	f04f 0000 	mov.w	r0, #0
 80011b4:	4913      	ldr	r1, [pc, #76]	; (8001204 <_ZN6Biquad10calcBiquadEv+0x30c>)
 80011b6:	f7ff f813 	bl	80001e0 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4614      	mov	r4, r2
 80011c0:	461d      	mov	r5, r3
 80011c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ca:	f7ff f9c1 	bl	8000550 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4620      	mov	r0, r4
 80011d4:	4629      	mov	r1, r5
 80011d6:	f7ff f805 	bl	80001e4 <__adddf3>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011e6:	f7ff f9b3 	bl	8000550 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            break;
 80011f4:	f001 b81c 	b.w	8002230 <_ZN6Biquad10calcBiquadEv+0x1338>
 80011f8:	54442d18 	.word	0x54442d18
 80011fc:	400921fb 	.word	0x400921fb
 8001200:	40340000 	.word	0x40340000
 8001204:	3ff00000 	.word	0x3ff00000

        case bq_type_bandpass:
            norm = 1 / (1 + K / Q + K * K);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800120e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001212:	f7ff fac7 	bl	80007a4 <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b9b      	ldr	r3, [pc, #620]	; (8001490 <_ZN6Biquad10calcBiquadEv+0x598>)
 8001224:	f7fe ffde 	bl	80001e4 <__adddf3>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4690      	mov	r8, r2
 800122e:	4699      	mov	r9, r3
 8001230:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001234:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001238:	f7ff f98a 	bl	8000550 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4640      	mov	r0, r8
 8001242:	4649      	mov	r1, r9
 8001244:	f7fe ffce 	bl	80001e4 <__adddf3>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	f04f 0000 	mov.w	r0, #0
 8001250:	498f      	ldr	r1, [pc, #572]	; (8001490 <_ZN6Biquad10calcBiquadEv+0x598>)
 8001252:	f7ff faa7 	bl	80007a4 <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	e9c7 2302 	strd	r2, r3, [r7, #8]
            a0 = K / Q * norm;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001264:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001268:	f7ff fa9c 	bl	80007a4 <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001278:	f7ff f96a 	bl	8000550 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	e9c1 2302 	strd	r2, r3, [r1, #8]
            a1 = 0;
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9c1 2304 	strd	r2, r3, [r1, #16]
            a2 = -a0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800129a:	4614      	mov	r4, r2
 800129c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	e9c3 4506 	strd	r4, r5, [r3, #24]
            b1 = 2 * (K * K - 1) * norm;
 80012a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ae:	f7ff f94f 	bl	8000550 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b74      	ldr	r3, [pc, #464]	; (8001490 <_ZN6Biquad10calcBiquadEv+0x598>)
 80012c0:	f7fe ff8e 	bl	80001e0 <__aeabi_dsub>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	f7fe ff88 	bl	80001e4 <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012e0:	f7ff f936 	bl	8000550 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	e9c1 2308 	strd	r2, r3, [r1, #32]
            b2 = (1 - K / Q + K * K) * norm;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80012f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012f8:	f7ff fa54 	bl	80007a4 <__aeabi_ddiv>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	f04f 0000 	mov.w	r0, #0
 8001304:	4962      	ldr	r1, [pc, #392]	; (8001490 <_ZN6Biquad10calcBiquadEv+0x598>)
 8001306:	f7fe ff6b 	bl	80001e0 <__aeabi_dsub>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4614      	mov	r4, r2
 8001310:	461d      	mov	r5, r3
 8001312:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001316:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800131a:	f7ff f919 	bl	8000550 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7fe ff5d 	bl	80001e4 <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001336:	f7ff f90b 	bl	8000550 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            break;
 8001344:	f000 bf74 	b.w	8002230 <_ZN6Biquad10calcBiquadEv+0x1338>

        case bq_type_notch:
            norm = 1 / (1 + K / Q + K * K);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800134e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001352:	f7ff fa27 	bl	80007a4 <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <_ZN6Biquad10calcBiquadEv+0x598>)
 8001364:	f7fe ff3e 	bl	80001e4 <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4614      	mov	r4, r2
 800136e:	461d      	mov	r5, r3
 8001370:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001374:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001378:	f7ff f8ea 	bl	8000550 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4620      	mov	r0, r4
 8001382:	4629      	mov	r1, r5
 8001384:	f7fe ff2e 	bl	80001e4 <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	f04f 0000 	mov.w	r0, #0
 8001390:	493f      	ldr	r1, [pc, #252]	; (8001490 <_ZN6Biquad10calcBiquadEv+0x598>)
 8001392:	f7ff fa07 	bl	80007a4 <__aeabi_ddiv>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	e9c7 2302 	strd	r2, r3, [r7, #8]
            a0 = (1 + K * K) * norm;
 800139e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013a6:	f7ff f8d3 	bl	8000550 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b36      	ldr	r3, [pc, #216]	; (8001490 <_ZN6Biquad10calcBiquadEv+0x598>)
 80013b8:	f7fe ff14 	bl	80001e4 <__adddf3>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013c8:	f7ff f8c2 	bl	8000550 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            a1 = 2 * (K * K - 1) * norm;
 80013d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013de:	f7ff f8b7 	bl	8000550 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <_ZN6Biquad10calcBiquadEv+0x598>)
 80013f0:	f7fe fef6 	bl	80001e0 <__aeabi_dsub>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	f7fe fef0 	bl	80001e4 <__adddf3>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001410:	f7ff f89e 	bl	8000550 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	e9c1 2304 	strd	r2, r3, [r1, #16]
            a2 = a0;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	e9c1 2306 	strd	r2, r3, [r1, #24]
            b1 = a1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	e9c1 2308 	strd	r2, r3, [r1, #32]
            b2 = (1 - K / Q + K * K) * norm;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800143c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001440:	f7ff f9b0 	bl	80007a4 <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	f04f 0000 	mov.w	r0, #0
 800144c:	4910      	ldr	r1, [pc, #64]	; (8001490 <_ZN6Biquad10calcBiquadEv+0x598>)
 800144e:	f7fe fec7 	bl	80001e0 <__aeabi_dsub>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4614      	mov	r4, r2
 8001458:	461d      	mov	r5, r3
 800145a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800145e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001462:	f7ff f875 	bl	8000550 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7fe feb9 	bl	80001e4 <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800147e:	f7ff f867 	bl	8000550 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            break;
 800148c:	f000 bed0 	b.w	8002230 <_ZN6Biquad10calcBiquadEv+0x1338>
 8001490:	3ff00000 	.word	0x3ff00000

        case bq_type_peak:
            if (peakGain >= 0) {    // boost
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800149a:	2301      	movs	r3, #1
 800149c:	461c      	mov	r4, r3
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f7ff fad9 	bl	8000a5c <__aeabi_dcmpge>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <_ZN6Biquad10calcBiquadEv+0x5bc>
 80014b0:	2300      	movs	r3, #0
 80014b2:	461c      	mov	r4, r3
 80014b4:	b2e3      	uxtb	r3, r4
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 80fe 	beq.w	80016b8 <_ZN6Biquad10calcBiquadEv+0x7c0>
                norm = 1 / (1 + 1/Q * K + K * K);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80014c2:	f04f 0000 	mov.w	r0, #0
 80014c6:	497b      	ldr	r1, [pc, #492]	; (80016b4 <_ZN6Biquad10calcBiquadEv+0x7bc>)
 80014c8:	f7ff f96c 	bl	80007a4 <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014d8:	f7ff f83a 	bl	8000550 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b72      	ldr	r3, [pc, #456]	; (80016b4 <_ZN6Biquad10calcBiquadEv+0x7bc>)
 80014ea:	f7fe fe7b 	bl	80001e4 <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4614      	mov	r4, r2
 80014f4:	461d      	mov	r5, r3
 80014f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014fe:	f7ff f827 	bl	8000550 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7fe fe6b 	bl	80001e4 <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	f04f 0000 	mov.w	r0, #0
 8001516:	4967      	ldr	r1, [pc, #412]	; (80016b4 <_ZN6Biquad10calcBiquadEv+0x7bc>)
 8001518:	f7ff f944 	bl	80007a4 <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	e9c7 2302 	strd	r2, r3, [r7, #8]
                a0 = (1 + V/Q * K + K * K) * norm;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800152a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800152e:	f7ff f939 	bl	80007a4 <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800153e:	f7ff f807 	bl	8000550 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <_ZN6Biquad10calcBiquadEv+0x7bc>)
 8001550:	f7fe fe48 	bl	80001e4 <__adddf3>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4614      	mov	r4, r2
 800155a:	461d      	mov	r5, r3
 800155c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001560:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001564:	f7fe fff4 	bl	8000550 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7fe fe38 	bl	80001e4 <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001580:	f7fe ffe6 	bl	8000550 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	e9c1 2302 	strd	r2, r3, [r1, #8]
                a1 = 2 * (K * K - 1) * norm;
 800158e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001596:	f7fe ffdb 	bl	8000550 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <_ZN6Biquad10calcBiquadEv+0x7bc>)
 80015a8:	f7fe fe1a 	bl	80001e0 <__aeabi_dsub>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	f7fe fe14 	bl	80001e4 <__adddf3>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015c8:	f7fe ffc2 	bl	8000550 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
                a2 = (1 - V/Q * K + K * K) * norm;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015e0:	f7ff f8e0 	bl	80007a4 <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015f0:	f7fe ffae 	bl	8000550 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	f04f 0000 	mov.w	r0, #0
 80015fc:	492d      	ldr	r1, [pc, #180]	; (80016b4 <_ZN6Biquad10calcBiquadEv+0x7bc>)
 80015fe:	f7fe fdef 	bl	80001e0 <__aeabi_dsub>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4614      	mov	r4, r2
 8001608:	461d      	mov	r5, r3
 800160a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800160e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001612:	f7fe ff9d 	bl	8000550 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe fde1 	bl	80001e4 <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800162e:	f7fe ff8f 	bl	8000550 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	e9c1 2306 	strd	r2, r3, [r1, #24]
                b1 = a1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	e9c1 2308 	strd	r2, r3, [r1, #32]
                b2 = (1 - 1/Q * K + K * K) * norm;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800164e:	f04f 0000 	mov.w	r0, #0
 8001652:	4918      	ldr	r1, [pc, #96]	; (80016b4 <_ZN6Biquad10calcBiquadEv+0x7bc>)
 8001654:	f7ff f8a6 	bl	80007a4 <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001664:	f7fe ff74 	bl	8000550 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	f04f 0000 	mov.w	r0, #0
 8001670:	4910      	ldr	r1, [pc, #64]	; (80016b4 <_ZN6Biquad10calcBiquadEv+0x7bc>)
 8001672:	f7fe fdb5 	bl	80001e0 <__aeabi_dsub>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4614      	mov	r4, r2
 800167c:	461d      	mov	r5, r3
 800167e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001682:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001686:	f7fe ff63 	bl	8000550 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f7fe fda7 	bl	80001e4 <__adddf3>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016a2:	f7fe ff55 	bl	8000550 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                a1 = 2 * (K * K - 1) * norm;
                a2 = (1 - 1/Q * K + K * K) * norm;
                b1 = a1;
                b2 = (1 - V/Q * K + K * K) * norm;
            }
            break;
 80016b0:	f000 bdbe 	b.w	8002230 <_ZN6Biquad10calcBiquadEv+0x1338>
 80016b4:	3ff00000 	.word	0x3ff00000
                norm = 1 / (1 + V/Q * K + K * K);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80016be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016c2:	f7ff f86f 	bl	80007a4 <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016d2:	f7fe ff3d 	bl	8000550 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <_ZN6Biquad10calcBiquadEv+0x9b8>)
 80016e4:	f7fe fd7e 	bl	80001e4 <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4614      	mov	r4, r2
 80016ee:	461d      	mov	r5, r3
 80016f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016f8:	f7fe ff2a 	bl	8000550 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4620      	mov	r0, r4
 8001702:	4629      	mov	r1, r5
 8001704:	f7fe fd6e 	bl	80001e4 <__adddf3>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	f04f 0000 	mov.w	r0, #0
 8001710:	4967      	ldr	r1, [pc, #412]	; (80018b0 <_ZN6Biquad10calcBiquadEv+0x9b8>)
 8001712:	f7ff f847 	bl	80007a4 <__aeabi_ddiv>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	e9c7 2302 	strd	r2, r3, [r7, #8]
                a0 = (1 + 1/Q * K + K * K) * norm;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001724:	f04f 0000 	mov.w	r0, #0
 8001728:	4961      	ldr	r1, [pc, #388]	; (80018b0 <_ZN6Biquad10calcBiquadEv+0x9b8>)
 800172a:	f7ff f83b 	bl	80007a4 <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800173a:	f7fe ff09 	bl	8000550 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <_ZN6Biquad10calcBiquadEv+0x9b8>)
 800174c:	f7fe fd4a 	bl	80001e4 <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4614      	mov	r4, r2
 8001756:	461d      	mov	r5, r3
 8001758:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800175c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001760:	f7fe fef6 	bl	8000550 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe fd3a 	bl	80001e4 <__adddf3>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800177c:	f7fe fee8 	bl	8000550 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	e9c1 2302 	strd	r2, r3, [r1, #8]
                a1 = 2 * (K * K - 1) * norm;
 800178a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800178e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001792:	f7fe fedd 	bl	8000550 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <_ZN6Biquad10calcBiquadEv+0x9b8>)
 80017a4:	f7fe fd1c 	bl	80001e0 <__aeabi_dsub>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	f7fe fd16 	bl	80001e4 <__adddf3>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017c4:	f7fe fec4 	bl	8000550 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
                a2 = (1 - 1/Q * K + K * K) * norm;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017d8:	f04f 0000 	mov.w	r0, #0
 80017dc:	4934      	ldr	r1, [pc, #208]	; (80018b0 <_ZN6Biquad10calcBiquadEv+0x9b8>)
 80017de:	f7fe ffe1 	bl	80007a4 <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017ee:	f7fe feaf 	bl	8000550 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	492d      	ldr	r1, [pc, #180]	; (80018b0 <_ZN6Biquad10calcBiquadEv+0x9b8>)
 80017fc:	f7fe fcf0 	bl	80001e0 <__aeabi_dsub>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4614      	mov	r4, r2
 8001806:	461d      	mov	r5, r3
 8001808:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800180c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001810:	f7fe fe9e 	bl	8000550 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fce2 	bl	80001e4 <__adddf3>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800182c:	f7fe fe90 	bl	8000550 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	e9c1 2306 	strd	r2, r3, [r1, #24]
                b1 = a1;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	e9c1 2308 	strd	r2, r3, [r1, #32]
                b2 = (1 - V/Q * K + K * K) * norm;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800184c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001850:	f7fe ffa8 	bl	80007a4 <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001860:	f7fe fe76 	bl	8000550 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	4910      	ldr	r1, [pc, #64]	; (80018b0 <_ZN6Biquad10calcBiquadEv+0x9b8>)
 800186e:	f7fe fcb7 	bl	80001e0 <__aeabi_dsub>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4614      	mov	r4, r2
 8001878:	461d      	mov	r5, r3
 800187a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800187e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001882:	f7fe fe65 	bl	8000550 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4620      	mov	r0, r4
 800188c:	4629      	mov	r1, r5
 800188e:	f7fe fca9 	bl	80001e4 <__adddf3>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800189e:	f7fe fe57 	bl	8000550 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            break;
 80018ac:	f000 bcc0 	b.w	8002230 <_ZN6Biquad10calcBiquadEv+0x1338>
 80018b0:	3ff00000 	.word	0x3ff00000
        case bq_type_lowshelf:
            if (peakGain >= 0) {    // boost
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80018ba:	2301      	movs	r3, #1
 80018bc:	461c      	mov	r4, r3
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	f7ff f8c9 	bl	8000a5c <__aeabi_dcmpge>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <_ZN6Biquad10calcBiquadEv+0x9dc>
 80018d0:	2300      	movs	r3, #0
 80018d2:	461c      	mov	r4, r3
 80018d4:	b2e3      	uxtb	r3, r4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8134 	beq.w	8001b44 <_ZN6Biquad10calcBiquadEv+0xc4c>
                norm = 1 / (1 + sqrt(2) * K + K * K);
 80018dc:	2002      	movs	r0, #2
 80018de:	f7ff faf1 	bl	8000ec4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80018e2:	ec51 0b10 	vmov	r0, r1, d0
 80018e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018ea:	f7fe fe31 	bl	8000550 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b91      	ldr	r3, [pc, #580]	; (8001b40 <_ZN6Biquad10calcBiquadEv+0xc48>)
 80018fc:	f7fe fc72 	bl	80001e4 <__adddf3>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800190c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001910:	f7fe fe1e 	bl	8000550 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4620      	mov	r0, r4
 800191a:	4629      	mov	r1, r5
 800191c:	f7fe fc62 	bl	80001e4 <__adddf3>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	f04f 0000 	mov.w	r0, #0
 8001928:	4985      	ldr	r1, [pc, #532]	; (8001b40 <_ZN6Biquad10calcBiquadEv+0xc48>)
 800192a:	f7fe ff3b 	bl	80007a4 <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	e9c7 2302 	strd	r2, r3, [r7, #8]
                a0 = (1 + sqrt(2*V) * K + V * K * K) * norm;
 8001936:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	f7fe fc51 	bl	80001e4 <__adddf3>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	ec43 2b17 	vmov	d7, r2, r3
 800194a:	eeb0 0a47 	vmov.f32	s0, s14
 800194e:	eef0 0a67 	vmov.f32	s1, s15
 8001952:	f006 fed3 	bl	80086fc <sqrt>
 8001956:	ec51 0b10 	vmov	r0, r1, d0
 800195a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800195e:	f7fe fdf7 	bl	8000550 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b74      	ldr	r3, [pc, #464]	; (8001b40 <_ZN6Biquad10calcBiquadEv+0xc48>)
 8001970:	f7fe fc38 	bl	80001e4 <__adddf3>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001980:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001984:	f7fe fde4 	bl	8000550 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001994:	f7fe fddc 	bl	8000550 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7fe fc20 	bl	80001e4 <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019b0:	f7fe fdce 	bl	8000550 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
                a1 = 2 * (V * K * K - 1) * norm;
 80019be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019c6:	f7fe fdc3 	bl	8000550 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019d6:	f7fe fdbb 	bl	8000550 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <_ZN6Biquad10calcBiquadEv+0xc48>)
 80019e8:	f7fe fbfa 	bl	80001e0 <__aeabi_dsub>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	f7fe fbf4 	bl	80001e4 <__adddf3>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a08:	f7fe fda2 	bl	8000550 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	e9c1 2304 	strd	r2, r3, [r1, #16]
                a2 = (1 - sqrt(2*V) * K + V * K * K) * norm;
 8001a16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	f7fe fbe1 	bl	80001e4 <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	ec43 2b17 	vmov	d7, r2, r3
 8001a2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2e:	eef0 0a67 	vmov.f32	s1, s15
 8001a32:	f006 fe63 	bl	80086fc <sqrt>
 8001a36:	ec51 0b10 	vmov	r0, r1, d0
 8001a3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a3e:	f7fe fd87 	bl	8000550 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	f04f 0000 	mov.w	r0, #0
 8001a4a:	493d      	ldr	r1, [pc, #244]	; (8001b40 <_ZN6Biquad10calcBiquadEv+0xc48>)
 8001a4c:	f7fe fbc8 	bl	80001e0 <__aeabi_dsub>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4614      	mov	r4, r2
 8001a56:	461d      	mov	r5, r3
 8001a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a60:	f7fe fd76 	bl	8000550 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a70:	f7fe fd6e 	bl	8000550 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe fbb2 	bl	80001e4 <__adddf3>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a8c:	f7fe fd60 	bl	8000550 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	e9c1 2306 	strd	r2, r3, [r1, #24]
                b1 = 2 * (K * K - 1) * norm;
 8001a9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aa2:	f7fe fd55 	bl	8000550 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <_ZN6Biquad10calcBiquadEv+0xc48>)
 8001ab4:	f7fe fb94 	bl	80001e0 <__aeabi_dsub>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	f7fe fb8e 	bl	80001e4 <__adddf3>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ad4:	f7fe fd3c 	bl	8000550 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	e9c1 2308 	strd	r2, r3, [r1, #32]
                b2 = (1 - sqrt(2) * K + K * K) * norm;
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f7ff f9ee 	bl	8000ec4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ae8:	ec51 0b10 	vmov	r0, r1, d0
 8001aec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001af0:	f7fe fd2e 	bl	8000550 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	f04f 0000 	mov.w	r0, #0
 8001afc:	4910      	ldr	r1, [pc, #64]	; (8001b40 <_ZN6Biquad10calcBiquadEv+0xc48>)
 8001afe:	f7fe fb6f 	bl	80001e0 <__aeabi_dsub>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4614      	mov	r4, r2
 8001b08:	461d      	mov	r5, r3
 8001b0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b12:	f7fe fd1d 	bl	8000550 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fb61 	bl	80001e4 <__adddf3>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b2e:	f7fe fd0f 	bl	8000550 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                a1 = 2 * (K * K - 1) * norm;
                a2 = (1 - sqrt(2) * K + K * K) * norm;
                b1 = 2 * (V * K * K - 1) * norm;
                b2 = (1 - sqrt(2*V) * K + V * K * K) * norm;
            }
            break;
 8001b3c:	e378      	b.n	8002230 <_ZN6Biquad10calcBiquadEv+0x1338>
 8001b3e:	bf00      	nop
 8001b40:	3ff00000 	.word	0x3ff00000
                norm = 1 / (1 + sqrt(2*V) * K + V * K * K);
 8001b44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	f7fe fb4a 	bl	80001e4 <__adddf3>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	ec43 2b17 	vmov	d7, r2, r3
 8001b58:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5c:	eef0 0a67 	vmov.f32	s1, s15
 8001b60:	f006 fdcc 	bl	80086fc <sqrt>
 8001b64:	ec51 0b10 	vmov	r0, r1, d0
 8001b68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b6c:	f7fe fcf0 	bl	8000550 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b8a      	ldr	r3, [pc, #552]	; (8001da8 <_ZN6Biquad10calcBiquadEv+0xeb0>)
 8001b7e:	f7fe fb31 	bl	80001e4 <__adddf3>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b92:	f7fe fcdd 	bl	8000550 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ba2:	f7fe fcd5 	bl	8000550 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f7fe fb19 	bl	80001e4 <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	f04f 0000 	mov.w	r0, #0
 8001bba:	497b      	ldr	r1, [pc, #492]	; (8001da8 <_ZN6Biquad10calcBiquadEv+0xeb0>)
 8001bbc:	f7fe fdf2 	bl	80007a4 <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
                a0 = (1 + sqrt(2) * K + K * K) * norm;
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f7ff f97b 	bl	8000ec4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001bce:	ec51 0b10 	vmov	r0, r1, d0
 8001bd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bd6:	f7fe fcbb 	bl	8000550 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b70      	ldr	r3, [pc, #448]	; (8001da8 <_ZN6Biquad10calcBiquadEv+0xeb0>)
 8001be8:	f7fe fafc 	bl	80001e4 <__adddf3>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bfc:	f7fe fca8 	bl	8000550 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f7fe faec 	bl	80001e4 <__adddf3>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c18:	f7fe fc9a 	bl	8000550 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	e9c1 2302 	strd	r2, r3, [r1, #8]
                a1 = 2 * (K * K - 1) * norm;
 8001c26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c2e:	f7fe fc8f 	bl	8000550 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <_ZN6Biquad10calcBiquadEv+0xeb0>)
 8001c40:	f7fe face 	bl	80001e0 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	f7fe fac8 	bl	80001e4 <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c60:	f7fe fc76 	bl	8000550 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
                a2 = (1 - sqrt(2) * K + K * K) * norm;
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f7ff f928 	bl	8000ec4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001c74:	ec51 0b10 	vmov	r0, r1, d0
 8001c78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c7c:	f7fe fc68 	bl	8000550 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	f04f 0000 	mov.w	r0, #0
 8001c88:	4947      	ldr	r1, [pc, #284]	; (8001da8 <_ZN6Biquad10calcBiquadEv+0xeb0>)
 8001c8a:	f7fe faa9 	bl	80001e0 <__aeabi_dsub>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4614      	mov	r4, r2
 8001c94:	461d      	mov	r5, r3
 8001c96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c9e:	f7fe fc57 	bl	8000550 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fa9b 	bl	80001e4 <__adddf3>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cba:	f7fe fc49 	bl	8000550 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	e9c1 2306 	strd	r2, r3, [r1, #24]
                b1 = 2 * (V * K * K - 1) * norm;
 8001cc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ccc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cd0:	f7fe fc3e 	bl	8000550 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ce0:	f7fe fc36 	bl	8000550 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <_ZN6Biquad10calcBiquadEv+0xeb0>)
 8001cf2:	f7fe fa75 	bl	80001e0 <__aeabi_dsub>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	f7fe fa6f 	bl	80001e4 <__adddf3>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d12:	f7fe fc1d 	bl	8000550 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	e9c1 2308 	strd	r2, r3, [r1, #32]
                b2 = (1 - sqrt(2*V) * K + V * K * K) * norm;
 8001d20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	f7fe fa5c 	bl	80001e4 <__adddf3>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	ec43 2b17 	vmov	d7, r2, r3
 8001d34:	eeb0 0a47 	vmov.f32	s0, s14
 8001d38:	eef0 0a67 	vmov.f32	s1, s15
 8001d3c:	f006 fcde 	bl	80086fc <sqrt>
 8001d40:	ec51 0b10 	vmov	r0, r1, d0
 8001d44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d48:	f7fe fc02 	bl	8000550 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	f04f 0000 	mov.w	r0, #0
 8001d54:	4914      	ldr	r1, [pc, #80]	; (8001da8 <_ZN6Biquad10calcBiquadEv+0xeb0>)
 8001d56:	f7fe fa43 	bl	80001e0 <__aeabi_dsub>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4614      	mov	r4, r2
 8001d60:	461d      	mov	r5, r3
 8001d62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d6a:	f7fe fbf1 	bl	8000550 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d7a:	f7fe fbe9 	bl	8000550 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe fa2d 	bl	80001e4 <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d96:	f7fe fbdb 	bl	8000550 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            break;
 8001da4:	e244      	b.n	8002230 <_ZN6Biquad10calcBiquadEv+0x1338>
 8001da6:	bf00      	nop
 8001da8:	3ff00000 	.word	0x3ff00000
        case bq_type_highshelf:
            if (peakGain >= 0) {    // boost
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001db2:	2301      	movs	r3, #1
 8001db4:	461c      	mov	r4, r3
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	f7fe fe4d 	bl	8000a5c <__aeabi_dcmpge>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <_ZN6Biquad10calcBiquadEv+0xed4>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	461c      	mov	r4, r3
 8001dcc:	b2e3      	uxtb	r3, r4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8118 	beq.w	8002004 <_ZN6Biquad10calcBiquadEv+0x110c>
                norm = 1 / (1 + sqrt(2) * K + K * K);
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f7ff f875 	bl	8000ec4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dda:	ec51 0b10 	vmov	r0, r1, d0
 8001dde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001de2:	f7fe fbb5 	bl	8000550 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4b83      	ldr	r3, [pc, #524]	; (8002000 <_ZN6Biquad10calcBiquadEv+0x1108>)
 8001df4:	f7fe f9f6 	bl	80001e4 <__adddf3>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	461d      	mov	r5, r3
 8001e00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e08:	f7fe fba2 	bl	8000550 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4620      	mov	r0, r4
 8001e12:	4629      	mov	r1, r5
 8001e14:	f7fe f9e6 	bl	80001e4 <__adddf3>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	4977      	ldr	r1, [pc, #476]	; (8002000 <_ZN6Biquad10calcBiquadEv+0x1108>)
 8001e22:	f7fe fcbf 	bl	80007a4 <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9c7 2302 	strd	r2, r3, [r7, #8]
                a0 = (V + sqrt(2*V) * K + K * K) * norm;
 8001e2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	f7fe f9d5 	bl	80001e4 <__adddf3>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	ec43 2b17 	vmov	d7, r2, r3
 8001e42:	eeb0 0a47 	vmov.f32	s0, s14
 8001e46:	eef0 0a67 	vmov.f32	s1, s15
 8001e4a:	f006 fc57 	bl	80086fc <sqrt>
 8001e4e:	ec51 0b10 	vmov	r0, r1, d0
 8001e52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e56:	f7fe fb7b 	bl	8000550 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e66:	f7fe f9bd 	bl	80001e4 <__adddf3>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4614      	mov	r4, r2
 8001e70:	461d      	mov	r5, r3
 8001e72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e7a:	f7fe fb69 	bl	8000550 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4620      	mov	r0, r4
 8001e84:	4629      	mov	r1, r5
 8001e86:	f7fe f9ad 	bl	80001e4 <__adddf3>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e96:	f7fe fb5b 	bl	8000550 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	e9c1 2302 	strd	r2, r3, [r1, #8]
                a1 = 2 * (K * K - V) * norm;
 8001ea4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ea8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eac:	f7fe fb50 	bl	8000550 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ebc:	f7fe f990 	bl	80001e0 <__aeabi_dsub>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	f7fe f98a 	bl	80001e4 <__adddf3>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001edc:	f7fe fb38 	bl	8000550 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	e9c1 2304 	strd	r2, r3, [r1, #16]
                a2 = (V - sqrt(2*V) * K + K * K) * norm;
 8001eea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	f7fe f977 	bl	80001e4 <__adddf3>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	ec43 2b17 	vmov	d7, r2, r3
 8001efe:	eeb0 0a47 	vmov.f32	s0, s14
 8001f02:	eef0 0a67 	vmov.f32	s1, s15
 8001f06:	f006 fbf9 	bl	80086fc <sqrt>
 8001f0a:	ec51 0b10 	vmov	r0, r1, d0
 8001f0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f12:	f7fe fb1d 	bl	8000550 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f1e:	f7fe f95f 	bl	80001e0 <__aeabi_dsub>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4614      	mov	r4, r2
 8001f28:	461d      	mov	r5, r3
 8001f2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f32:	f7fe fb0d 	bl	8000550 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	f7fe f951 	bl	80001e4 <__adddf3>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f4e:	f7fe faff 	bl	8000550 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	e9c1 2306 	strd	r2, r3, [r1, #24]
                b1 = 2 * (K * K - 1) * norm;
 8001f5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f64:	f7fe faf4 	bl	8000550 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <_ZN6Biquad10calcBiquadEv+0x1108>)
 8001f76:	f7fe f933 	bl	80001e0 <__aeabi_dsub>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	f7fe f92d 	bl	80001e4 <__adddf3>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f96:	f7fe fadb 	bl	8000550 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	e9c1 2308 	strd	r2, r3, [r1, #32]
                b2 = (1 - sqrt(2) * K + K * K) * norm;
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f7fe ff8d 	bl	8000ec4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001faa:	ec51 0b10 	vmov	r0, r1, d0
 8001fae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fb2:	f7fe facd 	bl	8000550 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	f04f 0000 	mov.w	r0, #0
 8001fbe:	4910      	ldr	r1, [pc, #64]	; (8002000 <_ZN6Biquad10calcBiquadEv+0x1108>)
 8001fc0:	f7fe f90e 	bl	80001e0 <__aeabi_dsub>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4614      	mov	r4, r2
 8001fca:	461d      	mov	r5, r3
 8001fcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fd4:	f7fe fabc 	bl	8000550 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4620      	mov	r0, r4
 8001fde:	4629      	mov	r1, r5
 8001fe0:	f7fe f900 	bl	80001e4 <__adddf3>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ff0:	f7fe faae 	bl	8000550 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                a1 = 2 * (K * K - 1) * norm;
                a2 = (1 - sqrt(2) * K + K * K) * norm;
                b1 = 2 * (K * K - V) * norm;
                b2 = (V - sqrt(2*V) * K + K * K) * norm;
            }
            break;
 8001ffe:	e116      	b.n	800222e <_ZN6Biquad10calcBiquadEv+0x1336>
 8002000:	3ff00000 	.word	0x3ff00000
                norm = 1 / (V + sqrt(2*V) * K + K * K);
 8002004:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	f7fe f8ea 	bl	80001e4 <__adddf3>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	ec43 2b17 	vmov	d7, r2, r3
 8002018:	eeb0 0a47 	vmov.f32	s0, s14
 800201c:	eef0 0a67 	vmov.f32	s1, s15
 8002020:	f006 fb6c 	bl	80086fc <sqrt>
 8002024:	ec51 0b10 	vmov	r0, r1, d0
 8002028:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800202c:	f7fe fa90 	bl	8000550 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800203c:	f7fe f8d2 	bl	80001e4 <__adddf3>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4614      	mov	r4, r2
 8002046:	461d      	mov	r5, r3
 8002048:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800204c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002050:	f7fe fa7e 	bl	8000550 <__aeabi_dmul>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f7fe f8c2 	bl	80001e4 <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	f04f 0000 	mov.w	r0, #0
 8002068:	4974      	ldr	r1, [pc, #464]	; (800223c <_ZN6Biquad10calcBiquadEv+0x1344>)
 800206a:	f7fe fb9b 	bl	80007a4 <__aeabi_ddiv>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	e9c7 2302 	strd	r2, r3, [r7, #8]
                a0 = (1 + sqrt(2) * K + K * K) * norm;
 8002076:	2002      	movs	r0, #2
 8002078:	f7fe ff24 	bl	8000ec4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800207c:	ec51 0b10 	vmov	r0, r1, d0
 8002080:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002084:	f7fe fa64 	bl	8000550 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b69      	ldr	r3, [pc, #420]	; (800223c <_ZN6Biquad10calcBiquadEv+0x1344>)
 8002096:	f7fe f8a5 	bl	80001e4 <__adddf3>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020aa:	f7fe fa51 	bl	8000550 <__aeabi_dmul>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe f895 	bl	80001e4 <__adddf3>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020c6:	f7fe fa43 	bl	8000550 <__aeabi_dmul>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
                a1 = 2 * (K * K - 1) * norm;
 80020d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020dc:	f7fe fa38 	bl	8000550 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	4b53      	ldr	r3, [pc, #332]	; (800223c <_ZN6Biquad10calcBiquadEv+0x1344>)
 80020ee:	f7fe f877 	bl	80001e0 <__aeabi_dsub>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	f7fe f871 	bl	80001e4 <__adddf3>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800210e:	f7fe fa1f 	bl	8000550 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	e9c1 2304 	strd	r2, r3, [r1, #16]
                a2 = (1 - sqrt(2) * K + K * K) * norm;
 800211c:	2002      	movs	r0, #2
 800211e:	f7fe fed1 	bl	8000ec4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002122:	ec51 0b10 	vmov	r0, r1, d0
 8002126:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800212a:	f7fe fa11 	bl	8000550 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	4941      	ldr	r1, [pc, #260]	; (800223c <_ZN6Biquad10calcBiquadEv+0x1344>)
 8002138:	f7fe f852 	bl	80001e0 <__aeabi_dsub>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4614      	mov	r4, r2
 8002142:	461d      	mov	r5, r3
 8002144:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002148:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800214c:	f7fe fa00 	bl	8000550 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4620      	mov	r0, r4
 8002156:	4629      	mov	r1, r5
 8002158:	f7fe f844 	bl	80001e4 <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002168:	f7fe f9f2 	bl	8000550 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	e9c1 2306 	strd	r2, r3, [r1, #24]
                b1 = 2 * (K * K - V) * norm;
 8002176:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800217a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800217e:	f7fe f9e7 	bl	8000550 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218e:	f7fe f827 	bl	80001e0 <__aeabi_dsub>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	f7fe f821 	bl	80001e4 <__adddf3>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ae:	f7fe f9cf 	bl	8000550 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	e9c1 2308 	strd	r2, r3, [r1, #32]
                b2 = (V - sqrt(2*V) * K + K * K) * norm;
 80021bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	f7fe f80e 	bl	80001e4 <__adddf3>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	ec43 2b17 	vmov	d7, r2, r3
 80021d0:	eeb0 0a47 	vmov.f32	s0, s14
 80021d4:	eef0 0a67 	vmov.f32	s1, s15
 80021d8:	f006 fa90 	bl	80086fc <sqrt>
 80021dc:	ec51 0b10 	vmov	r0, r1, d0
 80021e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021e4:	f7fe f9b4 	bl	8000550 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021f0:	f7fd fff6 	bl	80001e0 <__aeabi_dsub>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4614      	mov	r4, r2
 80021fa:	461d      	mov	r5, r3
 80021fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002200:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002204:	f7fe f9a4 	bl	8000550 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fd ffe8 	bl	80001e4 <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002220:	f7fe f996 	bl	8000550 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
            break;
 800222e:	bf00      	nop
    }

    return;
 8002230:	bf00      	nop
 8002232:	bf00      	nop
}
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800223c:	3ff00000 	.word	0x3ff00000

08002240 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7fe f915 	bl	800047c <__aeabi_i2d>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	ed97 1b00 	vldr	d1, [r7]
 800225a:	ec43 2b10 	vmov	d0, r2, r3
 800225e:	f006 f99f 	bl	80085a0 <pow>
 8002262:	eeb0 7a40 	vmov.f32	s14, s0
 8002266:	eef0 7a60 	vmov.f32	s15, s1
    }
 800226a:	eeb0 0a47 	vmov.f32	s0, s14
 800226e:	eef0 0a67 	vmov.f32	s1, s15
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_Z20get_biquad_for_level20tone_intensity_level>:
	} else {
		dsp_copy(src, dest, length);
	}
}

Biquad* get_biquad_for_level(tone_intensity_level intensity_level) {
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]

	Biquad* biquad = NULL;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]

	switch (intensity_level) {
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b07      	cmp	r3, #7
 800228a:	f200 808a 	bhi.w	80023a2 <_Z20get_biquad_for_level20tone_intensity_level+0x12a>
 800228e:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <_Z20get_biquad_for_level20tone_intensity_level+0x1c>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	080023a3 	.word	0x080023a3
 8002298:	080022b5 	.word	0x080022b5
 800229c:	080022d7 	.word	0x080022d7
 80022a0:	080022f9 	.word	0x080022f9
 80022a4:	0800231b 	.word	0x0800231b
 80022a8:	0800233d 	.word	0x0800233d
 80022ac:	0800235f 	.word	0x0800235f
 80022b0:	08002381 	.word	0x08002381

	case NONE:
		break;
	case LOW_STRONG:
		biquad = new Biquad(bq_type_lowshelf, .0208, 1, -9.0);
 80022b4:	2078      	movs	r0, #120	; 0x78
 80022b6:	f006 f8d3 	bl	8008460 <_Znwj>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461c      	mov	r4, r3
 80022be:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80023b0 <_Z20get_biquad_for_level20tone_intensity_level+0x138>
 80022c2:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80023b8 <_Z20get_biquad_for_level20tone_intensity_level+0x140>
 80022c6:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80023c0 <_Z20get_biquad_for_level20tone_intensity_level+0x148>
 80022ca:	2105      	movs	r1, #5
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7fe fd93 	bl	8000df8 <_ZN6BiquadC1Eiddd>
 80022d2:	60fc      	str	r4, [r7, #12]
		break;
 80022d4:	e065      	b.n	80023a2 <_Z20get_biquad_for_level20tone_intensity_level+0x12a>
	case LOW_MODERATE:
		biquad = new Biquad(bq_type_lowshelf, .0208, 1, -6.0);
 80022d6:	2078      	movs	r0, #120	; 0x78
 80022d8:	f006 f8c2 	bl	8008460 <_Znwj>
 80022dc:	4603      	mov	r3, r0
 80022de:	461c      	mov	r4, r3
 80022e0:	ed9f 2b39 	vldr	d2, [pc, #228]	; 80023c8 <_Z20get_biquad_for_level20tone_intensity_level+0x150>
 80022e4:	ed9f 1b34 	vldr	d1, [pc, #208]	; 80023b8 <_Z20get_biquad_for_level20tone_intensity_level+0x140>
 80022e8:	ed9f 0b35 	vldr	d0, [pc, #212]	; 80023c0 <_Z20get_biquad_for_level20tone_intensity_level+0x148>
 80022ec:	2105      	movs	r1, #5
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7fe fd82 	bl	8000df8 <_ZN6BiquadC1Eiddd>
 80022f4:	60fc      	str	r4, [r7, #12]
		break;
 80022f6:	e054      	b.n	80023a2 <_Z20get_biquad_for_level20tone_intensity_level+0x12a>
	case LOW_WEAK:
		biquad = new Biquad(bq_type_lowshelf, .0208, 1, -3.0);
 80022f8:	2078      	movs	r0, #120	; 0x78
 80022fa:	f006 f8b1 	bl	8008460 <_Znwj>
 80022fe:	4603      	mov	r3, r0
 8002300:	461c      	mov	r4, r3
 8002302:	ed9f 2b33 	vldr	d2, [pc, #204]	; 80023d0 <_Z20get_biquad_for_level20tone_intensity_level+0x158>
 8002306:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80023b8 <_Z20get_biquad_for_level20tone_intensity_level+0x140>
 800230a:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 80023c0 <_Z20get_biquad_for_level20tone_intensity_level+0x148>
 800230e:	2105      	movs	r1, #5
 8002310:	4620      	mov	r0, r4
 8002312:	f7fe fd71 	bl	8000df8 <_ZN6BiquadC1Eiddd>
 8002316:	60fc      	str	r4, [r7, #12]
		break;
 8002318:	e043      	b.n	80023a2 <_Z20get_biquad_for_level20tone_intensity_level+0x12a>
	case NEUTRAL:
		biquad = new Biquad(bq_type_lowshelf, .0208, 1, 0.0);
 800231a:	2078      	movs	r0, #120	; 0x78
 800231c:	f006 f8a0 	bl	8008460 <_Znwj>
 8002320:	4603      	mov	r3, r0
 8002322:	461c      	mov	r4, r3
 8002324:	ed9f 2b2c 	vldr	d2, [pc, #176]	; 80023d8 <_Z20get_biquad_for_level20tone_intensity_level+0x160>
 8002328:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80023b8 <_Z20get_biquad_for_level20tone_intensity_level+0x140>
 800232c:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80023c0 <_Z20get_biquad_for_level20tone_intensity_level+0x148>
 8002330:	2105      	movs	r1, #5
 8002332:	4620      	mov	r0, r4
 8002334:	f7fe fd60 	bl	8000df8 <_ZN6BiquadC1Eiddd>
 8002338:	60fc      	str	r4, [r7, #12]
		break;
 800233a:	e032      	b.n	80023a2 <_Z20get_biquad_for_level20tone_intensity_level+0x12a>
	case HIGH_WEAK:
		//	return new Biquad(bq_type_lowshelf, .021, 1, 3.0);
		biquad = new Biquad(bq_type_lowshelf, .0208, 1, 3.0);
 800233c:	2078      	movs	r0, #120	; 0x78
 800233e:	f006 f88f 	bl	8008460 <_Znwj>
 8002342:	4603      	mov	r3, r0
 8002344:	461c      	mov	r4, r3
 8002346:	ed9f 2b26 	vldr	d2, [pc, #152]	; 80023e0 <_Z20get_biquad_for_level20tone_intensity_level+0x168>
 800234a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80023b8 <_Z20get_biquad_for_level20tone_intensity_level+0x140>
 800234e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80023c0 <_Z20get_biquad_for_level20tone_intensity_level+0x148>
 8002352:	2105      	movs	r1, #5
 8002354:	4620      	mov	r0, r4
 8002356:	f7fe fd4f 	bl	8000df8 <_ZN6BiquadC1Eiddd>
 800235a:	60fc      	str	r4, [r7, #12]
		break;
 800235c:	e021      	b.n	80023a2 <_Z20get_biquad_for_level20tone_intensity_level+0x12a>
	case HIGH_MODERATE:
		biquad = new Biquad(bq_type_lowshelf, .0208, 1, 6.0);
 800235e:	2078      	movs	r0, #120	; 0x78
 8002360:	f006 f87e 	bl	8008460 <_Znwj>
 8002364:	4603      	mov	r3, r0
 8002366:	461c      	mov	r4, r3
 8002368:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 80023e8 <_Z20get_biquad_for_level20tone_intensity_level+0x170>
 800236c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80023b8 <_Z20get_biquad_for_level20tone_intensity_level+0x140>
 8002370:	ed9f 0b13 	vldr	d0, [pc, #76]	; 80023c0 <_Z20get_biquad_for_level20tone_intensity_level+0x148>
 8002374:	2105      	movs	r1, #5
 8002376:	4620      	mov	r0, r4
 8002378:	f7fe fd3e 	bl	8000df8 <_ZN6BiquadC1Eiddd>
 800237c:	60fc      	str	r4, [r7, #12]
		break;
 800237e:	e010      	b.n	80023a2 <_Z20get_biquad_for_level20tone_intensity_level+0x12a>
	case HIGH_STRONG:
		biquad = new Biquad(bq_type_lowshelf, .0208, 1, 9.0);
 8002380:	2078      	movs	r0, #120	; 0x78
 8002382:	f006 f86d 	bl	8008460 <_Znwj>
 8002386:	4603      	mov	r3, r0
 8002388:	461c      	mov	r4, r3
 800238a:	ed9f 2b19 	vldr	d2, [pc, #100]	; 80023f0 <_Z20get_biquad_for_level20tone_intensity_level+0x178>
 800238e:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80023b8 <_Z20get_biquad_for_level20tone_intensity_level+0x140>
 8002392:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80023c0 <_Z20get_biquad_for_level20tone_intensity_level+0x148>
 8002396:	2105      	movs	r1, #5
 8002398:	4620      	mov	r0, r4
 800239a:	f7fe fd2d 	bl	8000df8 <_ZN6BiquadC1Eiddd>
 800239e:	60fc      	str	r4, [r7, #12]
		break;
 80023a0:	bf00      	nop
	}

	return biquad;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	f3af 8000 	nop.w
 80023b0:	00000000 	.word	0x00000000
 80023b4:	c0220000 	.word	0xc0220000
 80023b8:	00000000 	.word	0x00000000
 80023bc:	3ff00000 	.word	0x3ff00000
 80023c0:	5f06f694 	.word	0x5f06f694
 80023c4:	3f954c98 	.word	0x3f954c98
 80023c8:	00000000 	.word	0x00000000
 80023cc:	c0180000 	.word	0xc0180000
 80023d0:	00000000 	.word	0x00000000
 80023d4:	c0080000 	.word	0xc0080000
	...
 80023e4:	40080000 	.word	0x40080000
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40180000 	.word	0x40180000
 80023f0:	00000000 	.word	0x00000000
 80023f4:	40220000 	.word	0x40220000

080023f8 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level>:


void set_dsp_biquad_bass_for_level(tone_intensity_level intensity_level) {
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]

	if (bass_biquad_intensity_level != intensity_level) {
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x78>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	79fa      	ldrb	r2, [r7, #7]
 8002408:	429a      	cmp	r2, r3
 800240a:	d02c      	beq.n	8002466 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x6e>

		bass_biquad_intensity_level = intensity_level;
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x78>)
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	7013      	strb	r3, [r2, #0]

		if (bass_biquad_left != NULL)
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x7c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x38>
			delete bass_biquad_left;
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x7c>)
 800241c:	681c      	ldr	r4, [r3, #0]
 800241e:	2c00      	cmp	r4, #0
 8002420:	d006      	beq.n	8002430 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x38>
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fd10 	bl	8000e48 <_ZN6BiquadD1Ev>
 8002428:	2178      	movs	r1, #120	; 0x78
 800242a:	4620      	mov	r0, r4
 800242c:	f006 f816 	bl	800845c <_ZdlPvj>
		if (bass_biquad_right != NULL)
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x80>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x56>
			delete bass_biquad_right;
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x80>)
 800243a:	681c      	ldr	r4, [r3, #0]
 800243c:	2c00      	cmp	r4, #0
 800243e:	d006      	beq.n	800244e <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x56>
 8002440:	4620      	mov	r0, r4
 8002442:	f7fe fd01 	bl	8000e48 <_ZN6BiquadD1Ev>
 8002446:	2178      	movs	r1, #120	; 0x78
 8002448:	4620      	mov	r0, r4
 800244a:	f006 f807 	bl	800845c <_ZdlPvj>

		bass_biquad_left = bass_biquad_right = get_biquad_for_level(bass_biquad_intensity_level);
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x78>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff10 	bl	8002278 <_Z20get_biquad_for_level20tone_intensity_level>
 8002458:	4603      	mov	r3, r0
 800245a:	4a07      	ldr	r2, [pc, #28]	; (8002478 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x80>)
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x80>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a04      	ldr	r2, [pc, #16]	; (8002474 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level+0x7c>)
 8002464:	6013      	str	r3, [r2, #0]
	}
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop
 8002470:	200002bc 	.word	0x200002bc
 8002474:	200002c0 	.word	0x200002c0
 8002478:	200002c4 	.word	0x200002c4

0800247c <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level>:

void set_dsp_biquad_treble_for_level(tone_intensity_level intensity_level) {
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]

	if (treble_biquad_intensity_level != intensity_level) {
 8002486:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x78>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	429a      	cmp	r2, r3
 800248e:	d02c      	beq.n	80024ea <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x6e>

		treble_biquad_intensity_level = intensity_level;
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x78>)
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	7013      	strb	r3, [r2, #0]

		if (treble_biquad_left != NULL)
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x7c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x38>
			delete treble_biquad_left;
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x7c>)
 80024a0:	681c      	ldr	r4, [r3, #0]
 80024a2:	2c00      	cmp	r4, #0
 80024a4:	d006      	beq.n	80024b4 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x38>
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7fe fcce 	bl	8000e48 <_ZN6BiquadD1Ev>
 80024ac:	2178      	movs	r1, #120	; 0x78
 80024ae:	4620      	mov	r0, r4
 80024b0:	f005 ffd4 	bl	800845c <_ZdlPvj>
		if (treble_biquad_right != NULL)
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x80>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x56>
			delete treble_biquad_right;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x80>)
 80024be:	681c      	ldr	r4, [r3, #0]
 80024c0:	2c00      	cmp	r4, #0
 80024c2:	d006      	beq.n	80024d2 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x56>
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7fe fcbf 	bl	8000e48 <_ZN6BiquadD1Ev>
 80024ca:	2178      	movs	r1, #120	; 0x78
 80024cc:	4620      	mov	r0, r4
 80024ce:	f005 ffc5 	bl	800845c <_ZdlPvj>

		treble_biquad_left = treble_biquad_right = get_biquad_for_level(treble_biquad_intensity_level);;
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x78>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fece 	bl	8002278 <_Z20get_biquad_for_level20tone_intensity_level>
 80024dc:	4603      	mov	r3, r0
 80024de:	4a07      	ldr	r2, [pc, #28]	; (80024fc <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x80>)
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x80>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level+0x7c>)
 80024e8:	6013      	str	r3, [r2, #0]
	}
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200002bd 	.word	0x200002bd
 80024f8:	200002c8 	.word	0x200002c8
 80024fc:	200002cc 	.word	0x200002cc

08002500 <_Z15init_dsp_biquadv>:

	set_dsp_biquad_treble_for_level(get_level(token_levels[token_treble]));
	process_dsp_biquad(treble_biquad_right, src, dest, length);
}

void init_dsp_biquad() {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0

	set_dsp_biquad_bass_for_level(NEUTRAL);
 8002504:	2004      	movs	r0, #4
 8002506:	f7ff ff77 	bl	80023f8 <_Z29set_dsp_biquad_bass_for_level20tone_intensity_level>
	set_dsp_biquad_treble_for_level(NEUTRAL);
 800250a:	2004      	movs	r0, #4
 800250c:	f7ff ffb6 	bl	800247c <_Z31set_dsp_biquad_treble_for_level20tone_intensity_level>
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	0000      	movs	r0, r0
	...

08002518 <_Z24get_dsp_filter_for_level20tone_intensity_level>:
	} else {
		dsp_copy(src, dest, length);
	}
}

Filter* get_dsp_filter_for_level(tone_intensity_level intensity_level) {
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]

	Filter* filter = NULL;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]

	switch (intensity_level) {
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b07      	cmp	r3, #7
 800252a:	f200 8083 	bhi.w	8002634 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x11c>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x1c>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	08002635 	.word	0x08002635
 8002538:	08002555 	.word	0x08002555
 800253c:	08002575 	.word	0x08002575
 8002540:	08002595 	.word	0x08002595
 8002544:	080025b5 	.word	0x080025b5
 8002548:	080025d5 	.word	0x080025d5
 800254c:	080025f5 	.word	0x080025f5
 8002550:	08002615 	.word	0x08002615

	case NONE:
		break;
	case LOW_STRONG:
		filter = new Filter(LPF, 61, 48, -12.0);
 8002554:	2040      	movs	r0, #64	; 0x40
 8002556:	f005 ff83 	bl	8008460 <_Znwj>
 800255a:	4603      	mov	r3, r0
 800255c:	461c      	mov	r4, r3
 800255e:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8002640 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x128>
 8002562:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8002648 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x130>
 8002566:	223d      	movs	r2, #61	; 0x3d
 8002568:	2100      	movs	r1, #0
 800256a:	4620      	mov	r0, r4
 800256c:	f000 fef8 	bl	8003360 <_ZN6FilterC1E10filterTypeidd>
 8002570:	60fc      	str	r4, [r7, #12]
		break;
 8002572:	e05f      	b.n	8002634 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x11c>
	case LOW_MODERATE:
		filter = new Filter(LPF, 61, 48, -9.0);
 8002574:	2040      	movs	r0, #64	; 0x40
 8002576:	f005 ff73 	bl	8008460 <_Znwj>
 800257a:	4603      	mov	r3, r0
 800257c:	461c      	mov	r4, r3
 800257e:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8002650 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x138>
 8002582:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8002648 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x130>
 8002586:	223d      	movs	r2, #61	; 0x3d
 8002588:	2100      	movs	r1, #0
 800258a:	4620      	mov	r0, r4
 800258c:	f000 fee8 	bl	8003360 <_ZN6FilterC1E10filterTypeidd>
 8002590:	60fc      	str	r4, [r7, #12]
		break;
 8002592:	e04f      	b.n	8002634 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x11c>
	case LOW_WEAK:
		filter = new Filter(LPF, 61, 48, -6.0);
 8002594:	2040      	movs	r0, #64	; 0x40
 8002596:	f005 ff63 	bl	8008460 <_Znwj>
 800259a:	4603      	mov	r3, r0
 800259c:	461c      	mov	r4, r3
 800259e:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8002658 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x140>
 80025a2:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8002648 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x130>
 80025a6:	223d      	movs	r2, #61	; 0x3d
 80025a8:	2100      	movs	r1, #0
 80025aa:	4620      	mov	r0, r4
 80025ac:	f000 fed8 	bl	8003360 <_ZN6FilterC1E10filterTypeidd>
 80025b0:	60fc      	str	r4, [r7, #12]
		break;
 80025b2:	e03f      	b.n	8002634 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x11c>
	case NEUTRAL:
		filter = new Filter(LPF, 61, 48, 1.0);
 80025b4:	2040      	movs	r0, #64	; 0x40
 80025b6:	f005 ff53 	bl	8008460 <_Znwj>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461c      	mov	r4, r3
 80025be:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002660 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x148>
 80025c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8002648 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x130>
 80025c6:	223d      	movs	r2, #61	; 0x3d
 80025c8:	2100      	movs	r1, #0
 80025ca:	4620      	mov	r0, r4
 80025cc:	f000 fec8 	bl	8003360 <_ZN6FilterC1E10filterTypeidd>
 80025d0:	60fc      	str	r4, [r7, #12]
		break;
 80025d2:	e02f      	b.n	8002634 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x11c>
	case HIGH_WEAK:
		filter = new Filter(LPF, 61, 48, 6.0);
 80025d4:	2040      	movs	r0, #64	; 0x40
 80025d6:	f005 ff43 	bl	8008460 <_Znwj>
 80025da:	4603      	mov	r3, r0
 80025dc:	461c      	mov	r4, r3
 80025de:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8002668 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x150>
 80025e2:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8002648 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x130>
 80025e6:	223d      	movs	r2, #61	; 0x3d
 80025e8:	2100      	movs	r1, #0
 80025ea:	4620      	mov	r0, r4
 80025ec:	f000 feb8 	bl	8003360 <_ZN6FilterC1E10filterTypeidd>
 80025f0:	60fc      	str	r4, [r7, #12]
		break;
 80025f2:	e01f      	b.n	8002634 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x11c>
	case HIGH_MODERATE:
		filter = new Filter(LPF, 61, 48, 9.0);
 80025f4:	2040      	movs	r0, #64	; 0x40
 80025f6:	f005 ff33 	bl	8008460 <_Znwj>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461c      	mov	r4, r3
 80025fe:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8002670 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x158>
 8002602:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002648 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x130>
 8002606:	223d      	movs	r2, #61	; 0x3d
 8002608:	2100      	movs	r1, #0
 800260a:	4620      	mov	r0, r4
 800260c:	f000 fea8 	bl	8003360 <_ZN6FilterC1E10filterTypeidd>
 8002610:	60fc      	str	r4, [r7, #12]
		break;
 8002612:	e00f      	b.n	8002634 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x11c>
	case HIGH_STRONG:
		filter = new Filter(LPF, 61, 48, 12.0);
 8002614:	2040      	movs	r0, #64	; 0x40
 8002616:	f005 ff23 	bl	8008460 <_Znwj>
 800261a:	4603      	mov	r3, r0
 800261c:	461c      	mov	r4, r3
 800261e:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002678 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x160>
 8002622:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8002648 <_Z24get_dsp_filter_for_level20tone_intensity_level+0x130>
 8002626:	223d      	movs	r2, #61	; 0x3d
 8002628:	2100      	movs	r1, #0
 800262a:	4620      	mov	r0, r4
 800262c:	f000 fe98 	bl	8003360 <_ZN6FilterC1E10filterTypeidd>
 8002630:	60fc      	str	r4, [r7, #12]
		break;
 8002632:	bf00      	nop
	}

	return filter;
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bd90      	pop	{r4, r7, pc}
 800263e:	bf00      	nop
 8002640:	00000000 	.word	0x00000000
 8002644:	c0280000 	.word	0xc0280000
 8002648:	00000000 	.word	0x00000000
 800264c:	40480000 	.word	0x40480000
 8002650:	00000000 	.word	0x00000000
 8002654:	c0220000 	.word	0xc0220000
 8002658:	00000000 	.word	0x00000000
 800265c:	c0180000 	.word	0xc0180000
 8002660:	00000000 	.word	0x00000000
 8002664:	3ff00000 	.word	0x3ff00000
 8002668:	00000000 	.word	0x00000000
 800266c:	40180000 	.word	0x40180000
 8002670:	00000000 	.word	0x00000000
 8002674:	40220000 	.word	0x40220000
 8002678:	00000000 	.word	0x00000000
 800267c:	40280000 	.word	0x40280000

08002680 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level>:

void set_dsp_filter_bass_for_level(tone_intensity_level intensity_level) {
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]

	if (bass_filter_intensity_level != intensity_level) {
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x78>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	79fa      	ldrb	r2, [r7, #7]
 8002690:	429a      	cmp	r2, r3
 8002692:	d02c      	beq.n	80026ee <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x6e>

		bass_filter_intensity_level = intensity_level;
 8002694:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x78>)
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	7013      	strb	r3, [r2, #0]

		if (bass_filter_left != NULL)
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x7c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x38>
			delete bass_filter_left;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x7c>)
 80026a4:	681c      	ldr	r4, [r3, #0]
 80026a6:	2c00      	cmp	r4, #0
 80026a8:	d006      	beq.n	80026b8 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x38>
 80026aa:	4620      	mov	r0, r4
 80026ac:	f000 ff1c 	bl	80034e8 <_ZN6FilterD1Ev>
 80026b0:	2140      	movs	r1, #64	; 0x40
 80026b2:	4620      	mov	r0, r4
 80026b4:	f005 fed2 	bl	800845c <_ZdlPvj>
		if (bass_filter_right != NULL)
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x80>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x56>
			delete bass_filter_right;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x80>)
 80026c2:	681c      	ldr	r4, [r3, #0]
 80026c4:	2c00      	cmp	r4, #0
 80026c6:	d006      	beq.n	80026d6 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x56>
 80026c8:	4620      	mov	r0, r4
 80026ca:	f000 ff0d 	bl	80034e8 <_ZN6FilterD1Ev>
 80026ce:	2140      	movs	r1, #64	; 0x40
 80026d0:	4620      	mov	r0, r4
 80026d2:	f005 fec3 	bl	800845c <_ZdlPvj>
		bass_filter_left = bass_filter_right = get_dsp_filter_for_level(bass_filter_intensity_level);
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x78>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff1c 	bl	8002518 <_Z24get_dsp_filter_for_level20tone_intensity_level>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x80>)
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x80>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <_Z29set_dsp_filter_bass_for_level20tone_intensity_level+0x7c>)
 80026ec:	6013      	str	r3, [r2, #0]
	}
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200002d0 	.word	0x200002d0
 80026fc:	200002d4 	.word	0x200002d4
 8002700:	200002d8 	.word	0x200002d8

08002704 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level>:

void set_dsp_filter_treble_for_level(tone_intensity_level intensity_level) {
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]

	if (treble_filter_intensity_level != intensity_level) {
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x78>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	79fa      	ldrb	r2, [r7, #7]
 8002714:	429a      	cmp	r2, r3
 8002716:	d02c      	beq.n	8002772 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x6e>

		treble_filter_intensity_level = intensity_level;
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x78>)
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	7013      	strb	r3, [r2, #0]

		if (treble_filter_left != NULL)
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x7c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x38>
			delete treble_filter_left;
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x7c>)
 8002728:	681c      	ldr	r4, [r3, #0]
 800272a:	2c00      	cmp	r4, #0
 800272c:	d006      	beq.n	800273c <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x38>
 800272e:	4620      	mov	r0, r4
 8002730:	f000 feda 	bl	80034e8 <_ZN6FilterD1Ev>
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	4620      	mov	r0, r4
 8002738:	f005 fe90 	bl	800845c <_ZdlPvj>
		if (treble_filter_right != NULL)
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x80>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x56>
			delete treble_filter_right;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x80>)
 8002746:	681c      	ldr	r4, [r3, #0]
 8002748:	2c00      	cmp	r4, #0
 800274a:	d006      	beq.n	800275a <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x56>
 800274c:	4620      	mov	r0, r4
 800274e:	f000 fecb 	bl	80034e8 <_ZN6FilterD1Ev>
 8002752:	2140      	movs	r1, #64	; 0x40
 8002754:	4620      	mov	r0, r4
 8002756:	f005 fe81 	bl	800845c <_ZdlPvj>
		treble_filter_left = treble_filter_right = get_dsp_filter_for_level(treble_filter_intensity_level);
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x78>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff feda 	bl	8002518 <_Z24get_dsp_filter_for_level20tone_intensity_level>
 8002764:	4603      	mov	r3, r0
 8002766:	4a07      	ldr	r2, [pc, #28]	; (8002784 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x80>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x80>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level+0x7c>)
 8002770:	6013      	str	r3, [r2, #0]
	}
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	bf00      	nop
 800277c:	200002d1 	.word	0x200002d1
 8002780:	200002dc 	.word	0x200002dc
 8002784:	200002e0 	.word	0x200002e0

08002788 <_Z15init_dsp_filterv>:

	set_dsp_filter_bass_for_level(get_level(token_levels[token_treble]));
	process_dsp_filter(treble_filter_right, src, dest, length);
}

void init_dsp_filter() {
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0

	set_dsp_filter_bass_for_level(NEUTRAL);
 800278c:	2004      	movs	r0, #4
 800278e:	f7ff ff77 	bl	8002680 <_Z29set_dsp_filter_bass_for_level20tone_intensity_level>
	set_dsp_filter_treble_for_level(NEUTRAL);
 8002792:	2004      	movs	r0, #4
 8002794:	f7ff ffb6 	bl	8002704 <_Z31set_dsp_filter_treble_for_level20tone_intensity_level>
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <_Z12init_dsp_firv>:
void process_dsp_fir_treble_right(float32_t src[], float32_t dest[], int length) {

	process_dsp_fir_treble_right(src, dest, get_level(token_levels[token_treble]));
}

void init_dsp_fir() {
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0

	init_dsp_fir_bass();
 80027a0:	f000 f804 	bl	80027ac <_Z17init_dsp_fir_bassv>
	init_dsp_fir_treble();
 80027a4:	f000 f820 	bl	80027e8 <_Z19init_dsp_fir_treblev>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_Z17init_dsp_fir_bassv>:
arm_fir_instance_f32 arm_inst_bass_right;

float32_t bass_stateLeft[SAMPLES_SRC_DEST + COEFFS_FIR_BASS_TAPS_NUM - 1];
float32_t bass_stateRight[SAMPLES_SRC_DEST + COEFFS_FIR_BASS_TAPS_NUM - 1];

void init_dsp_fir_bass() {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af02      	add	r7, sp, #8

	  arm_fir_init_f32(
 80027b2:	2364      	movs	r3, #100	; 0x64
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <_Z17init_dsp_fir_bassv+0x2c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	213c      	movs	r1, #60	; 0x3c
 80027bc:	4807      	ldr	r0, [pc, #28]	; (80027dc <_Z17init_dsp_fir_bassv+0x30>)
 80027be:	f005 fd4b 	bl	8008258 <arm_fir_init_f32>
			  0,
			  &bass_stateLeft[0],
			  SAMPLES_SRC_DEST
	  );

	  arm_fir_init_f32(
 80027c2:	2364      	movs	r3, #100	; 0x64
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <_Z17init_dsp_fir_bassv+0x34>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	213c      	movs	r1, #60	; 0x3c
 80027cc:	4805      	ldr	r0, [pc, #20]	; (80027e4 <_Z17init_dsp_fir_bassv+0x38>)
 80027ce:	f005 fd43 	bl	8008258 <arm_fir_init_f32>
			  COEFFS_FIR_BASS_TAPS_NUM,
			  0,
			  &bass_stateRight[0],
			  SAMPLES_SRC_DEST
	  );
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200002fc 	.word	0x200002fc
 80027dc:	200002e4 	.word	0x200002e4
 80027e0:	20000578 	.word	0x20000578
 80027e4:	200002f0 	.word	0x200002f0

080027e8 <_Z19init_dsp_fir_treblev>:
arm_fir_instance_f32 arm_inst_treble_right;

float32_t treble_stateLeft[SAMPLES_SRC_DEST + COEFFS_FIR_TREBLE_TAPS_NUM - 1];
float32_t treble_stateRight[SAMPLES_SRC_DEST + COEFFS_FIR_TREBLE_TAPS_NUM - 1];

void init_dsp_fir_treble() {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af02      	add	r7, sp, #8

	  arm_fir_init_f32(
 80027ee:	2364      	movs	r3, #100	; 0x64
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <_Z19init_dsp_fir_treblev+0x2c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	213c      	movs	r1, #60	; 0x3c
 80027f8:	4807      	ldr	r0, [pc, #28]	; (8002818 <_Z19init_dsp_fir_treblev+0x30>)
 80027fa:	f005 fd2d 	bl	8008258 <arm_fir_init_f32>
			  0,
			  &treble_stateLeft[0],
			  SAMPLES_SRC_DEST
	  );

	  arm_fir_init_f32(
 80027fe:	2364      	movs	r3, #100	; 0x64
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <_Z19init_dsp_fir_treblev+0x34>)
 8002804:	2200      	movs	r2, #0
 8002806:	213c      	movs	r1, #60	; 0x3c
 8002808:	4805      	ldr	r0, [pc, #20]	; (8002820 <_Z19init_dsp_fir_treblev+0x38>)
 800280a:	f005 fd25 	bl	8008258 <arm_fir_init_f32>
			  COEFFS_FIR_TREBLE_TAPS_NUM,
			  0,
			  &treble_stateRight[0],
			  SAMPLES_SRC_DEST
	  );
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	2000080c 	.word	0x2000080c
 8002818:	200007f4 	.word	0x200007f4
 800281c:	20000a88 	.word	0x20000a88
 8002820:	20000800 	.word	0x20000800

08002824 <_Z32process_dsp_iir_biquad_bass_leftPfS_i>:
#include <dsp_iir_biquad_bass.h>
#include <dsp_iir_biquad_treble.h>
#include <dsp_token.h>
#include <dsp_util.h>

void process_dsp_iir_biquad_bass_left(float32_t src[], float32_t dest[], int length) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]

	process_dsp_iir_biquad_left_bass(src, dest, get_level(token_levels[token_bass]));
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <_Z32process_dsp_iir_biquad_bass_leftPfS_i+0x2c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	f001 fe91 	bl	800455c <_Z9get_leveli>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f8b7 	bl	80029b4 <_Z32process_dsp_iir_biquad_left_bassPfS_20tone_intensity_level>
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000d74 	.word	0x20000d74

08002854 <_Z33process_dsp_iir_biquad_bass_rightPfS_i>:

void process_dsp_iir_biquad_bass_right(float32_t src[], float32_t dest[], int length) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]

	process_dsp_iir_biquad_right_bass(src, dest, get_level(token_levels[token_bass]));
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <_Z33process_dsp_iir_biquad_bass_rightPfS_i+0x2c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	f001 fe79 	bl	800455c <_Z9get_leveli>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f8c3 	bl	80029fc <_Z33process_dsp_iir_biquad_right_bassPfS_20tone_intensity_level>
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000d74 	.word	0x20000d74

08002884 <_Z34process_dsp_iir_biquad_treble_leftPfS_i>:

void process_dsp_iir_biquad_treble_left(float32_t src[], float32_t dest[], int length) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]

	process_dsp_iir_biquad_left_treble(src, dest, get_level(token_levels[token_treble]));
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <_Z34process_dsp_iir_biquad_treble_leftPfS_i+0x2c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4618      	mov	r0, r3
 8002896:	f001 fe61 	bl	800455c <_Z9get_leveli>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f92f 	bl	8002b04 <_Z34process_dsp_iir_biquad_left_treblePfS_20tone_intensity_level>
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000d74 	.word	0x20000d74

080028b4 <_Z35process_dsp_iir_biquad_treble_rightPfS_i>:

void process_dsp_iir_biquad_treble_right(float32_t src[], float32_t dest[], int length) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]

	process_dsp_iir_biquad_right_treble(src, dest, get_level(token_levels[token_treble]));
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <_Z35process_dsp_iir_biquad_treble_rightPfS_i+0x2c>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 fe49 	bl	800455c <_Z9get_leveli>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f93b 	bl	8002b4c <_Z35process_dsp_iir_biquad_right_treblePfS_20tone_intensity_level>
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000d74 	.word	0x20000d74

080028e4 <_Z19init_dsp_iir_biquadv>:

void init_dsp_iir_biquad() {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0

	init_dsp_iir_biquad_bass();
 80028e8:	f000 f804 	bl	80028f4 <_Z24init_dsp_iir_biquad_bassv>
	init_dsp_iir_biquad_treble();
 80028ec:	f000 f8aa 	bl	8002a44 <_Z26init_dsp_iir_biquad_treblev>
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_Z24init_dsp_iir_biquad_bassv>:
arm_biquad_cascade_df2T_instance_f32 arm_inst_iir_biquad_bass_right;

float32_t iir_biquad_bass_stateLeft[COEFFS_IIR_BIQUAD_ORDER];
float32_t  iir_biquad_bass_stateRight[COEFFS_IIR_BIQUAD_ORDER];

void init_dsp_iir_biquad_bass() {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0

	arm_biquad_cascade_df2T_init_f32(
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <_Z24init_dsp_iir_biquad_bassv+0x20>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	2102      	movs	r1, #2
 80028fe:	4806      	ldr	r0, [pc, #24]	; (8002918 <_Z24init_dsp_iir_biquad_bassv+0x24>)
 8002900:	f005 fcbc 	bl	800827c <arm_biquad_cascade_df2T_init_f32>
			  COEFFS_IIR_BIQUAD_NUMSTAGES,
			  0,
			  &iir_biquad_bass_stateLeft[0]
	  );

	arm_biquad_cascade_df2T_init_f32(
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <_Z24init_dsp_iir_biquad_bassv+0x28>)
 8002906:	2200      	movs	r2, #0
 8002908:	2102      	movs	r1, #2
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <_Z24init_dsp_iir_biquad_bassv+0x2c>)
 800290c:	f005 fcb6 	bl	800827c <arm_biquad_cascade_df2T_init_f32>
			  &arm_inst_iir_biquad_bass_right,
			  COEFFS_IIR_BIQUAD_NUMSTAGES,
			  0,
			  &iir_biquad_bass_stateRight[0]
	  );
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000d1c 	.word	0x20000d1c
 8002918:	20000d04 	.word	0x20000d04
 800291c:	20000d2c 	.word	0x20000d2c
 8002920:	20000d10 	.word	0x20000d10

08002924 <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level>:

float32_t * get_dsp_iir_biquad_bass_coeffs_for_level(tone_intensity_level intensity_level) {
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]

	float32_t * coeffs = NULL;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]

	switch (intensity_level) {
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	2b07      	cmp	r3, #7
 8002936:	d828      	bhi.n	800298a <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x66>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x1c>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	0800298b 	.word	0x0800298b
 8002944:	08002961 	.word	0x08002961
 8002948:	08002967 	.word	0x08002967
 800294c:	0800296d 	.word	0x0800296d
 8002950:	08002973 	.word	0x08002973
 8002954:	08002979 	.word	0x08002979
 8002958:	0800297f 	.word	0x0800297f
 800295c:	08002985 	.word	0x08002985

	case NONE:
		break;
	case LOW_STRONG:
		coeffs = coeffs_iir_biquad_bass_low_strong;
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x74>)
 8002962:	60fb      	str	r3, [r7, #12]
		break;
 8002964:	e011      	b.n	800298a <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x66>
	case LOW_MODERATE:
		coeffs = coeffs_iir_biquad_bass_low_moderate;
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x78>)
 8002968:	60fb      	str	r3, [r7, #12]
		break;
 800296a:	e00e      	b.n	800298a <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x66>
	case LOW_WEAK:
		coeffs = coeffs_iir_biquad_bass_low_weak;
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x7c>)
 800296e:	60fb      	str	r3, [r7, #12]
		break;
 8002970:	e00b      	b.n	800298a <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x66>
	case NEUTRAL:
		coeffs = coeffs_iir_biquad_bass_neutral;
 8002972:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x80>)
 8002974:	60fb      	str	r3, [r7, #12]
		break;
 8002976:	e008      	b.n	800298a <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x66>
	case HIGH_WEAK:
		coeffs = coeffs_iir_biquad_bass_high_weak;
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x84>)
 800297a:	60fb      	str	r3, [r7, #12]
		break;
 800297c:	e005      	b.n	800298a <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x66>
	case HIGH_MODERATE:
		coeffs = coeffs_iir_biquad_bass_high_moderate;
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x88>)
 8002980:	60fb      	str	r3, [r7, #12]
		break;
 8002982:	e002      	b.n	800298a <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x66>
	case HIGH_STRONG:
		coeffs = coeffs_iir_biquad_bass_high_strong;
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level+0x8c>)
 8002986:	60fb      	str	r3, [r7, #12]
		break;
 8002988:	bf00      	nop
	}

	return coeffs;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	20000050 	.word	0x20000050
 800299c:	20000028 	.word	0x20000028
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000078 	.word	0x20000078
 80029a8:	200000a0 	.word	0x200000a0
 80029ac:	200000c8 	.word	0x200000c8
 80029b0:	200000f0 	.word	0x200000f0

080029b4 <_Z32process_dsp_iir_biquad_left_bassPfS_20tone_intensity_level>:

void process_dsp_iir_biquad_left_bass(float32_t srcLeft[], float32_t destLeft[], tone_intensity_level level) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	71fb      	strb	r3, [r7, #7]

	if (level != NEUTRAL) {
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d00d      	beq.n	80029e4 <_Z32process_dsp_iir_biquad_left_bassPfS_20tone_intensity_level+0x30>
		arm_inst_iir_biquad_bass_left.pCoeffs = get_dsp_iir_biquad_bass_coeffs_for_level(level);
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ffaa 	bl	8002924 <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <_Z32process_dsp_iir_biquad_left_bassPfS_20tone_intensity_level+0x44>)
 80029d4:	6093      	str	r3, [r2, #8]
		arm_biquad_cascade_df2T_f32	(
 80029d6:	2364      	movs	r3, #100	; 0x64
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	68f9      	ldr	r1, [r7, #12]
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <_Z32process_dsp_iir_biquad_left_bassPfS_20tone_intensity_level+0x44>)
 80029de:	f005 fc5b 	bl	8008298 <arm_biquad_cascade_df2T_f32>
				SAMPLES_SRC_DEST
		);
	} else {
		dsp_copy(srcLeft, destLeft, SAMPLES_SRC_DEST);
	}
}
 80029e2:	e004      	b.n	80029ee <_Z32process_dsp_iir_biquad_left_bassPfS_20tone_intensity_level+0x3a>
		dsp_copy(srcLeft, destLeft, SAMPLES_SRC_DEST);
 80029e4:	2264      	movs	r2, #100	; 0x64
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fca7 	bl	800333c <_Z8dsp_copyPfS_i>
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000d04 	.word	0x20000d04

080029fc <_Z33process_dsp_iir_biquad_right_bassPfS_20tone_intensity_level>:

void process_dsp_iir_biquad_right_bass(float32_t srcRight[], float32_t destRight[], tone_intensity_level level) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	71fb      	strb	r3, [r7, #7]

	if (level != NEUTRAL) {
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d00d      	beq.n	8002a2c <_Z33process_dsp_iir_biquad_right_bassPfS_20tone_intensity_level+0x30>
		arm_inst_iir_biquad_bass_right.pCoeffs = get_dsp_iir_biquad_bass_coeffs_for_level(level);
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff86 	bl	8002924 <_Z40get_dsp_iir_biquad_bass_coeffs_for_level20tone_intensity_level>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <_Z33process_dsp_iir_biquad_right_bassPfS_20tone_intensity_level+0x44>)
 8002a1c:	6093      	str	r3, [r2, #8]
		arm_biquad_cascade_df2T_f32	(
 8002a1e:	2364      	movs	r3, #100	; 0x64
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	4806      	ldr	r0, [pc, #24]	; (8002a40 <_Z33process_dsp_iir_biquad_right_bassPfS_20tone_intensity_level+0x44>)
 8002a26:	f005 fc37 	bl	8008298 <arm_biquad_cascade_df2T_f32>
				SAMPLES_SRC_DEST
		);
	} else {
		dsp_copy(srcRight, destRight, SAMPLES_SRC_DEST);
	}
}
 8002a2a:	e004      	b.n	8002a36 <_Z33process_dsp_iir_biquad_right_bassPfS_20tone_intensity_level+0x3a>
		dsp_copy(srcRight, destRight, SAMPLES_SRC_DEST);
 8002a2c:	2264      	movs	r2, #100	; 0x64
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fc83 	bl	800333c <_Z8dsp_copyPfS_i>
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000d10 	.word	0x20000d10

08002a44 <_Z26init_dsp_iir_biquad_treblev>:
arm_biquad_cascade_df2T_instance_f32 arm_inst_iir_biquad_treble_right;

float32_t iir_biquad_treble_stateLeft[COEFFS_IIR_BIQUAD_ORDER];
float32_t  iir_biquad_treble_stateRight[COEFFS_IIR_BIQUAD_ORDER];

void init_dsp_iir_biquad_treble() {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0

	arm_biquad_cascade_df2T_init_f32(
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <_Z26init_dsp_iir_biquad_treblev+0x20>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <_Z26init_dsp_iir_biquad_treblev+0x24>)
 8002a50:	f005 fc14 	bl	800827c <arm_biquad_cascade_df2T_init_f32>
			  COEFFS_IIR_BIQUAD_NUMSTAGES,
			  0,
			  &iir_biquad_treble_stateLeft[0]
	  );

	arm_biquad_cascade_df2T_init_f32(
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <_Z26init_dsp_iir_biquad_treblev+0x28>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <_Z26init_dsp_iir_biquad_treblev+0x2c>)
 8002a5c:	f005 fc0e 	bl	800827c <arm_biquad_cascade_df2T_init_f32>
			  &arm_inst_iir_biquad_treble_right,
			  COEFFS_IIR_BIQUAD_NUMSTAGES,
			  0,
			  &iir_biquad_treble_stateRight[0]
	  );
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000d54 	.word	0x20000d54
 8002a68:	20000d3c 	.word	0x20000d3c
 8002a6c:	20000d64 	.word	0x20000d64
 8002a70:	20000d48 	.word	0x20000d48

08002a74 <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level>:

float32_t * get_dsp_iir_biquad_treble_coeffs_for_level(tone_intensity_level intensity_level) {
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]

	float32_t * coeffs = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]

	switch (intensity_level) {
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	2b07      	cmp	r3, #7
 8002a86:	d828      	bhi.n	8002ada <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x66>
 8002a88:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x1c>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002adb 	.word	0x08002adb
 8002a94:	08002ab1 	.word	0x08002ab1
 8002a98:	08002ab7 	.word	0x08002ab7
 8002a9c:	08002abd 	.word	0x08002abd
 8002aa0:	08002ac3 	.word	0x08002ac3
 8002aa4:	08002ac9 	.word	0x08002ac9
 8002aa8:	08002acf 	.word	0x08002acf
 8002aac:	08002ad5 	.word	0x08002ad5

	case NONE:
		break;
	case LOW_STRONG:
		coeffs = coeffs_iir_biquad_treble_low_strong;
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x74>)
 8002ab2:	60fb      	str	r3, [r7, #12]
		break;
 8002ab4:	e011      	b.n	8002ada <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x66>
	case LOW_MODERATE:
		coeffs = coeffs_iir_biquad_treble_low_moderate;
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x78>)
 8002ab8:	60fb      	str	r3, [r7, #12]
		break;
 8002aba:	e00e      	b.n	8002ada <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x66>
	case LOW_WEAK:
		coeffs = coeffs_iir_biquad_treble_low_weak;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x7c>)
 8002abe:	60fb      	str	r3, [r7, #12]
		break;
 8002ac0:	e00b      	b.n	8002ada <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x66>
	case NEUTRAL:
		coeffs = coeffs_iir_biquad_treble_neutral;
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x80>)
 8002ac4:	60fb      	str	r3, [r7, #12]
		break;
 8002ac6:	e008      	b.n	8002ada <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x66>
	case HIGH_WEAK:
		coeffs = coeffs_iir_biquad_treble_high_weak;
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x84>)
 8002aca:	60fb      	str	r3, [r7, #12]
		break;
 8002acc:	e005      	b.n	8002ada <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x66>
	case HIGH_MODERATE:
		coeffs = coeffs_iir_biquad_treble_high_moderate;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x88>)
 8002ad0:	60fb      	str	r3, [r7, #12]
		break;
 8002ad2:	e002      	b.n	8002ada <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x66>
	case HIGH_STRONG:
		coeffs = coeffs_iir_biquad_treble_high_strong;
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level+0x8c>)
 8002ad6:	60fb      	str	r3, [r7, #12]
		break;
 8002ad8:	bf00      	nop
	}

	return coeffs;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	20000168 	.word	0x20000168
 8002aec:	20000140 	.word	0x20000140
 8002af0:	20000118 	.word	0x20000118
 8002af4:	20000190 	.word	0x20000190
 8002af8:	200001b8 	.word	0x200001b8
 8002afc:	200001e0 	.word	0x200001e0
 8002b00:	20000208 	.word	0x20000208

08002b04 <_Z34process_dsp_iir_biquad_left_treblePfS_20tone_intensity_level>:
void process_dsp_iir_biquad_left_treble(float32_t srcLeft[], float32_t destLeft[], tone_intensity_level level) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	71fb      	strb	r3, [r7, #7]

	if (level != NEUTRAL) {
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d00d      	beq.n	8002b34 <_Z34process_dsp_iir_biquad_left_treblePfS_20tone_intensity_level+0x30>
		arm_inst_iir_biquad_treble_left.pCoeffs = get_dsp_iir_biquad_treble_coeffs_for_level(level);
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ffaa 	bl	8002a74 <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <_Z34process_dsp_iir_biquad_left_treblePfS_20tone_intensity_level+0x44>)
 8002b24:	6093      	str	r3, [r2, #8]
		arm_biquad_cascade_df2T_f32	(
 8002b26:	2364      	movs	r3, #100	; 0x64
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	4806      	ldr	r0, [pc, #24]	; (8002b48 <_Z34process_dsp_iir_biquad_left_treblePfS_20tone_intensity_level+0x44>)
 8002b2e:	f005 fbb3 	bl	8008298 <arm_biquad_cascade_df2T_f32>
				SAMPLES_SRC_DEST
		);
	} else {
		dsp_copy(srcLeft, destLeft, SAMPLES_SRC_DEST);
	}
}
 8002b32:	e004      	b.n	8002b3e <_Z34process_dsp_iir_biquad_left_treblePfS_20tone_intensity_level+0x3a>
		dsp_copy(srcLeft, destLeft, SAMPLES_SRC_DEST);
 8002b34:	2264      	movs	r2, #100	; 0x64
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fbff 	bl	800333c <_Z8dsp_copyPfS_i>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000d3c 	.word	0x20000d3c

08002b4c <_Z35process_dsp_iir_biquad_right_treblePfS_20tone_intensity_level>:

void process_dsp_iir_biquad_right_treble(float32_t srcRight[], float32_t destRight[], tone_intensity_level level) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	71fb      	strb	r3, [r7, #7]

	if (level != NEUTRAL) {
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d00d      	beq.n	8002b7c <_Z35process_dsp_iir_biquad_right_treblePfS_20tone_intensity_level+0x30>
		arm_inst_iir_biquad_treble_right.pCoeffs = get_dsp_iir_biquad_treble_coeffs_for_level(level);
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff86 	bl	8002a74 <_Z42get_dsp_iir_biquad_treble_coeffs_for_level20tone_intensity_level>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <_Z35process_dsp_iir_biquad_right_treblePfS_20tone_intensity_level+0x44>)
 8002b6c:	6093      	str	r3, [r2, #8]
		arm_biquad_cascade_df2T_f32	(
 8002b6e:	2364      	movs	r3, #100	; 0x64
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	4806      	ldr	r0, [pc, #24]	; (8002b90 <_Z35process_dsp_iir_biquad_right_treblePfS_20tone_intensity_level+0x44>)
 8002b76:	f005 fb8f 	bl	8008298 <arm_biquad_cascade_df2T_f32>
				SAMPLES_SRC_DEST
		);
	} else {
		dsp_copy(srcRight, destRight, SAMPLES_SRC_DEST);
	}
}
 8002b7a:	e004      	b.n	8002b86 <_Z35process_dsp_iir_biquad_right_treblePfS_20tone_intensity_level+0x3a>
		dsp_copy(srcRight, destRight, SAMPLES_SRC_DEST);
 8002b7c:	2264      	movs	r2, #100	; 0x64
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fbdb 	bl	800333c <_Z8dsp_copyPfS_i>
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000d48 	.word	0x20000d48

08002b94 <_Z8init_dspv>:
#include <dsp_iir_biquad.h>
#include <dsp_biquad.h>
#include "string.h"
#include "math.h"

void init_dsp() {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0

	init_dsp_filter();
 8002b98:	f7ff fdf6 	bl	8002788 <_Z15init_dsp_filterv>
	init_dsp_biquad();
 8002b9c:	f7ff fcb0 	bl	8002500 <_Z15init_dsp_biquadv>
	init_dsp_fir();
 8002ba0:	f7ff fdfc 	bl	800279c <_Z12init_dsp_firv>
	init_dsp_iir_biquad();
 8002ba4:	f7ff fe9e 	bl	80028e4 <_Z19init_dsp_iir_biquadv>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_Z17process_dsp_clearPfi>:

void process_dsp_clear(float32_t dest[], int length) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]

	memset(dest, -1, length*sizeof(float32_t));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f007 fe4f 	bl	800a864 <memset>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <_Z23process_dsp_with_factorPfS_if>:

void process_dsp_with_factor(float32_t src[], float32_t dest[], int length, float factor) {
 8002bce:	b480      	push	{r7}
 8002bd0:	b089      	sub	sp, #36	; 0x24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	ed87 0a00 	vstr	s0, [r7]

	float32_t srcval, dstval;

	for ( int i = 0 ; i < length ; i++ )
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	da17      	bge.n	8002c1a <_Z23process_dsp_with_factorPfS_if+0x4c>
	{
		srcval = src[i]; // unsigned int and float does not work
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61bb      	str	r3, [r7, #24]
		dstval = srcval * factor;
 8002bf6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bfa:	edd7 7a00 	vldr	s15, [r7]
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	edc7 7a05 	vstr	s15, [r7, #20]
		dest[i] = dstval;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	601a      	str	r2, [r3, #0]
	for ( int i = 0 ; i < length ; i++ )
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	e7e3      	b.n	8002be2 <_Z23process_dsp_with_factorPfS_if+0x14>
	}
}
 8002c1a:	bf00      	nop
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <_Z24process_dsp_balance_leftPfS_i>:

//
// PROCESS BALANCE FILTERING
//

void process_dsp_balance_left(float32_t src[], float32_t dest[], int length) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]

	float32_t balance_factor = 1;
 8002c34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c38:	617b      	str	r3, [r7, #20]
	if (token_levels[token_balance] > 0) {
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <_Z24process_dsp_balance_leftPfS_i+0x50>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	dd0f      	ble.n	8002c62 <_Z24process_dsp_balance_leftPfS_i+0x3a>
		balance_factor = 1 - (float)token_levels[token_balance] / token_balance_max;
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <_Z24process_dsp_balance_leftPfS_i+0x50>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002c7c <_Z24process_dsp_balance_leftPfS_i+0x54>
 8002c52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c5e:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	process_dsp_with_factor(src, dest, length, balance_factor);
 8002c62:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff ffaf 	bl	8002bce <_Z23process_dsp_with_factorPfS_if>
}
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000d74 	.word	0x20000d74
 8002c7c:	42480000 	.word	0x42480000

08002c80 <_Z25process_dsp_balance_rightPfS_i>:

void process_dsp_balance_right(float32_t src[], float32_t dest[], int length) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]

	float32_t balance_factor = 1;
 8002c8c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c90:	617b      	str	r3, [r7, #20]
	if (token_levels[token_balance] < 0) {
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <_Z25process_dsp_balance_rightPfS_i+0x50>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da0f      	bge.n	8002cba <_Z25process_dsp_balance_rightPfS_i+0x3a>
		balance_factor = 1 - (float)token_levels[token_balance] / token_balance_min;
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <_Z25process_dsp_balance_rightPfS_i+0x50>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002cd4 <_Z25process_dsp_balance_rightPfS_i+0x54>
 8002caa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cb6:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	process_dsp_with_factor(src, dest, length, balance_factor);
 8002cba:	ed97 0a05 	vldr	s0, [r7, #20]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f7ff ff83 	bl	8002bce <_Z23process_dsp_with_factorPfS_if>
}
 8002cc8:	bf00      	nop
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000d74 	.word	0x20000d74
 8002cd4:	42480000 	.word	0x42480000

08002cd8 <_Z18process_dsp_volumePfS_i>:

//
// PROCESS VOLUME FILTERING
//

void process_dsp_volume(float32_t src[], float32_t dest[], int length) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]

	float32_t vol_factor = (float32_t)token_levels[token_volume] / token_volume_max;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <_Z18process_dsp_volumePfS_i+0x3c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002d18 <_Z18process_dsp_volumePfS_i+0x40>
 8002cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cf8:	edc7 7a05 	vstr	s15, [r7, #20]

	process_dsp_with_factor(src, dest, length, vol_factor);
 8002cfc:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff ff62 	bl	8002bce <_Z23process_dsp_with_factorPfS_if>
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000d74 	.word	0x20000d74
 8002d18:	42c80000 	.word	0x42c80000

08002d1c <_Z16process_dsp_leftPfS_i>:

//
// PROCESS DSP TONE CONTROL
//

void process_dsp_left(float32_t srcLeft[], float32_t destLeft[], int length) {
 8002d1c:	b5b0      	push	{r4, r5, r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
		process_dsp_iir_biquad_treble_left(wrkBuf, wrkBuf2, length);
		process_dsp_balance_left(wrkBuf2, wrkBuf, length);
		process_dsp_volume(wrkBuf, destLeft, length);
	} else {
		process_dsp_clear(destLeft, length);
	}
 8002d28:	466b      	mov	r3, sp
 8002d2a:	461d      	mov	r5, r3
	float32_t wrkBuf[length];
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	1e5c      	subs	r4, r3, #1
 8002d30:	61fc      	str	r4, [r7, #28]
 8002d32:	4623      	mov	r3, r4
 8002d34:	3301      	adds	r3, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	014b      	lsls	r3, r1, #5
 8002d46:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d4a:	0142      	lsls	r2, r0, #5
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	3301      	adds	r3, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	014b      	lsls	r3, r1, #5
 8002d60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d64:	0142      	lsls	r2, r0, #5
 8002d66:	4623      	mov	r3, r4
 8002d68:	3301      	adds	r3, #1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	3307      	adds	r3, #7
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	ebad 0d03 	sub.w	sp, sp, r3
 8002d76:	466b      	mov	r3, sp
 8002d78:	3303      	adds	r3, #3
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
	float32_t wrkBuf2[length];
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	1e5c      	subs	r4, r3, #1
 8002d84:	617c      	str	r4, [r7, #20]
 8002d86:	4623      	mov	r3, r4
 8002d88:	3301      	adds	r3, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	014b      	lsls	r3, r1, #5
 8002d9a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d9e:	0142      	lsls	r2, r0, #5
 8002da0:	4623      	mov	r3, r4
 8002da2:	3301      	adds	r3, #1
 8002da4:	4618      	mov	r0, r3
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	014b      	lsls	r3, r1, #5
 8002db4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002db8:	0142      	lsls	r2, r0, #5
 8002dba:	4623      	mov	r3, r4
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	3307      	adds	r3, #7
 8002dc2:	08db      	lsrs	r3, r3, #3
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	ebad 0d03 	sub.w	sp, sp, r3
 8002dca:	466b      	mov	r3, sp
 8002dcc:	3303      	adds	r3, #3
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	613b      	str	r3, [r7, #16]
	if (token_levels[token_balance] < token_balance_max && token_levels[token_volume] > 0) {
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <_Z16process_dsp_leftPfS_i+0x10c>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b31      	cmp	r3, #49	; 0x31
 8002dda:	dc1c      	bgt.n	8002e16 <_Z16process_dsp_leftPfS_i+0xfa>
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <_Z16process_dsp_leftPfS_i+0x10c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	dd18      	ble.n	8002e16 <_Z16process_dsp_leftPfS_i+0xfa>
		process_dsp_iir_biquad_bass_left(srcLeft, wrkBuf, length);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4619      	mov	r1, r3
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7ff fd1a 	bl	8002824 <_Z32process_dsp_iir_biquad_bass_leftPfS_i>
		process_dsp_iir_biquad_treble_left(wrkBuf, wrkBuf2, length);
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6939      	ldr	r1, [r7, #16]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fd44 	bl	8002884 <_Z34process_dsp_iir_biquad_treble_leftPfS_i>
		process_dsp_balance_left(wrkBuf2, wrkBuf, length);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ff10 	bl	8002c28 <_Z24process_dsp_balance_leftPfS_i>
		process_dsp_volume(wrkBuf, destLeft, length);
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff62 	bl	8002cd8 <_Z18process_dsp_volumePfS_i>
 8002e14:	e003      	b.n	8002e1e <_Z16process_dsp_leftPfS_i+0x102>
		process_dsp_clear(destLeft, length);
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	68b8      	ldr	r0, [r7, #8]
 8002e1a:	f7ff fec7 	bl	8002bac <_Z17process_dsp_clearPfi>
 8002e1e:	46ad      	mov	sp, r5
}
 8002e20:	bf00      	nop
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bdb0      	pop	{r4, r5, r7, pc}
 8002e28:	20000d74 	.word	0x20000d74

08002e2c <_Z17process_dsp_rightPfS_i>:

void process_dsp_right(float32_t srcRight[], float32_t destRight[], int length) {
 8002e2c:	b5b0      	push	{r4, r5, r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
		process_dsp_iir_biquad_treble_right(wrkBuf, wrkBuf2, length);
		process_dsp_balance_right(wrkBuf2, wrkBuf, length);
		process_dsp_volume(wrkBuf, destRight, length);
	} else {
		process_dsp_clear(destRight, length);
	}
 8002e38:	466b      	mov	r3, sp
 8002e3a:	461d      	mov	r5, r3
	float32_t wrkBuf[length];
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1e5c      	subs	r4, r3, #1
 8002e40:	61fc      	str	r4, [r7, #28]
 8002e42:	4623      	mov	r3, r4
 8002e44:	3301      	adds	r3, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f04f 0100 	mov.w	r1, #0
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	014b      	lsls	r3, r1, #5
 8002e56:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e5a:	0142      	lsls	r2, r0, #5
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	3301      	adds	r3, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	014b      	lsls	r3, r1, #5
 8002e70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e74:	0142      	lsls	r2, r0, #5
 8002e76:	4623      	mov	r3, r4
 8002e78:	3301      	adds	r3, #1
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	3307      	adds	r3, #7
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	ebad 0d03 	sub.w	sp, sp, r3
 8002e86:	466b      	mov	r3, sp
 8002e88:	3303      	adds	r3, #3
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	61bb      	str	r3, [r7, #24]
	float32_t wrkBuf2[length];
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1e5c      	subs	r4, r3, #1
 8002e94:	617c      	str	r4, [r7, #20]
 8002e96:	4623      	mov	r3, r4
 8002e98:	3301      	adds	r3, #1
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	014b      	lsls	r3, r1, #5
 8002eaa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002eae:	0142      	lsls	r2, r0, #5
 8002eb0:	4623      	mov	r3, r4
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	014b      	lsls	r3, r1, #5
 8002ec4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ec8:	0142      	lsls	r2, r0, #5
 8002eca:	4623      	mov	r3, r4
 8002ecc:	3301      	adds	r3, #1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	3307      	adds	r3, #7
 8002ed2:	08db      	lsrs	r3, r3, #3
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	ebad 0d03 	sub.w	sp, sp, r3
 8002eda:	466b      	mov	r3, sp
 8002edc:	3303      	adds	r3, #3
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]
	if (token_levels[token_balance] > token_balance_min && token_levels[token_volume] > 0) {
 8002ee4:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <_Z17process_dsp_rightPfS_i+0x110>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8002eec:	db1c      	blt.n	8002f28 <_Z17process_dsp_rightPfS_i+0xfc>
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <_Z17process_dsp_rightPfS_i+0x110>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	dd18      	ble.n	8002f28 <_Z17process_dsp_rightPfS_i+0xfc>
		process_dsp_iir_biquad_bass_right(srcRight, wrkBuf, length);
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4619      	mov	r1, r3
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff fca9 	bl	8002854 <_Z33process_dsp_iir_biquad_bass_rightPfS_i>
		process_dsp_iir_biquad_treble_right(wrkBuf, wrkBuf2, length);
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6939      	ldr	r1, [r7, #16]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fcd3 	bl	80028b4 <_Z35process_dsp_iir_biquad_treble_rightPfS_i>
		process_dsp_balance_right(wrkBuf2, wrkBuf, length);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff feb3 	bl	8002c80 <_Z25process_dsp_balance_rightPfS_i>
		process_dsp_volume(wrkBuf, destRight, length);
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fed9 	bl	8002cd8 <_Z18process_dsp_volumePfS_i>
 8002f26:	e003      	b.n	8002f30 <_Z17process_dsp_rightPfS_i+0x104>
		process_dsp_clear(destRight, length);
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68b8      	ldr	r0, [r7, #8]
 8002f2c:	f7ff fe3e 	bl	8002bac <_Z17process_dsp_clearPfi>
 8002f30:	46ad      	mov	sp, r5
}
 8002f32:	bf00      	nop
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000d74 	.word	0x20000d74

08002f40 <_Z11process_dspPfS_S_S_i>:

void process_dsp(float32_t srcLeft[], float32_t srcRight[], float32_t destLeft[], float32_t destRight[], int length) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]

	process_dsp_left(srcLeft, destLeft, length);
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff fee2 	bl	8002d1c <_Z16process_dsp_leftPfS_i>
	process_dsp_right(srcRight, destRight, length);
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f7ff ff65 	bl	8002e2c <_Z17process_dsp_rightPfS_i>
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_Z12locate_tokenPciPi>:
				*value = char2int(str_token + i, length - i);
			}
	 }
}

int locate_token(char * buffer_start, int buffer_length, int* token_length) {
 8002f6a:	b480      	push	{r7}
 8002f6c:	b087      	sub	sp, #28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
	int i;
	for(i=0;i<buffer_length;i++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	da0a      	bge.n	8002f98 <_Z12locate_tokenPciPi+0x2e>
	{
		  if(buffer_start[i]==',')
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b2c      	cmp	r3, #44	; 0x2c
 8002f8c:	d003      	beq.n	8002f96 <_Z12locate_tokenPciPi+0x2c>
	for(i=0;i<buffer_length;i++)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3301      	adds	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	e7f1      	b.n	8002f7a <_Z12locate_tokenPciPi+0x10>
			  break;
 8002f96:	bf00      	nop
	}
	*token_length = i;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	601a      	str	r2, [r3, #0]
	return i > 0;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bfcc      	ite	gt
 8002fa4:	2301      	movgt	r3, #1
 8002fa6:	2300      	movle	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <_Z15get_token_valuePctPiS0_>:

void get_token_value(char* str_token, uint16_t length, int* token, int* value)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	817b      	strh	r3, [r7, #10]
	int i;
	 for(i=0;i<length;i++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	897b      	ldrh	r3, [r7, #10]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	da0a      	bge.n	8002fea <_Z15get_token_valuePctPiS0_+0x32>
	   	{
	   		  if(str_token[i]==' ')
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d003      	beq.n	8002fe8 <_Z15get_token_valuePctPiS0_+0x30>
	 for(i=0;i<length;i++)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e7f1      	b.n	8002fcc <_Z15get_token_valuePctPiS0_+0x14>
	   	  		  break;
 8002fe8:	bf00      	nop
	   	}
	 if (i==length) {
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d108      	bne.n	8003004 <_Z15get_token_valuePctPiS0_+0x4c>
		 *token = *value = -1;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	601a      	str	r2, [r3, #0]
			*value = -1;
			if (i < length) {
				*value = char2int(str_token + i, length - i);
			}
	 }
}
 8003002:	e05e      	b.n	80030c2 <_Z15get_token_valuePctPiS0_+0x10a>
			if(string_compare(str_token, TOKEN_VOLUME, i))
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	4930      	ldr	r1, [pc, #192]	; (80030cc <_Z15get_token_valuePctPiS0_+0x114>)
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f8ba 	bl	8003186 <_Z14string_comparePKcS0_t>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <_Z15get_token_valuePctPiS0_+0x72>
			{*token = token_volume;} else
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e037      	b.n	800309a <_Z15get_token_valuePctPiS0_+0xe2>
			if(string_compare(str_token, TOKEN_BASS, i))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	4927      	ldr	r1, [pc, #156]	; (80030d0 <_Z15get_token_valuePctPiS0_+0x118>)
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f8a7 	bl	8003186 <_Z14string_comparePKcS0_t>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <_Z15get_token_valuePctPiS0_+0x98>
			{*token = token_bass;} else
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e024      	b.n	800309a <_Z15get_token_valuePctPiS0_+0xe2>
			if(string_compare(str_token, TOKEN_TREBLE, i))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	491f      	ldr	r1, [pc, #124]	; (80030d4 <_Z15get_token_valuePctPiS0_+0x11c>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f894 	bl	8003186 <_Z14string_comparePKcS0_t>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <_Z15get_token_valuePctPiS0_+0xbe>
			{*token = token_treble;} else
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e011      	b.n	800309a <_Z15get_token_valuePctPiS0_+0xe2>
			if(string_compare(str_token, TOKEN_BALANCE, i))
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <_Z15get_token_valuePctPiS0_+0x120>)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f881 	bl	8003186 <_Z14string_comparePKcS0_t>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <_Z15get_token_valuePctPiS0_+0xe2>
			{*token = token_balance;}
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2203      	movs	r2, #3
 8003098:	601a      	str	r2, [r3, #0]
			*value = -1;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	601a      	str	r2, [r3, #0]
			if (i < length) {
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	da0b      	bge.n	80030c2 <_Z15get_token_valuePctPiS0_+0x10a>
				*value = char2int(str_token + i, length - i);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	18d0      	adds	r0, r2, r3
 80030b0:	897a      	ldrh	r2, [r7, #10]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	4619      	mov	r1, r3
 80030b8:	f000 f895 	bl	80031e6 <_Z8char2intPKcj>
 80030bc:	4602      	mov	r2, r0
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	601a      	str	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	0800ab34 	.word	0x0800ab34
 80030d0:	0800ab3c 	.word	0x0800ab3c
 80030d4:	0800ab44 	.word	0x0800ab44
 80030d8:	0800ab4c 	.word	0x0800ab4c

080030dc <_Z13process_tokenii>:

void process_token(int token, int value) {
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]

	if (token != -1 && value != -1) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d008      	beq.n	8003100 <_Z13process_tokenii+0x24>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d004      	beq.n	8003100 <_Z13process_tokenii+0x24>
		token_levels[token] = value;
 80030f6:	4905      	ldr	r1, [pc, #20]	; (800310c <_Z13process_tokenii+0x30>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	20000d74 	.word	0x20000d74

08003110 <_Z21process_token_updatesPc>:

void process_token_updates(char buffer[]) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

	int token, value,token_length;
	char * buffer_start = &buffer[0];
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	61fb      	str	r3, [r7, #28]
	int buffer_length = strlen(buffer);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fd f853 	bl	80001c8 <strlen>
 8003122:	4603      	mov	r3, r0
 8003124:	61bb      	str	r3, [r7, #24]

	while (buffer_length > 0 && locate_token(buffer_start, buffer_length, &token_length)) {
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	dd0b      	ble.n	8003144 <_Z21process_token_updatesPc+0x34>
 800312c:	f107 030c 	add.w	r3, r7, #12
 8003130:	461a      	mov	r2, r3
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	69f8      	ldr	r0, [r7, #28]
 8003136:	f7ff ff18 	bl	8002f6a <_Z12locate_tokenPciPi>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <_Z21process_token_updatesPc+0x34>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <_Z21process_token_updatesPc+0x36>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d019      	beq.n	800317e <_Z21process_token_updatesPc+0x6e>
		get_token_value(buffer_start, token_length, &token, &value);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	b299      	uxth	r1, r3
 800314e:	f107 0310 	add.w	r3, r7, #16
 8003152:	f107 0214 	add.w	r2, r7, #20
 8003156:	69f8      	ldr	r0, [r7, #28]
 8003158:	f7ff ff2e 	bl	8002fb8 <_Z15get_token_valuePctPiS0_>
		process_token(token, value);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ffba 	bl	80030dc <_Z13process_tokenii>
		buffer_start+=token_length+1;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3301      	adds	r3, #1
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	61fb      	str	r3, [r7, #28]
		buffer_length-= token_length+1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3301      	adds	r3, #1
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	61bb      	str	r3, [r7, #24]
	while (buffer_length > 0 && locate_token(buffer_start, buffer_length, &token_length)) {
 800317c:	e7d3      	b.n	8003126 <_Z21process_token_updatesPc+0x16>
	}
}
 800317e:	bf00      	nop
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <_Z14string_comparePKcS0_t>:

#include <dsp_util.h>
#include "string.h"

uint8_t string_compare(const char array1[], const char array2[], uint16_t length)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	4613      	mov	r3, r2
 8003192:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 8003194:	2300      	movs	r3, #0
 8003196:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8003198:	2300      	movs	r3, #0
 800319a:	75bb      	strb	r3, [r7, #22]
 800319c:	7dba      	ldrb	r2, [r7, #22]
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	da13      	bge.n	80031cc <_Z14string_comparePKcS0_t+0x46>
	   	{
	   		  if(array1[i]==array2[i])
 80031a4:	7dbb      	ldrb	r3, [r7, #22]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	781a      	ldrb	r2, [r3, #0]
 80031ac:	7dbb      	ldrb	r3, [r7, #22]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	440b      	add	r3, r1
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d103      	bne.n	80031c0 <_Z14string_comparePKcS0_t+0x3a>
	   	  		  comVAR++;
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	3301      	adds	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
 80031be:	e001      	b.n	80031c4 <_Z14string_comparePKcS0_t+0x3e>
	   	  	  else comVAR=0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 80031c4:	7dbb      	ldrb	r3, [r7, #22]
 80031c6:	3301      	adds	r3, #1
 80031c8:	75bb      	strb	r3, [r7, #22]
 80031ca:	e7e7      	b.n	800319c <_Z14string_comparePKcS0_t+0x16>
	   	}
	 if (comVAR==length)
 80031cc:	7dfa      	ldrb	r2, [r7, #23]
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d101      	bne.n	80031d8 <_Z14string_comparePKcS0_t+0x52>
		 	return 1;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <_Z14string_comparePKcS0_t+0x54>
	 else 	return 0;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_Z8char2intPKcj>:

/* convert character array to integer */
int char2int (const char *array, size_t n)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
    int number = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
    int mult = 1;
 80031f4:	2301      	movs	r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]

    n = (int)n < 0 ? -n : n;       /* quick absolute value check  */
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	da02      	bge.n	8003204 <_Z8char2intPKcj+0x1e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	425b      	negs	r3, r3
 8003202:	e000      	b.n	8003206 <_Z8char2intPKcj+0x20>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	603b      	str	r3, [r7, #0]

    /* for each character in array */
    while (n--)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	1e5a      	subs	r2, r3, #1
 800320c:	603a      	str	r2, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d036      	beq.n	800328a <_Z8char2intPKcj+0xa4>
    {
        /* if not digit or '-', check if number > 0, break or continue */
        if ((array[n] < '0' || array[n] > '9') && array[n] != '-') {
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	4413      	add	r3, r2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b2f      	cmp	r3, #47	; 0x2f
 8003226:	d905      	bls.n	8003234 <_Z8char2intPKcj+0x4e>
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	4413      	add	r3, r2
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b39      	cmp	r3, #57	; 0x39
 8003232:	d909      	bls.n	8003248 <_Z8char2intPKcj+0x62>
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	4413      	add	r3, r2
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b2d      	cmp	r3, #45	; 0x2d
 800323e:	d003      	beq.n	8003248 <_Z8char2intPKcj+0x62>
            if (number)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01f      	beq.n	8003286 <_Z8char2intPKcj+0xa0>
                break;
 8003246:	e020      	b.n	800328a <_Z8char2intPKcj+0xa4>
            else
                continue;
        }

        if (array[n] == '-') {      /* if '-' if number, negate, break */
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	4413      	add	r3, r2
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b2d      	cmp	r3, #45	; 0x2d
 8003252:	d106      	bne.n	8003262 <_Z8char2intPKcj+0x7c>
            if (number) {
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0d6      	beq.n	8003208 <_Z8char2intPKcj+0x22>
                number = -number;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	425b      	negs	r3, r3
 800325e:	60fb      	str	r3, [r7, #12]
                break;
 8003260:	e013      	b.n	800328a <_Z8char2intPKcj+0xa4>
            }
        }
        else {                      /* convert digit to numeric value   */
            number += (array[n] - '0') * mult;
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4413      	add	r3, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	3b30      	subs	r3, #48	; 0x30
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
            mult *= 10;
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	e7c0      	b.n	8003208 <_Z8char2intPKcj+0x22>
                continue;
 8003286:	bf00      	nop
    while (n--)
 8003288:	e7be      	b.n	8003208 <_Z8char2intPKcj+0x22>
        }
    }

    return number;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_Z8int2chariPc>:

char* int2char(int value, char* result) {
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
    char* ptr = result, *ptr1 = result, tmp_char;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	613b      	str	r3, [r7, #16]
    int tmp_value;

    do {
        tmp_value = value;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	60fb      	str	r3, [r7, #12]
        value /= 10;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a20      	ldr	r2, [pc, #128]	; (8003334 <_Z8int2chariPc+0x9c>)
 80032b2:	fb82 1203 	smull	r1, r2, r2, r3
 80032b6:	1092      	asrs	r2, r2, #2
 80032b8:	17db      	asrs	r3, r3, #31
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	607b      	str	r3, [r7, #4]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * 10)];
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f06f 0209 	mvn.w	r2, #9
 80032c4:	fb02 f203 	mul.w	r2, r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	f103 0223 	add.w	r2, r3, #35	; 0x23
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1c59      	adds	r1, r3, #1
 80032d4:	6179      	str	r1, [r7, #20]
 80032d6:	4918      	ldr	r1, [pc, #96]	; (8003338 <_Z8int2chariPc+0xa0>)
 80032d8:	5c8a      	ldrb	r2, [r1, r2]
 80032da:	701a      	strb	r2, [r3, #0]
    } while ( value );
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d000      	beq.n	80032e4 <_Z8int2chariPc+0x4c>
    do {
 80032e2:	e7e2      	b.n	80032aa <_Z8int2chariPc+0x12>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da04      	bge.n	80032f4 <_Z8int2chariPc+0x5c>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	617a      	str	r2, [r7, #20]
 80032f0:	222d      	movs	r2, #45	; 0x2d
 80032f2:	701a      	strb	r2, [r3, #0]
    *ptr-- = '\0';
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	1e5a      	subs	r2, r3, #1
 80032f8:	617a      	str	r2, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	429a      	cmp	r2, r3
 8003304:	d20e      	bcs.n	8003324 <_Z8int2chariPc+0x8c>
        tmp_char = *ptr;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	72fb      	strb	r3, [r7, #11]
        *ptr--= *ptr1;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	617a      	str	r2, [r7, #20]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	701a      	strb	r2, [r3, #0]
        *ptr1++ = tmp_char;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	613a      	str	r2, [r7, #16]
 800331e:	7afa      	ldrb	r2, [r7, #11]
 8003320:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 8003322:	e7ec      	b.n	80032fe <_Z8int2chariPc+0x66>
    }
    return result;
 8003324:	683b      	ldr	r3, [r7, #0]
}
 8003326:	4618      	mov	r0, r3
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	66666667 	.word	0x66666667
 8003338:	0800aac8 	.word	0x0800aac8

0800333c <_Z8dsp_copyPfS_i>:

void dsp_copy(float32_t src[], float32_t dest[], int length) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]

	memcpy(dest, src, length*sizeof(uint32_t));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	461a      	mov	r2, r3
 800334e:	68f9      	ldr	r1, [r7, #12]
 8003350:	68b8      	ldr	r0, [r7, #8]
 8003352:	f007 fa79 	bl	800a848 <memcpy>
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <_ZN6FilterC1E10filterTypeidd>:
#include <filter.hpp>

#define ECODE(x) {m_error_flag = x; return;}

// Handles LPF and HPF case
Filter::Filter(filterType filt_t, int num_taps, double Fs, double Fx)
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	61f8      	str	r0, [r7, #28]
 8003368:	460b      	mov	r3, r1
 800336a:	617a      	str	r2, [r7, #20]
 800336c:	ed87 0b02 	vstr	d0, [r7, #8]
 8003370:	ed87 1b00 	vstr	d1, [r7]
 8003374:	76fb      	strb	r3, [r7, #27]
{
	m_error_flag = 0;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
	m_filt_t = filt_t;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	7efa      	ldrb	r2, [r7, #27]
 8003380:	701a      	strb	r2, [r3, #0]
	m_num_taps = num_taps;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	605a      	str	r2, [r3, #4]
	m_Fs = Fs;
 8003388:	69f9      	ldr	r1, [r7, #28]
 800338a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800338e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m_Fx = Fx;
 8003392:	69f9      	ldr	r1, [r7, #28]
 8003394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003398:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m_lambda = M_PI * Fx / (Fs/2);
 800339c:	a350      	add	r3, pc, #320	; (adr r3, 80034e0 <_ZN6FilterC1E10filterTypeidd+0x180>)
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033a6:	f7fd f8d3 	bl	8000550 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4614      	mov	r4, r2
 80033b0:	461d      	mov	r5, r3
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033be:	f7fd f9f1 	bl	80007a4 <__aeabi_ddiv>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4620      	mov	r0, r4
 80033c8:	4629      	mov	r1, r5
 80033ca:	f7fd f9eb 	bl	80007a4 <__aeabi_ddiv>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	69f9      	ldr	r1, [r7, #28]
 80033d4:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if( Fs <= 0 ) ECODE(-1);
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033e4:	f7fd fb30 	bl	8000a48 <__aeabi_dcmple>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <_ZN6FilterC1E10filterTypeidd+0x98>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f04f 32ff 	mov.w	r2, #4294967295
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	e06e      	b.n	80034d6 <_ZN6FilterC1E10filterTypeidd+0x176>
	if( Fx <= 0 || Fx >= Fs/2 ) ECODE(-2);
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003404:	f7fd fb20 	bl	8000a48 <__aeabi_dcmple>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d110      	bne.n	8003430 <_ZN6FilterC1E10filterTypeidd+0xd0>
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800341a:	f7fd f9c3 	bl	80007a4 <__aeabi_ddiv>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003426:	f7fd fb19 	bl	8000a5c <__aeabi_dcmpge>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d004      	beq.n	800343a <_ZN6FilterC1E10filterTypeidd+0xda>
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f06f 0201 	mvn.w	r2, #1
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	e04d      	b.n	80034d6 <_ZN6FilterC1E10filterTypeidd+0x176>
	if( m_num_taps <= 0 || m_num_taps > MAX_NUM_FILTER_TAPS ) ECODE(-3);
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	dd04      	ble.n	800344c <_ZN6FilterC1E10filterTypeidd+0xec>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800344a:	dd04      	ble.n	8003456 <_ZN6FilterC1E10filterTypeidd+0xf6>
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f06f 0202 	mvn.w	r2, #2
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	e03f      	b.n	80034d6 <_ZN6FilterC1E10filterTypeidd+0x176>

	m_taps = m_sr = NULL;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	2200      	movs	r2, #0
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
	m_taps = (double*)malloc( m_num_taps * sizeof(double) );
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4618      	mov	r0, r3
 800346c:	f007 f9dc 	bl	800a828 <malloc>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	629a      	str	r2, [r3, #40]	; 0x28
	m_sr = (double*)malloc( m_num_taps * sizeof(double) );
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4618      	mov	r0, r3
 8003480:	f007 f9d2 	bl	800a828 <malloc>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	62da      	str	r2, [r3, #44]	; 0x2c
	if( m_taps == NULL || m_sr == NULL ) ECODE(-4);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <_ZN6FilterC1E10filterTypeidd+0x13c>
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d104      	bne.n	80034a6 <_ZN6FilterC1E10filterTypeidd+0x146>
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f06f 0203 	mvn.w	r2, #3
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	e017      	b.n	80034d6 <_ZN6FilterC1E10filterTypeidd+0x176>

	init();
 80034a6:	69f8      	ldr	r0, [r7, #28]
 80034a8:	f000 f95c 	bl	8003764 <_ZN6Filter4initEv>

	if( m_filt_t == LPF ) designLPF();
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <_ZN6FilterC1E10filterTypeidd+0x15c>
 80034b4:	69f8      	ldr	r0, [r7, #28]
 80034b6:	f000 f833 	bl	8003520 <_ZN6Filter9designLPFEv>
	else if( m_filt_t == HPF ) designHPF();
	else ECODE(-5);

	return;
 80034ba:	e00c      	b.n	80034d6 <_ZN6FilterC1E10filterTypeidd+0x176>
	else if( m_filt_t == HPF ) designHPF();
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d103      	bne.n	80034cc <_ZN6FilterC1E10filterTypeidd+0x16c>
 80034c4:	69f8      	ldr	r0, [r7, #28]
 80034c6:	f000 f8b7 	bl	8003638 <_ZN6Filter9designHPFEv>
	return;
 80034ca:	e004      	b.n	80034d6 <_ZN6FilterC1E10filterTypeidd+0x176>
	else ECODE(-5);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f06f 0204 	mvn.w	r2, #4
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	bf00      	nop
}
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bdb0      	pop	{r4, r5, r7, pc}
 80034e0:	54442d18 	.word	0x54442d18
 80034e4:	400921fb 	.word	0x400921fb

080034e8 <_ZN6FilterD1Ev>:
	else ECODE(-16);

	return;
}

Filter::~Filter()
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
{
	if( m_taps != NULL ) free( m_taps );
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <_ZN6FilterD1Ev+0x1a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	4618      	mov	r0, r3
 80034fe:	f007 f99b 	bl	800a838 <free>
	if( m_sr != NULL ) free( m_sr );
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <_ZN6FilterD1Ev+0x2c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	4618      	mov	r0, r3
 8003510:	f007 f992 	bl	800a838 <free>
}
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <_ZN6Filter9designLPFEv>:

void
Filter::designLPF()
{
 8003520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
	int n;
	double mm;

	for(n = 0; n < m_num_taps; n++){
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	da70      	bge.n	800361a <_ZN6Filter9designLPFEv+0xfa>
		mm = n - (m_num_taps - 1.0) / 2.0;
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f7fc ff9f 	bl	800047c <__aeabi_i2d>
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fc ff98 	bl	800047c <__aeabi_i2d>
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <_ZN6Filter9designLPFEv+0x110>)
 8003552:	f7fc fe45 	bl	80001e0 <__aeabi_dsub>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003566:	f7fd f91d 	bl	80007a4 <__aeabi_ddiv>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4620      	mov	r0, r4
 8003570:	4629      	mov	r1, r5
 8003572:	f7fc fe35 	bl	80001e0 <__aeabi_dsub>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if( mm == 0.0 ) m_taps[n] = m_lambda / M_PI;
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800358a:	f7fd fa49 	bl	8000a20 <__aeabi_dcmpeq>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d011      	beq.n	80035b8 <_ZN6Filter9designLPFEv+0x98>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	18d4      	adds	r4, r2, r3
 80035a4:	a320      	add	r3, pc, #128	; (adr r3, 8003628 <_ZN6Filter9designLPFEv+0x108>)
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f7fd f8fb 	bl	80007a4 <__aeabi_ddiv>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	e9c4 2300 	strd	r2, r3, [r4]
 80035b6:	e02c      	b.n	8003612 <_ZN6Filter9designLPFEv+0xf2>
		else m_taps[n] = sin( mm * m_lambda ) / (mm * M_PI);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80035be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c2:	f7fc ffc5 	bl	8000550 <__aeabi_dmul>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	ec43 2b17 	vmov	d7, r2, r3
 80035ce:	eeb0 0a47 	vmov.f32	s0, s14
 80035d2:	eef0 0a67 	vmov.f32	s1, s15
 80035d6:	f004 ff5f 	bl	8008498 <sin>
 80035da:	ec59 8b10 	vmov	r8, r9, d0
 80035de:	a312      	add	r3, pc, #72	; (adr r3, 8003628 <_ZN6Filter9designLPFEv+0x108>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035e8:	f7fc ffb2 	bl	8000550 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	18d4      	adds	r4, r2, r3
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4640      	mov	r0, r8
 8003604:	4649      	mov	r1, r9
 8003606:	f7fd f8cd 	bl	80007a4 <__aeabi_ddiv>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	e9c4 2300 	strd	r2, r3, [r4]
	for(n = 0; n < m_num_taps; n++){
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	3301      	adds	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e789      	b.n	800352e <_ZN6Filter9designLPFEv+0xe>
	}

	return;
 800361a:	bf00      	nop
}
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003624:	f3af 8000 	nop.w
 8003628:	54442d18 	.word	0x54442d18
 800362c:	400921fb 	.word	0x400921fb
 8003630:	3ff00000 	.word	0x3ff00000
 8003634:	00000000 	.word	0x00000000

08003638 <_ZN6Filter9designHPFEv>:

void
Filter::designHPF()
{
 8003638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800363c:	b087      	sub	sp, #28
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
	int n;
	double mm;

	for(n = 0; n < m_num_taps; n++){
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	da7e      	bge.n	800374e <_ZN6Filter9designHPFEv+0x116>
		mm = n - (m_num_taps - 1.0) / 2.0;
 8003650:	6978      	ldr	r0, [r7, #20]
 8003652:	f7fc ff13 	bl	800047c <__aeabi_i2d>
 8003656:	4680      	mov	r8, r0
 8003658:	4689      	mov	r9, r1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc ff0c 	bl	800047c <__aeabi_i2d>
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <_ZN6Filter9designHPFEv+0x128>)
 800366a:	f7fc fdb9 	bl	80001e0 <__aeabi_dsub>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800367e:	f7fd f891 	bl	80007a4 <__aeabi_ddiv>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4640      	mov	r0, r8
 8003688:	4649      	mov	r1, r9
 800368a:	f7fc fda9 	bl	80001e0 <__aeabi_dsub>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if( mm == 0.0 ) m_taps[n] = 1.0 - m_lambda / M_PI;
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036a2:	f7fd f9bd 	bl	8000a20 <__aeabi_dcmpeq>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01c      	beq.n	80036e6 <_ZN6Filter9designHPFEv+0xae>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80036b2:	a329      	add	r3, pc, #164	; (adr r3, 8003758 <_ZN6Filter9designHPFEv+0x120>)
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f7fd f874 	bl	80007a4 <__aeabi_ddiv>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	18d6      	adds	r6, r2, r3
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	4922      	ldr	r1, [pc, #136]	; (8003760 <_ZN6Filter9designHPFEv+0x128>)
 80036d8:	f7fc fd82 	bl	80001e0 <__aeabi_dsub>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	e9c6 2300 	strd	r2, r3, [r6]
 80036e4:	e02f      	b.n	8003746 <_ZN6Filter9designHPFEv+0x10e>
		else m_taps[n] = -sin( mm * m_lambda ) / (mm * M_PI);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80036ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036f0:	f7fc ff2e 	bl	8000550 <__aeabi_dmul>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	ec43 2b17 	vmov	d7, r2, r3
 80036fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003700:	eef0 0a67 	vmov.f32	s1, s15
 8003704:	f004 fec8 	bl	8008498 <sin>
 8003708:	ec53 2b10 	vmov	r2, r3, d0
 800370c:	4614      	mov	r4, r2
 800370e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003712:	a311      	add	r3, pc, #68	; (adr r3, 8003758 <_ZN6Filter9designHPFEv+0x120>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800371c:	f7fc ff18 	bl	8000550 <__aeabi_dmul>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	18d6      	adds	r6, r2, r3
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4620      	mov	r0, r4
 8003738:	4629      	mov	r1, r5
 800373a:	f7fd f833 	bl	80007a4 <__aeabi_ddiv>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	e9c6 2300 	strd	r2, r3, [r6]
	for(n = 0; n < m_num_taps; n++){
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	3301      	adds	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e77b      	b.n	8003646 <_ZN6Filter9designHPFEv+0xe>
	}

	return;
 800374e:	bf00      	nop
}
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003758:	54442d18 	.word	0x54442d18
 800375c:	400921fb 	.word	0x400921fb
 8003760:	3ff00000 	.word	0x3ff00000

08003764 <_ZN6Filter4initEv>:
// Output the magnitude of the frequency response in dB
#define NP 1000

void
Filter::init()
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	int i;

	if( m_error_flag != 0 ) return;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d115      	bne.n	80037a0 <_ZN6Filter4initEv+0x3c>

	for(i = 0; i < m_num_taps; i++) m_sr[i] = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	429a      	cmp	r2, r3
 8003780:	da10      	bge.n	80037a4 <_ZN6Filter4initEv+0x40>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	18d1      	adds	r1, r2, r3
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9c1 2300 	strd	r2, r3, [r1]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3301      	adds	r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e7eb      	b.n	8003778 <_ZN6Filter4initEv+0x14>
	if( m_error_flag != 0 ) return;
 80037a0:	bf00      	nop
 80037a2:	e000      	b.n	80037a6 <_ZN6Filter4initEv+0x42>

	return;
 80037a4:	bf00      	nop
}
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80037b4:	f000 ffca 	bl	800474c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037b8:	f000 f96a 	bl	8003a90 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  init_dsp();
 80037bc:	f7ff f9ea 	bl	8002b94 <_Z8init_dspv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037c0:	f000 fb10 	bl	8003de4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80037c4:	f000 fae6 	bl	8003d94 <_ZL11MX_DMA_Initv>
  MX_I2S2_Init();
 80037c8:	f000 f9f2 	bl	8003bb0 <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 80037cc:	f000 fa24 	bl	8003c18 <_ZL12MX_I2S3_Initv>
  MX_USART2_UART_Init();
 80037d0:	f000 fab2 	bl	8003d38 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 80037d4:	f000 fa54 	bl	8003c80 <_ZL12MX_TIM2_Initv>

  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80037d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037dc:	f001 f828 	bl	8004830 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 80037e0:	2232      	movs	r2, #50	; 0x32
 80037e2:	2100      	movs	r1, #0
 80037e4:	4837      	ldr	r0, [pc, #220]	; (80038c4 <main+0x114>)
 80037e6:	f007 f83d 	bl	800a864 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 80037ea:	4837      	ldr	r0, [pc, #220]	; (80038c8 <main+0x118>)
 80037ec:	f003 fb40 	bl	8006e70 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <main+0x11c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	4b35      	ldr	r3, [pc, #212]	; (80038cc <main+0x11c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&buffer[buffer_index++], 1);
 8003800:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <main+0x120>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	b2d1      	uxtb	r1, r2
 8003808:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <main+0x120>)
 800380a:	7011      	strb	r1, [r2, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <main+0x114>)
 8003810:	4413      	add	r3, r2
 8003812:	2201      	movs	r2, #1
 8003814:	4619      	mov	r1, r3
 8003816:	482d      	ldr	r0, [pc, #180]	; (80038cc <main+0x11c>)
 8003818:	f003 fff4 	bl	8007804 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_I2S_Transmit_DMA(&hi2s3, txBuf, SAMPLES*2 );
 800381c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003820:	492c      	ldr	r1, [pc, #176]	; (80038d4 <main+0x124>)
 8003822:	482d      	ldr	r0, [pc, #180]	; (80038d8 <main+0x128>)
 8003824:	f002 f818 	bl	8005858 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, rxBuf, SAMPLES*2 );
 8003828:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800382c:	492b      	ldr	r1, [pc, #172]	; (80038dc <main+0x12c>)
 800382e:	482c      	ldr	r0, [pc, #176]	; (80038e0 <main+0x130>)
 8003830:	f002 f8ba 	bl	80059a8 <HAL_I2S_Receive_DMA>

  while (1)
  {
	  if ( rxHalfComplete && txHalfComplete )
 8003834:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <main+0x134>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <main+0x98>
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <main+0x138>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <main+0x98>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <main+0x9a>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d016      	beq.n	800387c <main+0xcc>
	  {
		  rxHalfComplete = 0;
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <main+0x134>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
		  txHalfComplete = 0;
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <main+0x138>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

		  process_dsp_half(0);
 800385a:	2000      	movs	r0, #0
 800385c:	f000 f84a 	bl	80038f4 <_Z16process_dsp_halfi>

		  if ( rxFullComplete || rxFullComplete )
 8003860:	4b22      	ldr	r3, [pc, #136]	; (80038ec <main+0x13c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d103      	bne.n	8003870 <main+0xc0>
 8003868:	4b20      	ldr	r3, [pc, #128]	; (80038ec <main+0x13c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <main+0xc4>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <main+0xc6>
 8003874:	2300      	movs	r3, #0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0dc      	beq.n	8003834 <main+0x84>
		  {
			  while (1) {}
 800387a:	e7fe      	b.n	800387a <main+0xca>
		  }
	  }

	  else if ( rxFullComplete && rxFullComplete )
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <main+0x13c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <main+0xe0>
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <main+0x13c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <main+0xe0>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <main+0xe2>
 8003890:	2300      	movs	r3, #0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ce      	beq.n	8003834 <main+0x84>
	  {
		  rxFullComplete = 0;
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <main+0x13c>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
		  txFullComplete = 0;
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <main+0x140>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

		  process_dsp_half(1);
 80038a2:	2001      	movs	r0, #1
 80038a4:	f000 f826 	bl	80038f4 <_Z16process_dsp_halfi>

		  if ( rxHalfComplete || txHalfComplete )
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <main+0x134>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d103      	bne.n	80038b8 <main+0x108>
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <main+0x138>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <main+0x10c>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <main+0x10e>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0b8      	beq.n	8003834 <main+0x84>
		  {
			  while (1) {}
 80038c2:	e7fe      	b.n	80038c2 <main+0x112>
 80038c4:	20000d84 	.word	0x20000d84
 80038c8:	20000f08 	.word	0x20000f08
 80038cc:	20000f50 	.word	0x20000f50
 80038d0:	20000db7 	.word	0x20000db7
 80038d4:	200015e4 	.word	0x200015e4
 80038d8:	20000e00 	.word	0x20000e00
 80038dc:	20000fa4 	.word	0x20000fa4
 80038e0:	20000db8 	.word	0x20000db8
 80038e4:	20000f94 	.word	0x20000f94
 80038e8:	20000f98 	.word	0x20000f98
 80038ec:	20000f9c 	.word	0x20000f9c
 80038f0:	20000fa0 	.word	0x20000fa0

080038f4 <_Z16process_dsp_halfi>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void process_dsp_half(int b) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	6078      	str	r0, [r7, #4]
	copyRxToSrc(b);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f817 	bl	8003930 <_Z11copyRxToSrci>
	process_dsp(srcLeft, srcRight, destLeft, destRight, SAMPLES_SRC_DEST);
 8003902:	2364      	movs	r3, #100	; 0x64
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <_Z16process_dsp_halfi+0x2c>)
 8003908:	4a06      	ldr	r2, [pc, #24]	; (8003924 <_Z16process_dsp_halfi+0x30>)
 800390a:	4907      	ldr	r1, [pc, #28]	; (8003928 <_Z16process_dsp_halfi+0x34>)
 800390c:	4807      	ldr	r0, [pc, #28]	; (800392c <_Z16process_dsp_halfi+0x38>)
 800390e:	f7ff fb17 	bl	8002f40 <_Z11process_dspPfS_S_S_i>
	copyDestToTx(b);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f860 	bl	80039d8 <_Z12copyDestToTxi>

}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200020d4 	.word	0x200020d4
 8003924:	20001f44 	.word	0x20001f44
 8003928:	20001db4 	.word	0x20001db4
 800392c:	20001c24 	.word	0x20001c24

08003930 <_Z11copyRxToSrci>:

void copyRxToSrc( int b) {
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	int startBuf = b * BUF_SAMPLES / 2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	60fb      	str	r3, [r7, #12]
	int endBuf = startBuf + BUF_SAMPLES / 2;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800394a:	60bb      	str	r3, [r7, #8]

	int i = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	429a      	cmp	r2, r3
 800395a:	da31      	bge.n	80039c0 <_Z11copyRxToSrci+0x90>
	{
		  srcLeft[i] = ( (rxBuf[pos]<<16)|rxBuf[pos+1] );
 800395c:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <_Z11copyRxToSrci+0x9c>)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	3201      	adds	r2, #1
 800396a:	4918      	ldr	r1, [pc, #96]	; (80039cc <_Z11copyRxToSrci+0x9c>)
 800396c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003970:	4313      	orrs	r3, r2
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <_Z11copyRxToSrci+0xa0>)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	edc3 7a00 	vstr	s15, [r3]
		  srcRight[i] = ( (rxBuf[pos+2]<<16)|rxBuf[pos+3] );
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3302      	adds	r3, #2
 800398a:	4a10      	ldr	r2, [pc, #64]	; (80039cc <_Z11copyRxToSrci+0x9c>)
 800398c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	3203      	adds	r2, #3
 8003996:	490d      	ldr	r1, [pc, #52]	; (80039cc <_Z11copyRxToSrci+0x9c>)
 8003998:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800399c:	4313      	orrs	r3, r2
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a6:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <_Z11copyRxToSrci+0xa4>)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	edc3 7a00 	vstr	s15, [r3]
		  i++;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	3304      	adds	r3, #4
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	e7c9      	b.n	8003954 <_Z11copyRxToSrci+0x24>
	}
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	20000fa4 	.word	0x20000fa4
 80039d0:	20001c24 	.word	0x20001c24
 80039d4:	20001db4 	.word	0x20001db4

080039d8 <_Z12copyDestToTxi>:
//	  txBuf[pos+3] = rval&0xFFFF;
//	  i++;
//	}
//}

void copyDestToTx( int b) {
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	int startBuf = b * BUF_SAMPLES / 2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	617b      	str	r3, [r7, #20]
	int endBuf = startBuf + BUF_SAMPLES / 2;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80039f2:	613b      	str	r3, [r7, #16]

	int i = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]

	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	da39      	bge.n	8003a78 <_Z12copyDestToTxi+0xa0>
	{
	  int lval = destLeft[i];
 8003a04:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <_Z12copyDestToTxi+0xac>)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a14:	ee17 3a90 	vmov	r3, s15
 8003a18:	60fb      	str	r3, [r7, #12]
	  int rval = destRight[i];
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <_Z12copyDestToTxi+0xb0>)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	edd3 7a00 	vldr	s15, [r3]
 8003a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a2a:	ee17 3a90 	vmov	r3, s15
 8003a2e:	60bb      	str	r3, [r7, #8]
	  txBuf[pos] = (lval>>16)&0xFFFF;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	b299      	uxth	r1, r3
 8003a36:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <_Z12copyDestToTxi+0xb4>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  txBuf[pos+1] = lval&0xFFFF;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	3301      	adds	r3, #1
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	b291      	uxth	r1, r2
 8003a46:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <_Z12copyDestToTxi+0xb4>)
 8003a48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  txBuf[pos+2] = (rval>>16)&0xFFFF;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	0c1a      	lsrs	r2, r3, #16
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	3302      	adds	r3, #2
 8003a54:	b291      	uxth	r1, r2
 8003a56:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <_Z12copyDestToTxi+0xb4>)
 8003a58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  txBuf[pos+3] = rval&0xFFFF;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	3303      	adds	r3, #3
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	b291      	uxth	r1, r2
 8003a64:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <_Z12copyDestToTxi+0xb4>)
 8003a66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  i++;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	3304      	adds	r3, #4
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e7c1      	b.n	80039fc <_Z12copyDestToTxi+0x24>
	}
}
 8003a78:	bf00      	nop
 8003a7a:	3724      	adds	r7, #36	; 0x24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	20001f44 	.word	0x20001f44
 8003a88:	200020d4 	.word	0x200020d4
 8003a8c:	200015e4 	.word	0x200015e4

08003a90 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b098      	sub	sp, #96	; 0x60
 8003a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a9a:	2230      	movs	r2, #48	; 0x30
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f006 fee0 	bl	800a864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aa4:	f107 031c 	add.w	r3, r7, #28
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <_Z18SystemClock_Configv+0x118>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a37      	ldr	r2, [pc, #220]	; (8003ba8 <_Z18SystemClock_Configv+0x118>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <_Z18SystemClock_Configv+0x118>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	4b32      	ldr	r3, [pc, #200]	; (8003bac <_Z18SystemClock_Configv+0x11c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a31      	ldr	r2, [pc, #196]	; (8003bac <_Z18SystemClock_Configv+0x11c>)
 8003ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <_Z18SystemClock_Configv+0x11c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003afa:	2302      	movs	r3, #2
 8003afc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003afe:	2301      	movs	r3, #1
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b02:	2310      	movs	r3, #16
 8003b04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b06:	2302      	movs	r3, #2
 8003b08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003b0e:	2308      	movs	r3, #8
 8003b10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003b12:	23a8      	movs	r3, #168	; 0xa8
 8003b14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b16:	2302      	movs	r3, #2
 8003b18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 fbcc 	bl	80062c0 <HAL_RCC_OscConfig>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8003b38:	f000 f9ca 	bl	8003ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b40:	2302      	movs	r3, #2
 8003b42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b44:	2300      	movs	r3, #0
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b54:	f107 031c 	add.w	r3, r7, #28
 8003b58:	2105      	movs	r1, #5
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f002 fe28 	bl	80067b0 <HAL_RCC_ClockConfig>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 8003b70:	f000 f9ae 	bl	8003ed0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003b74:	2301      	movs	r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8003b78:	2360      	movs	r3, #96	; 0x60
 8003b7a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	4618      	mov	r0, r3
 8003b86:	f002 ffe3 	bl	8006b50 <HAL_RCCEx_PeriphCLKConfig>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 8003b9a:	f000 f999 	bl	8003ed0 <Error_Handler>
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3760      	adds	r7, #96	; 0x60
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40007000 	.word	0x40007000

08003bb0 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8003bb4:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003bb6:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <_ZL12MX_I2S2_Initv+0x64>)
 8003bb8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003bbc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003bc0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003bca:	2203      	movs	r2, #3
 8003bcc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003bce:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003bd8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003bdc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8003bf0:	4807      	ldr	r0, [pc, #28]	; (8003c10 <_ZL12MX_I2S2_Initv+0x60>)
 8003bf2:	f001 fcf1 	bl	80055d8 <HAL_I2S_Init>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <_ZL12MX_I2S2_Initv+0x5a>
  {
    Error_Handler();
 8003c06:	f000 f963 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000db8 	.word	0x20000db8
 8003c14:	40003800 	.word	0x40003800

08003c18 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003c1c:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <_ZL12MX_I2S3_Initv+0x64>)
 8003c20:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c28:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8003c30:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c32:	2203      	movs	r2, #3
 8003c34:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c40:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003c44:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003c58:	4807      	ldr	r0, [pc, #28]	; (8003c78 <_ZL12MX_I2S3_Initv+0x60>)
 8003c5a:	f001 fcbd 	bl	80055d8 <HAL_I2S_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <_ZL12MX_I2S3_Initv+0x5a>
  {
    Error_Handler();
 8003c6e:	f000 f92f 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000e00 	.word	0x20000e00
 8003c7c:	40003c00 	.word	0x40003c00

08003c80 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c94:	463b      	mov	r3, r7
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <_ZL12MX_TIM2_Initv+0xb4>)
 8003c9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ca2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <_ZL12MX_TIM2_Initv+0xb4>)
 8003ca6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8003caa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cac:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <_ZL12MX_TIM2_Initv+0xb4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <_ZL12MX_TIM2_Initv+0xb4>)
 8003cb4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003cb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cba:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <_ZL12MX_TIM2_Initv+0xb4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <_ZL12MX_TIM2_Initv+0xb4>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003cc6:	481b      	ldr	r0, [pc, #108]	; (8003d34 <_ZL12MX_TIM2_Initv+0xb4>)
 8003cc8:	f003 f882 	bl	8006dd0 <HAL_TIM_Base_Init>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8003cdc:	f000 f8f8 	bl	8003ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	4619      	mov	r1, r3
 8003cec:	4811      	ldr	r0, [pc, #68]	; (8003d34 <_ZL12MX_TIM2_Initv+0xb4>)
 8003cee:	f003 fa37 	bl	8007160 <HAL_TIM_ConfigClockSource>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8003d02:	f000 f8e5 	bl	8003ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d0e:	463b      	mov	r3, r7
 8003d10:	4619      	mov	r1, r3
 8003d12:	4808      	ldr	r0, [pc, #32]	; (8003d34 <_ZL12MX_TIM2_Initv+0xb4>)
 8003d14:	f003 fc54 	bl	80075c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bf14      	ite	ne
 8003d1e:	2301      	movne	r3, #1
 8003d20:	2300      	moveq	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8003d28:	f000 f8d2 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d2c:	bf00      	nop
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000f08 	.word	0x20000f08

08003d38 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003d3e:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <_ZL19MX_USART2_UART_Initv+0x58>)
 8003d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003d42:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003d44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003d5e:	220c      	movs	r2, #12
 8003d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d68:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d6e:	4807      	ldr	r0, [pc, #28]	; (8003d8c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003d70:	f003 fcb6 	bl	80076e0 <HAL_UART_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8003d84:	f000 f8a4 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000f50 	.word	0x20000f50
 8003d90:	40004400 	.word	0x40004400

08003d94 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <_ZL11MX_DMA_Initv+0x4c>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <_ZL11MX_DMA_Initv+0x4c>)
 8003da4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <_ZL11MX_DMA_Initv+0x4c>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	200e      	movs	r0, #14
 8003dbc:	f000 fe37 	bl	8004a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003dc0:	200e      	movs	r0, #14
 8003dc2:	f000 fe50 	bl	8004a66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2100      	movs	r1, #0
 8003dca:	2010      	movs	r0, #16
 8003dcc:	f000 fe2f 	bl	8004a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003dd0:	2010      	movs	r0, #16
 8003dd2:	f000 fe48 	bl	8004a66 <HAL_NVIC_EnableIRQ>

}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800

08003de4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <_ZL12MX_GPIO_Initv+0x68>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <_ZL12MX_GPIO_Initv+0x68>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <_ZL12MX_GPIO_Initv+0x68>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <_ZL12MX_GPIO_Initv+0x68>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <_ZL12MX_GPIO_Initv+0x68>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	6313      	str	r3, [r2, #48]	; 0x30
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <_ZL12MX_GPIO_Initv+0x68>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <_ZL12MX_GPIO_Initv+0x68>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <_ZL12MX_GPIO_Initv+0x68>)
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <_ZL12MX_GPIO_Initv+0x68>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]

}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);
	txFullComplete = 1;
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <HAL_I2S_TxCpltCallback+0x1c>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000fa0 	.word	0x20000fa0

08003e70 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s);
	rxFullComplete = 1;
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <HAL_I2S_RxCpltCallback+0x1c>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000f9c 	.word	0x20000f9c

08003e90 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);
	txHalfComplete = 1;
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000f98 	.word	0x20000f98

08003eb0 <HAL_I2S_RxHalfCpltCallback>:


void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s);
	rxHalfComplete = 1;
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000f94 	.word	0x20000f94

08003ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_MspInit+0x4c>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08e      	sub	sp, #56	; 0x38
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a81      	ldr	r2, [pc, #516]	; (8004154 <HAL_I2S_MspInit+0x224>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d17b      	bne.n	800404a <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	4b80      	ldr	r3, [pc, #512]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a7f      	ldr	r2, [pc, #508]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8003f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b7d      	ldr	r3, [pc, #500]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	4b79      	ldr	r3, [pc, #484]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a78      	ldr	r2, [pc, #480]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4a71      	ldr	r2, [pc, #452]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9a:	4b6f      	ldr	r3, [pc, #444]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003fa6:	2348      	movs	r3, #72	; 0x48
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	2302      	movs	r3, #2
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fb6:	2305      	movs	r3, #5
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4866      	ldr	r0, [pc, #408]	; (800415c <HAL_I2S_MspInit+0x22c>)
 8003fc2:	f001 f96d 	bl	80052a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fd8:	2305      	movs	r3, #5
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	485f      	ldr	r0, [pc, #380]	; (8004160 <HAL_I2S_MspInit+0x230>)
 8003fe4:	f001 f95c 	bl	80052a0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003fe8:	4b5e      	ldr	r3, [pc, #376]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8003fea:	4a5f      	ldr	r2, [pc, #380]	; (8004168 <HAL_I2S_MspInit+0x238>)
 8003fec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003fee:	4b5d      	ldr	r3, [pc, #372]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ff4:	4b5b      	ldr	r3, [pc, #364]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ffa:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004000:	4b58      	ldr	r3, [pc, #352]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8004002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004006:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004008:	4b56      	ldr	r3, [pc, #344]	; (8004164 <HAL_I2S_MspInit+0x234>)
 800400a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800400e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004010:	4b54      	ldr	r3, [pc, #336]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8004012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004016:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8004018:	4b52      	ldr	r3, [pc, #328]	; (8004164 <HAL_I2S_MspInit+0x234>)
 800401a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800401e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004020:	4b50      	ldr	r3, [pc, #320]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8004022:	2200      	movs	r2, #0
 8004024:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004026:	4b4f      	ldr	r3, [pc, #316]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8004028:	2200      	movs	r2, #0
 800402a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800402c:	484d      	ldr	r0, [pc, #308]	; (8004164 <HAL_I2S_MspInit+0x234>)
 800402e:	f000 fd35 	bl	8004a9c <HAL_DMA_Init>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8004038:	f7ff ff4a 	bl	8003ed0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a49      	ldr	r2, [pc, #292]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c
 8004042:	4a48      	ldr	r2, [pc, #288]	; (8004164 <HAL_I2S_MspInit+0x234>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004048:	e07f      	b.n	800414a <HAL_I2S_MspInit+0x21a>
  else if(hi2s->Instance==SPI3)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a47      	ldr	r2, [pc, #284]	; (800416c <HAL_I2S_MspInit+0x23c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d17a      	bne.n	800414a <HAL_I2S_MspInit+0x21a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	4b3f      	ldr	r3, [pc, #252]	; (8004158 <HAL_I2S_MspInit+0x228>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	4a3e      	ldr	r2, [pc, #248]	; (8004158 <HAL_I2S_MspInit+0x228>)
 800405e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004062:	6413      	str	r3, [r2, #64]	; 0x40
 8004064:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	4b38      	ldr	r3, [pc, #224]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	4a37      	ldr	r2, [pc, #220]	; (8004158 <HAL_I2S_MspInit+0x228>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6313      	str	r3, [r2, #48]	; 0x30
 8004080:	4b35      	ldr	r3, [pc, #212]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	4a30      	ldr	r2, [pc, #192]	; (8004158 <HAL_I2S_MspInit+0x228>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	6313      	str	r3, [r2, #48]	; 0x30
 800409c:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_I2S_MspInit+0x228>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040a8:	2310      	movs	r3, #16
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b4:	2300      	movs	r3, #0
 80040b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80040b8:	2306      	movs	r3, #6
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c0:	4619      	mov	r1, r3
 80040c2:	482b      	ldr	r0, [pc, #172]	; (8004170 <HAL_I2S_MspInit+0x240>)
 80040c4:	f001 f8ec 	bl	80052a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80040c8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ce:	2302      	movs	r3, #2
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d6:	2300      	movs	r3, #0
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80040da:	2306      	movs	r3, #6
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040e2:	4619      	mov	r1, r3
 80040e4:	481d      	ldr	r0, [pc, #116]	; (800415c <HAL_I2S_MspInit+0x22c>)
 80040e6:	f001 f8db 	bl	80052a0 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80040ea:	4b22      	ldr	r3, [pc, #136]	; (8004174 <HAL_I2S_MspInit+0x244>)
 80040ec:	4a22      	ldr	r2, [pc, #136]	; (8004178 <HAL_I2S_MspInit+0x248>)
 80040ee:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80040f0:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_I2S_MspInit+0x244>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040f6:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <HAL_I2S_MspInit+0x244>)
 80040f8:	2240      	movs	r2, #64	; 0x40
 80040fa:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_I2S_MspInit+0x244>)
 80040fe:	2200      	movs	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004102:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <HAL_I2S_MspInit+0x244>)
 8004104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004108:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800410a:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_I2S_MspInit+0x244>)
 800410c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004110:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004112:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_I2S_MspInit+0x244>)
 8004114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004118:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <HAL_I2S_MspInit+0x244>)
 800411c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004120:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_I2S_MspInit+0x244>)
 8004124:	2200      	movs	r2, #0
 8004126:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_I2S_MspInit+0x244>)
 800412a:	2200      	movs	r2, #0
 800412c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800412e:	4811      	ldr	r0, [pc, #68]	; (8004174 <HAL_I2S_MspInit+0x244>)
 8004130:	f000 fcb4 	bl	8004a9c <HAL_DMA_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2S_MspInit+0x20e>
      Error_Handler();
 800413a:	f7ff fec9 	bl	8003ed0 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <HAL_I2S_MspInit+0x244>)
 8004142:	639a      	str	r2, [r3, #56]	; 0x38
 8004144:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <HAL_I2S_MspInit+0x244>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6393      	str	r3, [r2, #56]	; 0x38
}
 800414a:	bf00      	nop
 800414c:	3738      	adds	r7, #56	; 0x38
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40003800 	.word	0x40003800
 8004158:	40023800 	.word	0x40023800
 800415c:	40020800 	.word	0x40020800
 8004160:	40020400 	.word	0x40020400
 8004164:	20000e48 	.word	0x20000e48
 8004168:	40026058 	.word	0x40026058
 800416c:	40003c00 	.word	0x40003c00
 8004170:	40020000 	.word	0x40020000
 8004174:	20000ea8 	.word	0x20000ea8
 8004178:	40026088 	.word	0x40026088

0800417c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d115      	bne.n	80041ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <HAL_TIM_Base_MspInit+0x48>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a0b      	ldr	r2, [pc, #44]	; (80041c4 <HAL_TIM_Base_MspInit+0x48>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_TIM_Base_MspInit+0x48>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2100      	movs	r1, #0
 80041ae:	201c      	movs	r0, #28
 80041b0:	f000 fc3d 	bl	8004a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041b4:	201c      	movs	r0, #28
 80041b6:	f000 fc56 	bl	8004a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800

080041c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_UART_MspInit+0x94>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d133      	bne.n	8004252 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <HAL_UART_MspInit+0x98>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <HAL_UART_MspInit+0x98>)
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_UART_MspInit+0x98>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <HAL_UART_MspInit+0x98>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	4a14      	ldr	r2, [pc, #80]	; (8004260 <HAL_UART_MspInit+0x98>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	6313      	str	r3, [r2, #48]	; 0x30
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_UART_MspInit+0x98>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004222:	230c      	movs	r3, #12
 8004224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004226:	2302      	movs	r3, #2
 8004228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800422e:	2303      	movs	r3, #3
 8004230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004232:	2307      	movs	r3, #7
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	f107 0314 	add.w	r3, r7, #20
 800423a:	4619      	mov	r1, r3
 800423c:	4809      	ldr	r0, [pc, #36]	; (8004264 <HAL_UART_MspInit+0x9c>)
 800423e:	f001 f82f 	bl	80052a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004242:	2200      	movs	r2, #0
 8004244:	2100      	movs	r1, #0
 8004246:	2026      	movs	r0, #38	; 0x26
 8004248:	f000 fbf1 	bl	8004a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800424c:	2026      	movs	r0, #38	; 0x26
 800424e:	f000 fc0a 	bl	8004a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004252:	bf00      	nop
 8004254:	3728      	adds	r7, #40	; 0x28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40004400 	.word	0x40004400
 8004260:	40023800 	.word	0x40023800
 8004264:	40020000 	.word	0x40020000

08004268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800426c:	e7fe      	b.n	800426c <NMI_Handler+0x4>

0800426e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004272:	e7fe      	b.n	8004272 <HardFault_Handler+0x4>

08004274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004278:	e7fe      	b.n	8004278 <MemManage_Handler+0x4>

0800427a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800427e:	e7fe      	b.n	800427e <BusFault_Handler+0x4>

08004280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004284:	e7fe      	b.n	8004284 <UsageFault_Handler+0x4>

08004286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b4:	f000 fa9c 	bl	80047f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}

080042bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80042c0:	4802      	ldr	r0, [pc, #8]	; (80042cc <DMA1_Stream3_IRQHandler+0x10>)
 80042c2:	f000 fd83 	bl	8004dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000e48 	.word	0x20000e48

080042d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <DMA1_Stream5_IRQHandler+0x10>)
 80042d6:	f000 fd79 	bl	8004dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000ea8 	.word	0x20000ea8

080042e4 <TIM2_IRQHandler>:
  */
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (mTransmitting == 0 && mReceivedMessageComplete) {
 80042e8:	4b10      	ldr	r3, [pc, #64]	; (800432c <TIM2_IRQHandler+0x48>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d117      	bne.n	8004320 <TIM2_IRQHandler+0x3c>
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <TIM2_IRQHandler+0x4c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <TIM2_IRQHandler+0x3c>

		mReceivedMessageComplete = 0;
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <TIM2_IRQHandler+0x4c>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
		process_received_message();
 80042fe:	f000 f9f1 	bl	80046e4 <_Z24process_received_messagev>
		process_levels_update_message();
 8004302:	f000 f95f 	bl	80045c4 <_Z29process_levels_update_messagev>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)buffer, strlen(buffer));
 8004306:	480b      	ldr	r0, [pc, #44]	; (8004334 <TIM2_IRQHandler+0x50>)
 8004308:	f7fb ff5e 	bl	80001c8 <strlen>
 800430c:	4603      	mov	r3, r0
 800430e:	b29b      	uxth	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	4908      	ldr	r1, [pc, #32]	; (8004334 <TIM2_IRQHandler+0x50>)
 8004314:	4808      	ldr	r0, [pc, #32]	; (8004338 <TIM2_IRQHandler+0x54>)
 8004316:	f003 fa30 	bl	800777a <HAL_UART_Transmit_IT>
		mTransmitting = 1;
 800431a:	4b04      	ldr	r3, [pc, #16]	; (800432c <TIM2_IRQHandler+0x48>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004320:	4806      	ldr	r0, [pc, #24]	; (800433c <TIM2_IRQHandler+0x58>)
 8004322:	f002 fe15 	bl	8006f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20002264 	.word	0x20002264
 8004330:	20002268 	.word	0x20002268
 8004334:	20000d84 	.word	0x20000d84
 8004338:	20000f50 	.word	0x20000f50
 800433c:	20000f08 	.word	0x20000f08

08004340 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004344:	4802      	ldr	r0, [pc, #8]	; (8004350 <USART2_IRQHandler+0x10>)
 8004346:	f003 fa8d 	bl	8007864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000f50 	.word	0x20000f50

08004354 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <HAL_UART_RxCpltCallback+0x58>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d11e      	bne.n	80043a4 <HAL_UART_RxCpltCallback+0x50>
	{
		if(buffer[buffer_index-1] == '\n') {
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_UART_RxCpltCallback+0x5c>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	3b01      	subs	r3, #1
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <HAL_UART_RxCpltCallback+0x60>)
 800436e:	5cd3      	ldrb	r3, [r2, r3]
 8004370:	2b0a      	cmp	r3, #10
 8004372:	d109      	bne.n	8004388 <HAL_UART_RxCpltCallback+0x34>
			buffer[buffer_index-1] = '\0';
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <HAL_UART_RxCpltCallback+0x5c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	3b01      	subs	r3, #1
 800437a:	4a0e      	ldr	r2, [pc, #56]	; (80043b4 <HAL_UART_RxCpltCallback+0x60>)
 800437c:	2100      	movs	r1, #0
 800437e:	54d1      	strb	r1, [r2, r3]
			mReceivedMessageComplete = 1;
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <HAL_UART_RxCpltCallback+0x64>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]
		} else {
			/* Receive one byte in interrupt mode */
			HAL_UART_Receive_IT(&huart2, (uint8_t*)&buffer[buffer_index++], 1);
		}
	}
}
 8004386:	e00d      	b.n	80043a4 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Receive_IT(&huart2, (uint8_t*)&buffer[buffer_index++], 1);
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_UART_RxCpltCallback+0x5c>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	b2d1      	uxtb	r1, r2
 8004390:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_UART_RxCpltCallback+0x5c>)
 8004392:	7011      	strb	r1, [r2, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_UART_RxCpltCallback+0x60>)
 8004398:	4413      	add	r3, r2
 800439a:	2201      	movs	r2, #1
 800439c:	4619      	mov	r1, r3
 800439e:	4807      	ldr	r0, [pc, #28]	; (80043bc <HAL_UART_RxCpltCallback+0x68>)
 80043a0:	f003 fa30 	bl	8007804 <HAL_UART_Receive_IT>
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40004400 	.word	0x40004400
 80043b0:	20000db7 	.word	0x20000db7
 80043b4:	20000d84 	.word	0x20000d84
 80043b8:	20002268 	.word	0x20002268
 80043bc:	20000f50 	.word	0x20000f50

080043c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_UART_TxCpltCallback+0x54>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d11b      	bne.n	800440a <HAL_UART_TxCpltCallback+0x4a>
	{
		mTransmitting = 0;
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_UART_TxCpltCallback+0x58>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
		memset(buffer, 0, sizeof(buffer));
 80043d8:	2232      	movs	r2, #50	; 0x32
 80043da:	2100      	movs	r1, #0
 80043dc:	480f      	ldr	r0, [pc, #60]	; (800441c <HAL_UART_TxCpltCallback+0x5c>)
 80043de:	f006 fa41 	bl	800a864 <memset>
		buffer_index = 0;
 80043e2:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <HAL_UART_TxCpltCallback+0x60>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
		timer_count = 0;
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_UART_TxCpltCallback+0x64>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
	    /* Receive one byte in interrupt mode */
	    HAL_UART_Receive_IT(&huart2, (uint8_t*)&buffer[buffer_index++], 1);
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <HAL_UART_TxCpltCallback+0x60>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	b2d1      	uxtb	r1, r2
 80043f6:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <HAL_UART_TxCpltCallback+0x60>)
 80043f8:	7011      	strb	r1, [r2, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	4b07      	ldr	r3, [pc, #28]	; (800441c <HAL_UART_TxCpltCallback+0x5c>)
 80043fe:	4413      	add	r3, r2
 8004400:	2201      	movs	r2, #1
 8004402:	4619      	mov	r1, r3
 8004404:	4808      	ldr	r0, [pc, #32]	; (8004428 <HAL_UART_TxCpltCallback+0x68>)
 8004406:	f003 f9fd 	bl	8007804 <HAL_UART_Receive_IT>
	}
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40004400 	.word	0x40004400
 8004418:	20002264 	.word	0x20002264
 800441c:	20000d84 	.word	0x20000d84
 8004420:	20000db7 	.word	0x20000db7
 8004424:	20000db6 	.word	0x20000db6
 8004428:	20000f50 	.word	0x20000f50

0800442c <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	mTransmitting = 0;
 8004434:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <HAL_UART_ErrorCallback+0x48>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
	memset(buffer, 0, sizeof(buffer));
 800443a:	2232      	movs	r2, #50	; 0x32
 800443c:	2100      	movs	r1, #0
 800443e:	480e      	ldr	r0, [pc, #56]	; (8004478 <HAL_UART_ErrorCallback+0x4c>)
 8004440:	f006 fa10 	bl	800a864 <memset>
	buffer_index = 0;
 8004444:	4b0d      	ldr	r3, [pc, #52]	; (800447c <HAL_UART_ErrorCallback+0x50>)
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <HAL_UART_ErrorCallback+0x54>)
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
    /* Receive one byte in interrupt mode */
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&buffer[buffer_index++], 1);
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_UART_ErrorCallback+0x50>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	b2d1      	uxtb	r1, r2
 8004458:	4a08      	ldr	r2, [pc, #32]	; (800447c <HAL_UART_ErrorCallback+0x50>)
 800445a:	7011      	strb	r1, [r2, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_UART_ErrorCallback+0x4c>)
 8004460:	4413      	add	r3, r2
 8004462:	2201      	movs	r2, #1
 8004464:	4619      	mov	r1, r3
 8004466:	4807      	ldr	r0, [pc, #28]	; (8004484 <HAL_UART_ErrorCallback+0x58>)
 8004468:	f003 f9cc 	bl	8007804 <HAL_UART_Receive_IT>
}
 800446c:	bf00      	nop
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20002264 	.word	0x20002264
 8004478:	20000d84 	.word	0x20000d84
 800447c:	20000db7 	.word	0x20000db7
 8004480:	20000db6 	.word	0x20000db6
 8004484:	20000f50 	.word	0x20000f50

08004488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
	return 1;
 800448c:	2301      	movs	r3, #1
}
 800448e:	4618      	mov	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <_kill>:

int _kill(int pid, int sig)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044a2:	f006 f997 	bl	800a7d4 <__errno>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2216      	movs	r2, #22
 80044aa:	601a      	str	r2, [r3, #0]
	return -1;
 80044ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_exit>:

void _exit (int status)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80044c0:	f04f 31ff 	mov.w	r1, #4294967295
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ffe7 	bl	8004498 <_kill>
	while (1) {}		/* Make sure we hang here */
 80044ca:	e7fe      	b.n	80044ca <_exit+0x12>

080044cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <_sbrk+0x5c>)
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <_sbrk+0x60>)
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <_sbrk+0x64>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <_sbrk+0x64>)
 80044ea:	4a12      	ldr	r2, [pc, #72]	; (8004534 <_sbrk+0x68>)
 80044ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ee:	4b10      	ldr	r3, [pc, #64]	; (8004530 <_sbrk+0x64>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d207      	bcs.n	800450c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044fc:	f006 f96a 	bl	800a7d4 <__errno>
 8004500:	4603      	mov	r3, r0
 8004502:	220c      	movs	r2, #12
 8004504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	e009      	b.n	8004520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <_sbrk+0x64>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <_sbrk+0x64>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	4a05      	ldr	r2, [pc, #20]	; (8004530 <_sbrk+0x64>)
 800451c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20020000 	.word	0x20020000
 800452c:	00000400 	.word	0x00000400
 8004530:	2000226c 	.word	0x2000226c
 8004534:	20002290 	.word	0x20002290

08004538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <SystemInit+0x20>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	4a05      	ldr	r2, [pc, #20]	; (8004558 <SystemInit+0x20>)
 8004544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <_Z9get_leveli>:
#include "string.h"

tone_intensity_level bass_intensity_level = NONE;
tone_intensity_level treble_intensity_level = NONE;

tone_intensity_level get_level(int token_level) {
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

	tone_intensity_level level = NEUTRAL;
 8004564:	2304      	movs	r3, #4
 8004566:	73fb      	strb	r3, [r7, #15]

	if (token_level < -10) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f113 0f0a 	cmn.w	r3, #10
 800456e:	da10      	bge.n	8004592 <_Z9get_leveli+0x36>

		if (token_level < -40) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8004576:	da02      	bge.n	800457e <_Z9get_leveli+0x22>
			level = LOW_STRONG;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
 800457c:	e01a      	b.n	80045b4 <_Z9get_leveli+0x58>
		} else if (token_level < -30) {
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f113 0f1e 	cmn.w	r3, #30
 8004584:	da02      	bge.n	800458c <_Z9get_leveli+0x30>
			level = LOW_MODERATE;
 8004586:	2302      	movs	r3, #2
 8004588:	73fb      	strb	r3, [r7, #15]
 800458a:	e013      	b.n	80045b4 <_Z9get_leveli+0x58>
		} else {
			level = LOW_WEAK;
 800458c:	2303      	movs	r3, #3
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e010      	b.n	80045b4 <_Z9get_leveli+0x58>
		}
	} else if (token_level > 10) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b0a      	cmp	r3, #10
 8004596:	dd0d      	ble.n	80045b4 <_Z9get_leveli+0x58>

		if (token_level > 40) {
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b28      	cmp	r3, #40	; 0x28
 800459c:	dd02      	ble.n	80045a4 <_Z9get_leveli+0x48>
			level = HIGH_STRONG;
 800459e:	2307      	movs	r3, #7
 80045a0:	73fb      	strb	r3, [r7, #15]
 80045a2:	e007      	b.n	80045b4 <_Z9get_leveli+0x58>
		} else if (token_level > 30) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b1e      	cmp	r3, #30
 80045a8:	dd02      	ble.n	80045b0 <_Z9get_leveli+0x54>
			level = HIGH_MODERATE;
 80045aa:	2306      	movs	r3, #6
 80045ac:	73fb      	strb	r3, [r7, #15]
 80045ae:	e001      	b.n	80045b4 <_Z9get_leveli+0x58>
		} else {
			level = HIGH_WEAK;
 80045b0:	2305      	movs	r3, #5
 80045b2:	73fb      	strb	r3, [r7, #15]
		}
	}
	return level;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <_Z29process_levels_update_messagev>:

void process_levels_update_message() {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0

	memset(buffer, 0, sizeof(buffer));
 80045ca:	2232      	movs	r2, #50	; 0x32
 80045cc:	2100      	movs	r1, #0
 80045ce:	483c      	ldr	r0, [pc, #240]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 80045d0:	f006 f948 	bl	800a864 <memset>
	buffer_index = 0;
 80045d4:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <_Z29process_levels_update_messagev+0x100>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <_Z29process_levels_update_messagev+0x104>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]

	char int_str_buffer[15];
	strcat(buffer, "VOL=");
 80045e0:	4837      	ldr	r0, [pc, #220]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 80045e2:	f7fb fdf1 	bl	80001c8 <strlen>
 80045e6:	4603      	mov	r3, r0
 80045e8:	461a      	mov	r2, r3
 80045ea:	4b35      	ldr	r3, [pc, #212]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 80045ec:	4413      	add	r3, r2
 80045ee:	4a37      	ldr	r2, [pc, #220]	; (80046cc <_Z29process_levels_update_messagev+0x108>)
 80045f0:	6810      	ldr	r0, [r2, #0]
 80045f2:	6018      	str	r0, [r3, #0]
 80045f4:	7912      	ldrb	r2, [r2, #4]
 80045f6:	711a      	strb	r2, [r3, #4]
	strcat(buffer, int2char(token_levels[token_volume], int_str_buffer));
 80045f8:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <_Z29process_levels_update_messagev+0x10c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	463a      	mov	r2, r7
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe fe49 	bl	8003298 <_Z8int2chariPc>
 8004606:	4603      	mov	r3, r0
 8004608:	4619      	mov	r1, r3
 800460a:	482d      	ldr	r0, [pc, #180]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 800460c:	f006 fa30 	bl	800aa70 <strcat>
	strcat(buffer, " BAS=");
 8004610:	482b      	ldr	r0, [pc, #172]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 8004612:	f7fb fdd9 	bl	80001c8 <strlen>
 8004616:	4603      	mov	r3, r0
 8004618:	461a      	mov	r2, r3
 800461a:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 800461c:	4413      	add	r3, r2
 800461e:	4a2d      	ldr	r2, [pc, #180]	; (80046d4 <_Z29process_levels_update_messagev+0x110>)
 8004620:	6810      	ldr	r0, [r2, #0]
 8004622:	6018      	str	r0, [r3, #0]
 8004624:	8892      	ldrh	r2, [r2, #4]
 8004626:	809a      	strh	r2, [r3, #4]
	strcat(buffer, int2char(token_levels[token_bass], int_str_buffer));
 8004628:	4b29      	ldr	r3, [pc, #164]	; (80046d0 <_Z29process_levels_update_messagev+0x10c>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	463a      	mov	r2, r7
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe fe31 	bl	8003298 <_Z8int2chariPc>
 8004636:	4603      	mov	r3, r0
 8004638:	4619      	mov	r1, r3
 800463a:	4821      	ldr	r0, [pc, #132]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 800463c:	f006 fa18 	bl	800aa70 <strcat>
	strcat(buffer, " TRE=");
 8004640:	481f      	ldr	r0, [pc, #124]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 8004642:	f7fb fdc1 	bl	80001c8 <strlen>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 800464c:	4413      	add	r3, r2
 800464e:	4a22      	ldr	r2, [pc, #136]	; (80046d8 <_Z29process_levels_update_messagev+0x114>)
 8004650:	6810      	ldr	r0, [r2, #0]
 8004652:	6018      	str	r0, [r3, #0]
 8004654:	8892      	ldrh	r2, [r2, #4]
 8004656:	809a      	strh	r2, [r3, #4]
	strcat(buffer, int2char(token_levels[token_treble], int_str_buffer));
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <_Z29process_levels_update_messagev+0x10c>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	463a      	mov	r2, r7
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe fe19 	bl	8003298 <_Z8int2chariPc>
 8004666:	4603      	mov	r3, r0
 8004668:	4619      	mov	r1, r3
 800466a:	4815      	ldr	r0, [pc, #84]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 800466c:	f006 fa00 	bl	800aa70 <strcat>
	strcat(buffer, " BAL=");
 8004670:	4813      	ldr	r0, [pc, #76]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 8004672:	f7fb fda9 	bl	80001c8 <strlen>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 800467c:	4413      	add	r3, r2
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <_Z29process_levels_update_messagev+0x118>)
 8004680:	6810      	ldr	r0, [r2, #0]
 8004682:	6018      	str	r0, [r3, #0]
 8004684:	8892      	ldrh	r2, [r2, #4]
 8004686:	809a      	strh	r2, [r3, #4]
	strcat(buffer, int2char(token_levels[token_balance], int_str_buffer));
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <_Z29process_levels_update_messagev+0x10c>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	463a      	mov	r2, r7
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fe01 	bl	8003298 <_Z8int2chariPc>
 8004696:	4603      	mov	r3, r0
 8004698:	4619      	mov	r1, r3
 800469a:	4809      	ldr	r0, [pc, #36]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 800469c:	f006 f9e8 	bl	800aa70 <strcat>
	strcat(buffer, "\n");
 80046a0:	4807      	ldr	r0, [pc, #28]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 80046a2:	f7fb fd91 	bl	80001c8 <strlen>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <_Z29process_levels_update_messagev+0xfc>)
 80046ac:	4413      	add	r3, r2
 80046ae:	490c      	ldr	r1, [pc, #48]	; (80046e0 <_Z29process_levels_update_messagev+0x11c>)
 80046b0:	461a      	mov	r2, r3
 80046b2:	460b      	mov	r3, r1
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	8013      	strh	r3, [r2, #0]
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000d84 	.word	0x20000d84
 80046c4:	20000db7 	.word	0x20000db7
 80046c8:	20000db6 	.word	0x20000db6
 80046cc:	0800ab10 	.word	0x0800ab10
 80046d0:	20000d74 	.word	0x20000d74
 80046d4:	0800ab18 	.word	0x0800ab18
 80046d8:	0800ab20 	.word	0x0800ab20
 80046dc:	0800ab28 	.word	0x0800ab28
 80046e0:	0800ab30 	.word	0x0800ab30

080046e4 <_Z24process_received_messagev>:

void process_received_message()
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
	process_token_updates(buffer);
 80046e8:	4802      	ldr	r0, [pc, #8]	; (80046f4 <_Z24process_received_messagev+0x10>)
 80046ea:	f7fe fd11 	bl	8003110 <_Z21process_token_updatesPc>
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000d84 	.word	0x20000d84

080046f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80046f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046fc:	480d      	ldr	r0, [pc, #52]	; (8004734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046fe:	490e      	ldr	r1, [pc, #56]	; (8004738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004700:	4a0e      	ldr	r2, [pc, #56]	; (800473c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004704:	e002      	b.n	800470c <LoopCopyDataInit>

08004706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800470a:	3304      	adds	r3, #4

0800470c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800470c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800470e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004710:	d3f9      	bcc.n	8004706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004712:	4a0b      	ldr	r2, [pc, #44]	; (8004740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004714:	4c0b      	ldr	r4, [pc, #44]	; (8004744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004718:	e001      	b.n	800471e <LoopFillZerobss>

0800471a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800471a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800471c:	3204      	adds	r2, #4

0800471e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800471e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004720:	d3fb      	bcc.n	800471a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004722:	f7ff ff09 	bl	8004538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004726:	f006 f85b 	bl	800a7e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800472a:	f7ff f841 	bl	80037b0 <main>
  bx  lr    
 800472e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004738:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 800473c:	0800ada0 	.word	0x0800ada0
  ldr r2, =_sbss
 8004740:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8004744:	20002290 	.word	0x20002290

08004748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004748:	e7fe      	b.n	8004748 <ADC_IRQHandler>
	...

0800474c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004750:	4b0e      	ldr	r3, [pc, #56]	; (800478c <HAL_Init+0x40>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a0d      	ldr	r2, [pc, #52]	; (800478c <HAL_Init+0x40>)
 8004756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800475a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_Init+0x40>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a0a      	ldr	r2, [pc, #40]	; (800478c <HAL_Init+0x40>)
 8004762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <HAL_Init+0x40>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a07      	ldr	r2, [pc, #28]	; (800478c <HAL_Init+0x40>)
 800476e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004774:	2003      	movs	r0, #3
 8004776:	f000 f94f 	bl	8004a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800477a:	2000      	movs	r0, #0
 800477c:	f000 f808 	bl	8004790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004780:	f7ff fbae 	bl	8003ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023c00 	.word	0x40023c00

08004790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_InitTick+0x54>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <HAL_InitTick+0x58>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	4619      	mov	r1, r3
 80047a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f967 	bl	8004a82 <HAL_SYSTICK_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00e      	b.n	80047dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	d80a      	bhi.n	80047da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047c4:	2200      	movs	r2, #0
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	f000 f92f 	bl	8004a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047d0:	4a06      	ldr	r2, [pc, #24]	; (80047ec <HAL_InitTick+0x5c>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e000      	b.n	80047dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000230 	.word	0x20000230
 80047e8:	20000238 	.word	0x20000238
 80047ec:	20000234 	.word	0x20000234

080047f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_IncTick+0x20>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_IncTick+0x24>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4413      	add	r3, r2
 8004800:	4a04      	ldr	r2, [pc, #16]	; (8004814 <HAL_IncTick+0x24>)
 8004802:	6013      	str	r3, [r2, #0]
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000238 	.word	0x20000238
 8004814:	2000227c 	.word	0x2000227c

08004818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return uwTick;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <HAL_GetTick+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	2000227c 	.word	0x2000227c

08004830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004838:	f7ff ffee 	bl	8004818 <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d005      	beq.n	8004856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_Delay+0x44>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004856:	bf00      	nop
 8004858:	f7ff ffde 	bl	8004818 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	429a      	cmp	r2, r3
 8004866:	d8f7      	bhi.n	8004858 <HAL_Delay+0x28>
  {
  }
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000238 	.word	0x20000238

08004878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <__NVIC_SetPriorityGrouping+0x44>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004894:	4013      	ands	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048aa:	4a04      	ldr	r2, [pc, #16]	; (80048bc <__NVIC_SetPriorityGrouping+0x44>)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	60d3      	str	r3, [r2, #12]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	e000ed00 	.word	0xe000ed00

080048c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <__NVIC_GetPriorityGrouping+0x18>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	0a1b      	lsrs	r3, r3, #8
 80048ca:	f003 0307 	and.w	r3, r3, #7
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	db0b      	blt.n	8004906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	4907      	ldr	r1, [pc, #28]	; (8004914 <__NVIC_EnableIRQ+0x38>)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2001      	movs	r0, #1
 80048fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	e000e100 	.word	0xe000e100

08004918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004928:	2b00      	cmp	r3, #0
 800492a:	db0a      	blt.n	8004942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	490c      	ldr	r1, [pc, #48]	; (8004964 <__NVIC_SetPriority+0x4c>)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	0112      	lsls	r2, r2, #4
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	440b      	add	r3, r1
 800493c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004940:	e00a      	b.n	8004958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4908      	ldr	r1, [pc, #32]	; (8004968 <__NVIC_SetPriority+0x50>)
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3b04      	subs	r3, #4
 8004950:	0112      	lsls	r2, r2, #4
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	440b      	add	r3, r1
 8004956:	761a      	strb	r2, [r3, #24]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000e100 	.word	0xe000e100
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	; 0x24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f1c3 0307 	rsb	r3, r3, #7
 8004986:	2b04      	cmp	r3, #4
 8004988:	bf28      	it	cs
 800498a:	2304      	movcs	r3, #4
 800498c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3304      	adds	r3, #4
 8004992:	2b06      	cmp	r3, #6
 8004994:	d902      	bls.n	800499c <NVIC_EncodePriority+0x30>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3b03      	subs	r3, #3
 800499a:	e000      	b.n	800499e <NVIC_EncodePriority+0x32>
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43da      	mvns	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	401a      	ands	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b4:	f04f 31ff 	mov.w	r1, #4294967295
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	43d9      	mvns	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c4:	4313      	orrs	r3, r2
         );
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3724      	adds	r7, #36	; 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049e4:	d301      	bcc.n	80049ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049e6:	2301      	movs	r3, #1
 80049e8:	e00f      	b.n	8004a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <SysTick_Config+0x40>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049f2:	210f      	movs	r1, #15
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	f7ff ff8e 	bl	8004918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <SysTick_Config+0x40>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a02:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <SysTick_Config+0x40>)
 8004a04:	2207      	movs	r2, #7
 8004a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	e000e010 	.word	0xe000e010

08004a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff29 	bl	8004878 <__NVIC_SetPriorityGrouping>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b086      	sub	sp, #24
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4603      	mov	r3, r0
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a40:	f7ff ff3e 	bl	80048c0 <__NVIC_GetPriorityGrouping>
 8004a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	6978      	ldr	r0, [r7, #20]
 8004a4c:	f7ff ff8e 	bl	800496c <NVIC_EncodePriority>
 8004a50:	4602      	mov	r2, r0
 8004a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a56:	4611      	mov	r1, r2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff5d 	bl	8004918 <__NVIC_SetPriority>
}
 8004a5e:	bf00      	nop
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff ff31 	bl	80048dc <__NVIC_EnableIRQ>
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff ffa2 	bl	80049d4 <SysTick_Config>
 8004a90:	4603      	mov	r3, r0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004aa8:	f7ff feb6 	bl	8004818 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e099      	b.n	8004bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ad8:	e00f      	b.n	8004afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ada:	f7ff fe9d 	bl	8004818 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	d908      	bls.n	8004afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2203      	movs	r2, #3
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e078      	b.n	8004bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e8      	bne.n	8004ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <HAL_DMA_Init+0x158>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d107      	bne.n	8004b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d117      	bne.n	8004bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00e      	beq.n	8004bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fb01 	bl	80051a8 <DMA_CheckFifoParam>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2240      	movs	r2, #64	; 0x40
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e016      	b.n	8004bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fab8 	bl	800513c <DMA_CalcBaseAndBitshift>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd4:	223f      	movs	r2, #63	; 0x3f
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	f010803f 	.word	0xf010803f

08004bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_DMA_Start_IT+0x26>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e040      	b.n	8004ca0 <HAL_DMA_Start_IT+0xa8>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d12f      	bne.n	8004c92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fa4a 	bl	80050e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c50:	223f      	movs	r2, #63	; 0x3f
 8004c52:	409a      	lsls	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0216 	orr.w	r2, r2, #22
 8004c66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e005      	b.n	8004c9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cb6:	f7ff fdaf 	bl	8004818 <HAL_GetTick>
 8004cba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d008      	beq.n	8004cda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2280      	movs	r2, #128	; 0x80
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e052      	b.n	8004d80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0216 	bic.w	r2, r2, #22
 8004ce8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <HAL_DMA_Abort+0x62>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0208 	bic.w	r2, r2, #8
 8004d18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d2a:	e013      	b.n	8004d54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d2c:	f7ff fd74 	bl	8004818 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d90c      	bls.n	8004d54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e015      	b.n	8004d80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e4      	bne.n	8004d2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d66:	223f      	movs	r2, #63	; 0x3f
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d004      	beq.n	8004da6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e00c      	b.n	8004dc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2205      	movs	r2, #5
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004dd8:	4b92      	ldr	r3, [pc, #584]	; (8005024 <HAL_DMA_IRQHandler+0x258>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a92      	ldr	r2, [pc, #584]	; (8005028 <HAL_DMA_IRQHandler+0x25c>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	0a9b      	lsrs	r3, r3, #10
 8004de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df6:	2208      	movs	r2, #8
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01a      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d013      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0204 	bic.w	r2, r2, #4
 8004e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	2208      	movs	r2, #8
 8004e26:	409a      	lsls	r2, r3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	f043 0201 	orr.w	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d012      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f043 0202 	orr.w	r2, r3, #2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	2204      	movs	r2, #4
 8004e74:	409a      	lsls	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d012      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	2204      	movs	r2, #4
 8004e92:	409a      	lsls	r2, r3
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d043      	beq.n	8004f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d03c      	beq.n	8004f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d018      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d108      	bne.n	8004efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d024      	beq.n	8004f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
 8004efa:	e01f      	b.n	8004f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01b      	beq.n	8004f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
 8004f0c:	e016      	b.n	8004f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d107      	bne.n	8004f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0208 	bic.w	r2, r2, #8
 8004f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f40:	2220      	movs	r2, #32
 8004f42:	409a      	lsls	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 808e 	beq.w	800506a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8086 	beq.w	800506a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f62:	2220      	movs	r2, #32
 8004f64:	409a      	lsls	r2, r3
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	d136      	bne.n	8004fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0216 	bic.w	r2, r2, #22
 8004f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <HAL_DMA_IRQHandler+0x1da>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0208 	bic.w	r2, r2, #8
 8004fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fba:	223f      	movs	r2, #63	; 0x3f
 8004fbc:	409a      	lsls	r2, r3
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d07d      	beq.n	80050d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
        }
        return;
 8004fe2:	e078      	b.n	80050d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01c      	beq.n	800502c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d108      	bne.n	8005012 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	2b00      	cmp	r3, #0
 8005006:	d030      	beq.n	800506a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	4798      	blx	r3
 8005010:	e02b      	b.n	800506a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d027      	beq.n	800506a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	4798      	blx	r3
 8005022:	e022      	b.n	800506a <HAL_DMA_IRQHandler+0x29e>
 8005024:	20000230 	.word	0x20000230
 8005028:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10f      	bne.n	800505a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0210 	bic.w	r2, r2, #16
 8005048:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	2b00      	cmp	r3, #0
 8005070:	d032      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d022      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2205      	movs	r2, #5
 8005082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0201 	bic.w	r2, r2, #1
 8005094:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	3301      	adds	r3, #1
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d307      	bcc.n	80050b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f2      	bne.n	8005096 <HAL_DMA_IRQHandler+0x2ca>
 80050b0:	e000      	b.n	80050b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80050b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
 80050d4:	e000      	b.n	80050d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80050d6:	bf00      	nop
    }
  }
}
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop

080050e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d108      	bne.n	8005120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800511e:	e007      	b.n	8005130 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	3b10      	subs	r3, #16
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <DMA_CalcBaseAndBitshift+0x64>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <DMA_CalcBaseAndBitshift+0x68>)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d909      	bls.n	800517e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005172:	f023 0303 	bic.w	r3, r3, #3
 8005176:	1d1a      	adds	r2, r3, #4
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	659a      	str	r2, [r3, #88]	; 0x58
 800517c:	e007      	b.n	800518e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	aaaaaaab 	.word	0xaaaaaaab
 80051a4:	0800ab6c 	.word	0x0800ab6c

080051a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11f      	bne.n	8005202 <DMA_CheckFifoParam+0x5a>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d856      	bhi.n	8005276 <DMA_CheckFifoParam+0xce>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <DMA_CheckFifoParam+0x28>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051f3 	.word	0x080051f3
 80051d8:	080051e1 	.word	0x080051e1
 80051dc:	08005277 	.word	0x08005277
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d046      	beq.n	800527a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f0:	e043      	b.n	800527a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051fa:	d140      	bne.n	800527e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005200:	e03d      	b.n	800527e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520a:	d121      	bne.n	8005250 <DMA_CheckFifoParam+0xa8>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b03      	cmp	r3, #3
 8005210:	d837      	bhi.n	8005282 <DMA_CheckFifoParam+0xda>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <DMA_CheckFifoParam+0x70>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	08005229 	.word	0x08005229
 800521c:	0800522f 	.word	0x0800522f
 8005220:	08005229 	.word	0x08005229
 8005224:	08005241 	.word	0x08005241
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
      break;
 800522c:	e030      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d025      	beq.n	8005286 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800523e:	e022      	b.n	8005286 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005248:	d11f      	bne.n	800528a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800524e:	e01c      	b.n	800528a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d903      	bls.n	800525e <DMA_CheckFifoParam+0xb6>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d003      	beq.n	8005264 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800525c:	e018      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
      break;
 8005262:	e015      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00e      	beq.n	800528e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      break;
 8005274:	e00b      	b.n	800528e <DMA_CheckFifoParam+0xe6>
      break;
 8005276:	bf00      	nop
 8005278:	e00a      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
      break;
 800527a:	bf00      	nop
 800527c:	e008      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
      break;
 800527e:	bf00      	nop
 8005280:	e006      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
      break;
 8005282:	bf00      	nop
 8005284:	e004      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
      break;
 8005286:	bf00      	nop
 8005288:	e002      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
      break;   
 800528a:	bf00      	nop
 800528c:	e000      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
      break;
 800528e:	bf00      	nop
    }
  } 
  
  return status; 
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop

080052a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b089      	sub	sp, #36	; 0x24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
 80052ba:	e16b      	b.n	8005594 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052bc:	2201      	movs	r2, #1
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4013      	ands	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	f040 815a 	bne.w	800558e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d005      	beq.n	80052f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d130      	bne.n	8005354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	2203      	movs	r2, #3
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43db      	mvns	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4013      	ands	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005328:	2201      	movs	r2, #1
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 0201 	and.w	r2, r3, #1
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2b03      	cmp	r3, #3
 800535e:	d017      	beq.n	8005390 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	2203      	movs	r2, #3
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d123      	bne.n	80053e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	08da      	lsrs	r2, r3, #3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3208      	adds	r2, #8
 80053a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	220f      	movs	r2, #15
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	08da      	lsrs	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3208      	adds	r2, #8
 80053de:	69b9      	ldr	r1, [r7, #24]
 80053e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	2203      	movs	r2, #3
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0203 	and.w	r2, r3, #3
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4313      	orrs	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80b4 	beq.w	800558e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	4b60      	ldr	r3, [pc, #384]	; (80055ac <HAL_GPIO_Init+0x30c>)
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	4a5f      	ldr	r2, [pc, #380]	; (80055ac <HAL_GPIO_Init+0x30c>)
 8005430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005434:	6453      	str	r3, [r2, #68]	; 0x44
 8005436:	4b5d      	ldr	r3, [pc, #372]	; (80055ac <HAL_GPIO_Init+0x30c>)
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005442:	4a5b      	ldr	r2, [pc, #364]	; (80055b0 <HAL_GPIO_Init+0x310>)
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	3302      	adds	r3, #2
 800544a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	220f      	movs	r2, #15
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4013      	ands	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a52      	ldr	r2, [pc, #328]	; (80055b4 <HAL_GPIO_Init+0x314>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d02b      	beq.n	80054c6 <HAL_GPIO_Init+0x226>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a51      	ldr	r2, [pc, #324]	; (80055b8 <HAL_GPIO_Init+0x318>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d025      	beq.n	80054c2 <HAL_GPIO_Init+0x222>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a50      	ldr	r2, [pc, #320]	; (80055bc <HAL_GPIO_Init+0x31c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01f      	beq.n	80054be <HAL_GPIO_Init+0x21e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a4f      	ldr	r2, [pc, #316]	; (80055c0 <HAL_GPIO_Init+0x320>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d019      	beq.n	80054ba <HAL_GPIO_Init+0x21a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a4e      	ldr	r2, [pc, #312]	; (80055c4 <HAL_GPIO_Init+0x324>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_GPIO_Init+0x216>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a4d      	ldr	r2, [pc, #308]	; (80055c8 <HAL_GPIO_Init+0x328>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00d      	beq.n	80054b2 <HAL_GPIO_Init+0x212>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a4c      	ldr	r2, [pc, #304]	; (80055cc <HAL_GPIO_Init+0x32c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d007      	beq.n	80054ae <HAL_GPIO_Init+0x20e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a4b      	ldr	r2, [pc, #300]	; (80055d0 <HAL_GPIO_Init+0x330>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d101      	bne.n	80054aa <HAL_GPIO_Init+0x20a>
 80054a6:	2307      	movs	r3, #7
 80054a8:	e00e      	b.n	80054c8 <HAL_GPIO_Init+0x228>
 80054aa:	2308      	movs	r3, #8
 80054ac:	e00c      	b.n	80054c8 <HAL_GPIO_Init+0x228>
 80054ae:	2306      	movs	r3, #6
 80054b0:	e00a      	b.n	80054c8 <HAL_GPIO_Init+0x228>
 80054b2:	2305      	movs	r3, #5
 80054b4:	e008      	b.n	80054c8 <HAL_GPIO_Init+0x228>
 80054b6:	2304      	movs	r3, #4
 80054b8:	e006      	b.n	80054c8 <HAL_GPIO_Init+0x228>
 80054ba:	2303      	movs	r3, #3
 80054bc:	e004      	b.n	80054c8 <HAL_GPIO_Init+0x228>
 80054be:	2302      	movs	r3, #2
 80054c0:	e002      	b.n	80054c8 <HAL_GPIO_Init+0x228>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <HAL_GPIO_Init+0x228>
 80054c6:	2300      	movs	r3, #0
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	f002 0203 	and.w	r2, r2, #3
 80054ce:	0092      	lsls	r2, r2, #2
 80054d0:	4093      	lsls	r3, r2
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054d8:	4935      	ldr	r1, [pc, #212]	; (80055b0 <HAL_GPIO_Init+0x310>)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	089b      	lsrs	r3, r3, #2
 80054de:	3302      	adds	r3, #2
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054e6:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <HAL_GPIO_Init+0x334>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	43db      	mvns	r3, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4013      	ands	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800550a:	4a32      	ldr	r2, [pc, #200]	; (80055d4 <HAL_GPIO_Init+0x334>)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005510:	4b30      	ldr	r3, [pc, #192]	; (80055d4 <HAL_GPIO_Init+0x334>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005534:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <HAL_GPIO_Init+0x334>)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800553a:	4b26      	ldr	r3, [pc, #152]	; (80055d4 <HAL_GPIO_Init+0x334>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800555e:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <HAL_GPIO_Init+0x334>)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_GPIO_Init+0x334>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005588:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <HAL_GPIO_Init+0x334>)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	3301      	adds	r3, #1
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b0f      	cmp	r3, #15
 8005598:	f67f ae90 	bls.w	80052bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	3724      	adds	r7, #36	; 0x24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40013800 	.word	0x40013800
 80055b4:	40020000 	.word	0x40020000
 80055b8:	40020400 	.word	0x40020400
 80055bc:	40020800 	.word	0x40020800
 80055c0:	40020c00 	.word	0x40020c00
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40021400 	.word	0x40021400
 80055cc:	40021800 	.word	0x40021800
 80055d0:	40021c00 	.word	0x40021c00
 80055d4:	40013c00 	.word	0x40013c00

080055d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e128      	b.n	800583c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a90      	ldr	r2, [pc, #576]	; (8005844 <HAL_I2S_Init+0x26c>)
 8005602:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fe fc93 	bl	8003f30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005620:	f023 030f 	bic.w	r3, r3, #15
 8005624:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2202      	movs	r2, #2
 800562c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d060      	beq.n	80056f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d102      	bne.n	8005644 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800563e:	2310      	movs	r3, #16
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e001      	b.n	8005648 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005644:	2320      	movs	r3, #32
 8005646:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b20      	cmp	r3, #32
 800564e:	d802      	bhi.n	8005656 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005656:	2001      	movs	r0, #1
 8005658:	f001 fb5c 	bl	8006d14 <HAL_RCCEx_GetPeriphCLKFreq>
 800565c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005666:	d125      	bne.n	80056b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d010      	beq.n	8005692 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	fbb2 f2f3 	udiv	r2, r2, r3
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	461a      	mov	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	3305      	adds	r3, #5
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	e01f      	b.n	80056d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	fbb2 f2f3 	udiv	r2, r2, r3
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ae:	3305      	adds	r3, #5
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	e00e      	b.n	80056d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	461a      	mov	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	3305      	adds	r3, #5
 80056d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4a5c      	ldr	r2, [pc, #368]	; (8005848 <HAL_I2S_Init+0x270>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	08db      	lsrs	r3, r3, #3
 80056dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e003      	b.n	8005700 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80056f8:	2302      	movs	r3, #2
 80056fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d902      	bls.n	800570c <HAL_I2S_Init+0x134>
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2bff      	cmp	r3, #255	; 0xff
 800570a:	d907      	bls.n	800571c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005710:	f043 0210 	orr.w	r2, r3, #16
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e08f      	b.n	800583c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	ea42 0103 	orr.w	r1, r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	430a      	orrs	r2, r1
 800572e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800573a:	f023 030f 	bic.w	r3, r3, #15
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6851      	ldr	r1, [r2, #4]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6892      	ldr	r2, [r2, #8]
 8005746:	4311      	orrs	r1, r2
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68d2      	ldr	r2, [r2, #12]
 800574c:	4311      	orrs	r1, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6992      	ldr	r2, [r2, #24]
 8005752:	430a      	orrs	r2, r1
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d161      	bne.n	800582c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a38      	ldr	r2, [pc, #224]	; (800584c <HAL_I2S_Init+0x274>)
 800576c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a37      	ldr	r2, [pc, #220]	; (8005850 <HAL_I2S_Init+0x278>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d101      	bne.n	800577c <HAL_I2S_Init+0x1a4>
 8005778:	4b36      	ldr	r3, [pc, #216]	; (8005854 <HAL_I2S_Init+0x27c>)
 800577a:	e001      	b.n	8005780 <HAL_I2S_Init+0x1a8>
 800577c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	4932      	ldr	r1, [pc, #200]	; (8005850 <HAL_I2S_Init+0x278>)
 8005788:	428a      	cmp	r2, r1
 800578a:	d101      	bne.n	8005790 <HAL_I2S_Init+0x1b8>
 800578c:	4a31      	ldr	r2, [pc, #196]	; (8005854 <HAL_I2S_Init+0x27c>)
 800578e:	e001      	b.n	8005794 <HAL_I2S_Init+0x1bc>
 8005790:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005794:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005798:	f023 030f 	bic.w	r3, r3, #15
 800579c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <HAL_I2S_Init+0x278>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d101      	bne.n	80057ac <HAL_I2S_Init+0x1d4>
 80057a8:	4b2a      	ldr	r3, [pc, #168]	; (8005854 <HAL_I2S_Init+0x27c>)
 80057aa:	e001      	b.n	80057b0 <HAL_I2S_Init+0x1d8>
 80057ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b0:	2202      	movs	r2, #2
 80057b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a25      	ldr	r2, [pc, #148]	; (8005850 <HAL_I2S_Init+0x278>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d101      	bne.n	80057c2 <HAL_I2S_Init+0x1ea>
 80057be:	4b25      	ldr	r3, [pc, #148]	; (8005854 <HAL_I2S_Init+0x27c>)
 80057c0:	e001      	b.n	80057c6 <HAL_I2S_Init+0x1ee>
 80057c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d2:	d003      	beq.n	80057dc <HAL_I2S_Init+0x204>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d103      	bne.n	80057e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80057dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	e001      	b.n	80057e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057f2:	4313      	orrs	r3, r2
 80057f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005806:	4313      	orrs	r3, r2
 8005808:	b29a      	uxth	r2, r3
 800580a:	897b      	ldrh	r3, [r7, #10]
 800580c:	4313      	orrs	r3, r2
 800580e:	b29b      	uxth	r3, r3
 8005810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005814:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a0d      	ldr	r2, [pc, #52]	; (8005850 <HAL_I2S_Init+0x278>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d101      	bne.n	8005824 <HAL_I2S_Init+0x24c>
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <HAL_I2S_Init+0x27c>)
 8005822:	e001      	b.n	8005828 <HAL_I2S_Init+0x250>
 8005824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005828:	897a      	ldrh	r2, [r7, #10]
 800582a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	08005cf7 	.word	0x08005cf7
 8005848:	cccccccd 	.word	0xcccccccd
 800584c:	08005e0d 	.word	0x08005e0d
 8005850:	40003800 	.word	0x40003800
 8005854:	40003400 	.word	0x40003400

08005858 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_I2S_Transmit_DMA+0x1a>
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e08e      	b.n	8005994 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_I2S_Transmit_DMA+0x2e>
 8005882:	2302      	movs	r3, #2
 8005884:	e086      	b.n	8005994 <HAL_I2S_Transmit_DMA+0x13c>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	d005      	beq.n	80058a6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
 80058a4:	e076      	b.n	8005994 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2203      	movs	r2, #3
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d002      	beq.n	80058d2 <HAL_I2S_Transmit_DMA+0x7a>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	d10a      	bne.n	80058e8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058e6:	e005      	b.n	80058f4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	88fa      	ldrh	r2, [r7, #6]
 80058ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	88fa      	ldrh	r2, [r7, #6]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	4a28      	ldr	r2, [pc, #160]	; (800599c <HAL_I2S_Transmit_DMA+0x144>)
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <HAL_I2S_Transmit_DMA+0x148>)
 8005902:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	4a26      	ldr	r2, [pc, #152]	; (80059a4 <HAL_I2S_Transmit_DMA+0x14c>)
 800590a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005914:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800591c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005922:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005924:	f7ff f968 	bl	8004bf8 <HAL_DMA_Start_IT>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00f      	beq.n	800594e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005932:	f043 0208 	orr.w	r2, r3, #8
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e022      	b.n	8005994 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005958:	2b00      	cmp	r3, #0
 800595a:	d107      	bne.n	800596c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69da      	ldr	r2, [r3, #28]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800596a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d107      	bne.n	800598a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0202 	orr.w	r2, r2, #2
 8005988:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	08005b77 	.word	0x08005b77
 80059a0:	08005b35 	.word	0x08005b35
 80059a4:	08005bf1 	.word	0x08005bf1

080059a8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_I2S_Receive_DMA+0x1a>
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e0a1      	b.n	8005b0a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_I2S_Receive_DMA+0x2e>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e099      	b.n	8005b0a <HAL_I2S_Receive_DMA+0x162>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d005      	beq.n	80059f6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80059f2:	2302      	movs	r3, #2
 80059f4:	e089      	b.n	8005b0a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2204      	movs	r2, #4
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d002      	beq.n	8005a22 <HAL_I2S_Receive_DMA+0x7a>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d10a      	bne.n	8005a38 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	865a      	strh	r2, [r3, #50]	; 0x32
 8005a36:	e005      	b.n	8005a44 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	88fa      	ldrh	r2, [r7, #6]
 8005a42:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a48:	4a32      	ldr	r2, [pc, #200]	; (8005b14 <HAL_I2S_Receive_DMA+0x16c>)
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a50:	4a31      	ldr	r2, [pc, #196]	; (8005b18 <HAL_I2S_Receive_DMA+0x170>)
 8005a52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a58:	4a30      	ldr	r2, [pc, #192]	; (8005b1c <HAL_I2S_Receive_DMA+0x174>)
 8005a5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6a:	d10a      	bne.n	8005a82 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005a98:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005a9a:	f7ff f8ad 	bl	8004bf8 <HAL_DMA_Start_IT>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00f      	beq.n	8005ac4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa8:	f043 0208 	orr.w	r2, r3, #8
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e022      	b.n	8005b0a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d107      	bne.n	8005ae2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ae0:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d107      	bne.n	8005b00 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	08005bd5 	.word	0x08005bd5
 8005b18:	08005b93 	.word	0x08005b93
 8005b1c:	08005bf1 	.word	0x08005bf1

08005b20 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10e      	bne.n	8005b68 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0202 	bic.w	r2, r2, #2
 8005b58:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7fe f971 	bl	8003e50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7fe f983 	bl	8003e90 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10e      	bne.n	8005bc6 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0201 	bic.w	r2, r2, #1
 8005bb6:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7fe f952 	bl	8003e70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7fe f964 	bl	8003eb0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0203 	bic.w	r2, r2, #3
 8005c0c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f043 0208 	orr.w	r2, r3, #8
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff ff76 	bl	8005b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	881a      	ldrh	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10e      	bne.n	8005c90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fe f8e0 	bl	8003e50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	b292      	uxth	r2, r2
 8005cac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	1c9a      	adds	r2, r3, #2
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10e      	bne.n	8005cee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7fe f8c1 	bl	8003e70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b086      	sub	sp, #24
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d13a      	bne.n	8005d88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d109      	bne.n	8005d30 <I2S_IRQHandler+0x3a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b40      	cmp	r3, #64	; 0x40
 8005d28:	d102      	bne.n	8005d30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff ffb4 	bl	8005c98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d126      	bne.n	8005d88 <I2S_IRQHandler+0x92>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d11f      	bne.n	8005d88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	f043 0202 	orr.w	r2, r3, #2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff fecc 	bl	8005b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d136      	bne.n	8005e02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d109      	bne.n	8005db2 <I2S_IRQHandler+0xbc>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da8:	2b80      	cmp	r3, #128	; 0x80
 8005daa:	d102      	bne.n	8005db2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ff45 	bl	8005c3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d122      	bne.n	8005e02 <I2S_IRQHandler+0x10c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d11b      	bne.n	8005e02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	f043 0204 	orr.w	r2, r3, #4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fe8f 	bl	8005b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e02:	bf00      	nop
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4aa2      	ldr	r2, [pc, #648]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d101      	bne.n	8005e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005e26:	4ba2      	ldr	r3, [pc, #648]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e28:	e001      	b.n	8005e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a9b      	ldr	r2, [pc, #620]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d101      	bne.n	8005e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005e44:	4b9a      	ldr	r3, [pc, #616]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e46:	e001      	b.n	8005e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e58:	d004      	beq.n	8005e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 8099 	bne.w	8005f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d107      	bne.n	8005e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f925 	bl	80060c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d107      	bne.n	8005e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9c8 	bl	8006228 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d13a      	bne.n	8005f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d035      	beq.n	8005f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a7e      	ldr	r2, [pc, #504]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005eb6:	4b7e      	ldr	r3, [pc, #504]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005eb8:	e001      	b.n	8005ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4979      	ldr	r1, [pc, #484]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ec6:	428b      	cmp	r3, r1
 8005ec8:	d101      	bne.n	8005ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005eca:	4b79      	ldr	r3, [pc, #484]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ecc:	e001      	b.n	8005ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ed2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ed6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0a:	f043 0202 	orr.w	r2, r3, #2
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff fe04 	bl	8005b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	f040 80be 	bne.w	80060a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80b8 	beq.w	80060a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a59      	ldr	r2, [pc, #356]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d101      	bne.n	8005f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005f4a:	4b59      	ldr	r3, [pc, #356]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f4c:	e001      	b.n	8005f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4954      	ldr	r1, [pc, #336]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f5a:	428b      	cmp	r3, r1
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005f5e:	4b54      	ldr	r3, [pc, #336]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f60:	e001      	b.n	8005f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	60bb      	str	r3, [r7, #8]
 8005f78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f043 0204 	orr.w	r2, r3, #4
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff fdc6 	bl	8005b20 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f94:	e084      	b.n	80060a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d107      	bne.n	8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f8be 	bl	800612c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d107      	bne.n	8005fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f8fd 	bl	80061c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b40      	cmp	r3, #64	; 0x40
 8005fd2:	d12f      	bne.n	8006034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02a      	beq.n	8006034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a2e      	ldr	r2, [pc, #184]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d101      	bne.n	8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ffa:	e001      	b.n	8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4929      	ldr	r1, [pc, #164]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006008:	428b      	cmp	r3, r1
 800600a:	d101      	bne.n	8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800600c:	4b28      	ldr	r3, [pc, #160]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800600e:	e001      	b.n	8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006018:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006026:	f043 0202 	orr.w	r2, r3, #2
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fd76 	bl	8005b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b08      	cmp	r3, #8
 800603c:	d131      	bne.n	80060a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b00      	cmp	r3, #0
 8006046:	d02c      	beq.n	80060a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a17      	ldr	r2, [pc, #92]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d101      	bne.n	8006056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006052:	4b17      	ldr	r3, [pc, #92]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006054:	e001      	b.n	800605a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4912      	ldr	r1, [pc, #72]	; (80060ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006062:	428b      	cmp	r3, r1
 8006064:	d101      	bne.n	800606a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006066:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006068:	e001      	b.n	800606e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800606a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800606e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006072:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006082:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006090:	f043 0204 	orr.w	r2, r3, #4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fd41 	bl	8005b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800609e:	e000      	b.n	80060a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060a0:	bf00      	nop
}
 80060a2:	bf00      	nop
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40003800 	.word	0x40003800
 80060b0:	40003400 	.word	0x40003400

080060b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	1c99      	adds	r1, r3, #2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6251      	str	r1, [r2, #36]	; 0x24
 80060da:	881a      	ldrh	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d113      	bne.n	8006122 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ffc9 	bl	80060b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	1c99      	adds	r1, r3, #2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6251      	str	r1, [r2, #36]	; 0x24
 800613e:	8819      	ldrh	r1, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1d      	ldr	r2, [pc, #116]	; (80061bc <I2SEx_TxISR_I2SExt+0x90>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <I2SEx_TxISR_I2SExt+0x22>
 800614a:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <I2SEx_TxISR_I2SExt+0x94>)
 800614c:	e001      	b.n	8006152 <I2SEx_TxISR_I2SExt+0x26>
 800614e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006152:	460a      	mov	r2, r1
 8006154:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d121      	bne.n	80061b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a12      	ldr	r2, [pc, #72]	; (80061bc <I2SEx_TxISR_I2SExt+0x90>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d101      	bne.n	800617c <I2SEx_TxISR_I2SExt+0x50>
 8006178:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <I2SEx_TxISR_I2SExt+0x94>)
 800617a:	e001      	b.n	8006180 <I2SEx_TxISR_I2SExt+0x54>
 800617c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	490d      	ldr	r1, [pc, #52]	; (80061bc <I2SEx_TxISR_I2SExt+0x90>)
 8006188:	428b      	cmp	r3, r1
 800618a:	d101      	bne.n	8006190 <I2SEx_TxISR_I2SExt+0x64>
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <I2SEx_TxISR_I2SExt+0x94>)
 800618e:	e001      	b.n	8006194 <I2SEx_TxISR_I2SExt+0x68>
 8006190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ff81 	bl	80060b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40003800 	.word	0x40003800
 80061c0:	40003400 	.word	0x40003400

080061c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68d8      	ldr	r0, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	1c99      	adds	r1, r3, #2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80061dc:	b282      	uxth	r2, r0
 80061de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d113      	bne.n	8006220 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006206:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff ff4a 	bl	80060b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a20      	ldr	r2, [pc, #128]	; (80062b8 <I2SEx_RxISR_I2SExt+0x90>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d101      	bne.n	800623e <I2SEx_RxISR_I2SExt+0x16>
 800623a:	4b20      	ldr	r3, [pc, #128]	; (80062bc <I2SEx_RxISR_I2SExt+0x94>)
 800623c:	e001      	b.n	8006242 <I2SEx_RxISR_I2SExt+0x1a>
 800623e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006242:	68d8      	ldr	r0, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	1c99      	adds	r1, r3, #2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800624e:	b282      	uxth	r2, r0
 8006250:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006256:	b29b      	uxth	r3, r3
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d121      	bne.n	80062ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a12      	ldr	r2, [pc, #72]	; (80062b8 <I2SEx_RxISR_I2SExt+0x90>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <I2SEx_RxISR_I2SExt+0x50>
 8006274:	4b11      	ldr	r3, [pc, #68]	; (80062bc <I2SEx_RxISR_I2SExt+0x94>)
 8006276:	e001      	b.n	800627c <I2SEx_RxISR_I2SExt+0x54>
 8006278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	490d      	ldr	r1, [pc, #52]	; (80062b8 <I2SEx_RxISR_I2SExt+0x90>)
 8006284:	428b      	cmp	r3, r1
 8006286:	d101      	bne.n	800628c <I2SEx_RxISR_I2SExt+0x64>
 8006288:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <I2SEx_RxISR_I2SExt+0x94>)
 800628a:	e001      	b.n	8006290 <I2SEx_RxISR_I2SExt+0x68>
 800628c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006294:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff ff03 	bl	80060b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40003800 	.word	0x40003800
 80062bc:	40003400 	.word	0x40003400

080062c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e264      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d075      	beq.n	80063ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062de:	4ba3      	ldr	r3, [pc, #652]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 030c 	and.w	r3, r3, #12
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d00c      	beq.n	8006304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ea:	4ba0      	ldr	r3, [pc, #640]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d112      	bne.n	800631c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062f6:	4b9d      	ldr	r3, [pc, #628]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006302:	d10b      	bne.n	800631c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006304:	4b99      	ldr	r3, [pc, #612]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d05b      	beq.n	80063c8 <HAL_RCC_OscConfig+0x108>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d157      	bne.n	80063c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e23f      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006324:	d106      	bne.n	8006334 <HAL_RCC_OscConfig+0x74>
 8006326:	4b91      	ldr	r3, [pc, #580]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a90      	ldr	r2, [pc, #576]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 800632c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e01d      	b.n	8006370 <HAL_RCC_OscConfig+0xb0>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800633c:	d10c      	bne.n	8006358 <HAL_RCC_OscConfig+0x98>
 800633e:	4b8b      	ldr	r3, [pc, #556]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a8a      	ldr	r2, [pc, #552]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	4b88      	ldr	r3, [pc, #544]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a87      	ldr	r2, [pc, #540]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	e00b      	b.n	8006370 <HAL_RCC_OscConfig+0xb0>
 8006358:	4b84      	ldr	r3, [pc, #528]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a83      	ldr	r2, [pc, #524]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 800635e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	4b81      	ldr	r3, [pc, #516]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a80      	ldr	r2, [pc, #512]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 800636a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800636e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d013      	beq.n	80063a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006378:	f7fe fa4e 	bl	8004818 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006380:	f7fe fa4a 	bl	8004818 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b64      	cmp	r3, #100	; 0x64
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e204      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006392:	4b76      	ldr	r3, [pc, #472]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0xc0>
 800639e:	e014      	b.n	80063ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a0:	f7fe fa3a 	bl	8004818 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063a8:	f7fe fa36 	bl	8004818 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b64      	cmp	r3, #100	; 0x64
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e1f0      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ba:	4b6c      	ldr	r3, [pc, #432]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f0      	bne.n	80063a8 <HAL_RCC_OscConfig+0xe8>
 80063c6:	e000      	b.n	80063ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d063      	beq.n	800649e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063d6:	4b65      	ldr	r3, [pc, #404]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 030c 	and.w	r3, r3, #12
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e2:	4b62      	ldr	r3, [pc, #392]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d11c      	bne.n	8006428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ee:	4b5f      	ldr	r3, [pc, #380]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d116      	bne.n	8006428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fa:	4b5c      	ldr	r3, [pc, #368]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_RCC_OscConfig+0x152>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d001      	beq.n	8006412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e1c4      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006412:	4b56      	ldr	r3, [pc, #344]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4952      	ldr	r1, [pc, #328]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006422:	4313      	orrs	r3, r2
 8006424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006426:	e03a      	b.n	800649e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d020      	beq.n	8006472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006430:	4b4f      	ldr	r3, [pc, #316]	; (8006570 <HAL_RCC_OscConfig+0x2b0>)
 8006432:	2201      	movs	r2, #1
 8006434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006436:	f7fe f9ef 	bl	8004818 <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800643e:	f7fe f9eb 	bl	8004818 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e1a5      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006450:	4b46      	ldr	r3, [pc, #280]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800645c:	4b43      	ldr	r3, [pc, #268]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	4940      	ldr	r1, [pc, #256]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 800646c:	4313      	orrs	r3, r2
 800646e:	600b      	str	r3, [r1, #0]
 8006470:	e015      	b.n	800649e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006472:	4b3f      	ldr	r3, [pc, #252]	; (8006570 <HAL_RCC_OscConfig+0x2b0>)
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7fe f9ce 	bl	8004818 <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006480:	f7fe f9ca 	bl	8004818 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e184      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006492:	4b36      	ldr	r3, [pc, #216]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d030      	beq.n	800650c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d016      	beq.n	80064e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064b2:	4b30      	ldr	r3, [pc, #192]	; (8006574 <HAL_RCC_OscConfig+0x2b4>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b8:	f7fe f9ae 	bl	8004818 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c0:	f7fe f9aa 	bl	8004818 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e164      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064d2:	4b26      	ldr	r3, [pc, #152]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0x200>
 80064de:	e015      	b.n	800650c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064e0:	4b24      	ldr	r3, [pc, #144]	; (8006574 <HAL_RCC_OscConfig+0x2b4>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e6:	f7fe f997 	bl	8004818 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ee:	f7fe f993 	bl	8004818 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e14d      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006500:	4b1a      	ldr	r3, [pc, #104]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f0      	bne.n	80064ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80a0 	beq.w	800665a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800651a:	2300      	movs	r3, #0
 800651c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10f      	bne.n	800654a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	4b0f      	ldr	r3, [pc, #60]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	4a0e      	ldr	r2, [pc, #56]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 8006534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006538:	6413      	str	r3, [r2, #64]	; 0x40
 800653a:	4b0c      	ldr	r3, [pc, #48]	; (800656c <HAL_RCC_OscConfig+0x2ac>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006546:	2301      	movs	r3, #1
 8006548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654a:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <HAL_RCC_OscConfig+0x2b8>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006552:	2b00      	cmp	r3, #0
 8006554:	d121      	bne.n	800659a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <HAL_RCC_OscConfig+0x2b8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a07      	ldr	r2, [pc, #28]	; (8006578 <HAL_RCC_OscConfig+0x2b8>)
 800655c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006562:	f7fe f959 	bl	8004818 <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006568:	e011      	b.n	800658e <HAL_RCC_OscConfig+0x2ce>
 800656a:	bf00      	nop
 800656c:	40023800 	.word	0x40023800
 8006570:	42470000 	.word	0x42470000
 8006574:	42470e80 	.word	0x42470e80
 8006578:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800657c:	f7fe f94c 	bl	8004818 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e106      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658e:	4b85      	ldr	r3, [pc, #532]	; (80067a4 <HAL_RCC_OscConfig+0x4e4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f0      	beq.n	800657c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d106      	bne.n	80065b0 <HAL_RCC_OscConfig+0x2f0>
 80065a2:	4b81      	ldr	r3, [pc, #516]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a6:	4a80      	ldr	r2, [pc, #512]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065a8:	f043 0301 	orr.w	r3, r3, #1
 80065ac:	6713      	str	r3, [r2, #112]	; 0x70
 80065ae:	e01c      	b.n	80065ea <HAL_RCC_OscConfig+0x32a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b05      	cmp	r3, #5
 80065b6:	d10c      	bne.n	80065d2 <HAL_RCC_OscConfig+0x312>
 80065b8:	4b7b      	ldr	r3, [pc, #492]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065bc:	4a7a      	ldr	r2, [pc, #488]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065be:	f043 0304 	orr.w	r3, r3, #4
 80065c2:	6713      	str	r3, [r2, #112]	; 0x70
 80065c4:	4b78      	ldr	r3, [pc, #480]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c8:	4a77      	ldr	r2, [pc, #476]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	6713      	str	r3, [r2, #112]	; 0x70
 80065d0:	e00b      	b.n	80065ea <HAL_RCC_OscConfig+0x32a>
 80065d2:	4b75      	ldr	r3, [pc, #468]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	4a74      	ldr	r2, [pc, #464]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	6713      	str	r3, [r2, #112]	; 0x70
 80065de:	4b72      	ldr	r3, [pc, #456]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e2:	4a71      	ldr	r2, [pc, #452]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80065e4:	f023 0304 	bic.w	r3, r3, #4
 80065e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d015      	beq.n	800661e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f2:	f7fe f911 	bl	8004818 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f8:	e00a      	b.n	8006610 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065fa:	f7fe f90d 	bl	8004818 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	4293      	cmp	r3, r2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e0c5      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006610:	4b65      	ldr	r3, [pc, #404]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0ee      	beq.n	80065fa <HAL_RCC_OscConfig+0x33a>
 800661c:	e014      	b.n	8006648 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800661e:	f7fe f8fb 	bl	8004818 <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006624:	e00a      	b.n	800663c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006626:	f7fe f8f7 	bl	8004818 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	f241 3288 	movw	r2, #5000	; 0x1388
 8006634:	4293      	cmp	r3, r2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e0af      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800663c:	4b5a      	ldr	r3, [pc, #360]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 800663e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1ee      	bne.n	8006626 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d105      	bne.n	800665a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664e:	4b56      	ldr	r3, [pc, #344]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	4a55      	ldr	r2, [pc, #340]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 8006654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 809b 	beq.w	800679a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006664:	4b50      	ldr	r3, [pc, #320]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 030c 	and.w	r3, r3, #12
 800666c:	2b08      	cmp	r3, #8
 800666e:	d05c      	beq.n	800672a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d141      	bne.n	80066fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006678:	4b4c      	ldr	r3, [pc, #304]	; (80067ac <HAL_RCC_OscConfig+0x4ec>)
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667e:	f7fe f8cb 	bl	8004818 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006686:	f7fe f8c7 	bl	8004818 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e081      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006698:	4b43      	ldr	r3, [pc, #268]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f0      	bne.n	8006686 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	019b      	lsls	r3, r3, #6
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	085b      	lsrs	r3, r3, #1
 80066bc:	3b01      	subs	r3, #1
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	061b      	lsls	r3, r3, #24
 80066c8:	4937      	ldr	r1, [pc, #220]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066ce:	4b37      	ldr	r3, [pc, #220]	; (80067ac <HAL_RCC_OscConfig+0x4ec>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d4:	f7fe f8a0 	bl	8004818 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066dc:	f7fe f89c 	bl	8004818 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e056      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ee:	4b2e      	ldr	r3, [pc, #184]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCC_OscConfig+0x41c>
 80066fa:	e04e      	b.n	800679a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fc:	4b2b      	ldr	r3, [pc, #172]	; (80067ac <HAL_RCC_OscConfig+0x4ec>)
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006702:	f7fe f889 	bl	8004818 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800670a:	f7fe f885 	bl	8004818 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e03f      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671c:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f0      	bne.n	800670a <HAL_RCC_OscConfig+0x44a>
 8006728:	e037      	b.n	800679a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e032      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006736:	4b1c      	ldr	r3, [pc, #112]	; (80067a8 <HAL_RCC_OscConfig+0x4e8>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d028      	beq.n	8006796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d121      	bne.n	8006796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800675c:	429a      	cmp	r2, r3
 800675e:	d11a      	bne.n	8006796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006766:	4013      	ands	r3, r2
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800676c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800676e:	4293      	cmp	r3, r2
 8006770:	d111      	bne.n	8006796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	3b01      	subs	r3, #1
 8006780:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d107      	bne.n	8006796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006792:	429a      	cmp	r2, r3
 8006794:	d001      	beq.n	800679a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40007000 	.word	0x40007000
 80067a8:	40023800 	.word	0x40023800
 80067ac:	42470060 	.word	0x42470060

080067b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0cc      	b.n	800695e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067c4:	4b68      	ldr	r3, [pc, #416]	; (8006968 <HAL_RCC_ClockConfig+0x1b8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d90c      	bls.n	80067ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067d2:	4b65      	ldr	r3, [pc, #404]	; (8006968 <HAL_RCC_ClockConfig+0x1b8>)
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067da:	4b63      	ldr	r3, [pc, #396]	; (8006968 <HAL_RCC_ClockConfig+0x1b8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d001      	beq.n	80067ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0b8      	b.n	800695e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d020      	beq.n	800683a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006804:	4b59      	ldr	r3, [pc, #356]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	4a58      	ldr	r2, [pc, #352]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800680e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800681c:	4b53      	ldr	r3, [pc, #332]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4a52      	ldr	r2, [pc, #328]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006828:	4b50      	ldr	r3, [pc, #320]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	494d      	ldr	r1, [pc, #308]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	4313      	orrs	r3, r2
 8006838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d044      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d107      	bne.n	800685e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800684e:	4b47      	ldr	r3, [pc, #284]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d119      	bne.n	800688e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e07f      	b.n	800695e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d003      	beq.n	800686e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800686a:	2b03      	cmp	r3, #3
 800686c:	d107      	bne.n	800687e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800686e:	4b3f      	ldr	r3, [pc, #252]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e06f      	b.n	800695e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800687e:	4b3b      	ldr	r3, [pc, #236]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e067      	b.n	800695e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800688e:	4b37      	ldr	r3, [pc, #220]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f023 0203 	bic.w	r2, r3, #3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	4934      	ldr	r1, [pc, #208]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 800689c:	4313      	orrs	r3, r2
 800689e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068a0:	f7fd ffba 	bl	8004818 <HAL_GetTick>
 80068a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a6:	e00a      	b.n	80068be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a8:	f7fd ffb6 	bl	8004818 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e04f      	b.n	800695e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068be:	4b2b      	ldr	r3, [pc, #172]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 020c 	and.w	r2, r3, #12
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d1eb      	bne.n	80068a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068d0:	4b25      	ldr	r3, [pc, #148]	; (8006968 <HAL_RCC_ClockConfig+0x1b8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d20c      	bcs.n	80068f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068de:	4b22      	ldr	r3, [pc, #136]	; (8006968 <HAL_RCC_ClockConfig+0x1b8>)
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068e6:	4b20      	ldr	r3, [pc, #128]	; (8006968 <HAL_RCC_ClockConfig+0x1b8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d001      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e032      	b.n	800695e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006904:	4b19      	ldr	r3, [pc, #100]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	4916      	ldr	r1, [pc, #88]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006912:	4313      	orrs	r3, r2
 8006914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	490e      	ldr	r1, [pc, #56]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 8006932:	4313      	orrs	r3, r2
 8006934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006936:	f000 f821 	bl	800697c <HAL_RCC_GetSysClockFreq>
 800693a:	4602      	mov	r2, r0
 800693c:	4b0b      	ldr	r3, [pc, #44]	; (800696c <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	490a      	ldr	r1, [pc, #40]	; (8006970 <HAL_RCC_ClockConfig+0x1c0>)
 8006948:	5ccb      	ldrb	r3, [r1, r3]
 800694a:	fa22 f303 	lsr.w	r3, r2, r3
 800694e:	4a09      	ldr	r2, [pc, #36]	; (8006974 <HAL_RCC_ClockConfig+0x1c4>)
 8006950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <HAL_RCC_ClockConfig+0x1c8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f7fd ff1a 	bl	8004790 <HAL_InitTick>

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40023c00 	.word	0x40023c00
 800696c:	40023800 	.word	0x40023800
 8006970:	0800ab54 	.word	0x0800ab54
 8006974:	20000230 	.word	0x20000230
 8006978:	20000234 	.word	0x20000234

0800697c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800697c:	b5b0      	push	{r4, r5, r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006982:	2100      	movs	r1, #0
 8006984:	6079      	str	r1, [r7, #4]
 8006986:	2100      	movs	r1, #0
 8006988:	60f9      	str	r1, [r7, #12]
 800698a:	2100      	movs	r1, #0
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800698e:	2100      	movs	r1, #0
 8006990:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006992:	4952      	ldr	r1, [pc, #328]	; (8006adc <HAL_RCC_GetSysClockFreq+0x160>)
 8006994:	6889      	ldr	r1, [r1, #8]
 8006996:	f001 010c 	and.w	r1, r1, #12
 800699a:	2908      	cmp	r1, #8
 800699c:	d00d      	beq.n	80069ba <HAL_RCC_GetSysClockFreq+0x3e>
 800699e:	2908      	cmp	r1, #8
 80069a0:	f200 8094 	bhi.w	8006acc <HAL_RCC_GetSysClockFreq+0x150>
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d002      	beq.n	80069ae <HAL_RCC_GetSysClockFreq+0x32>
 80069a8:	2904      	cmp	r1, #4
 80069aa:	d003      	beq.n	80069b4 <HAL_RCC_GetSysClockFreq+0x38>
 80069ac:	e08e      	b.n	8006acc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069ae:	4b4c      	ldr	r3, [pc, #304]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x164>)
 80069b0:	60bb      	str	r3, [r7, #8]
       break;
 80069b2:	e08e      	b.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069b4:	4b4b      	ldr	r3, [pc, #300]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0x168>)
 80069b6:	60bb      	str	r3, [r7, #8]
      break;
 80069b8:	e08b      	b.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069ba:	4948      	ldr	r1, [pc, #288]	; (8006adc <HAL_RCC_GetSysClockFreq+0x160>)
 80069bc:	6849      	ldr	r1, [r1, #4]
 80069be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80069c2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069c4:	4945      	ldr	r1, [pc, #276]	; (8006adc <HAL_RCC_GetSysClockFreq+0x160>)
 80069c6:	6849      	ldr	r1, [r1, #4]
 80069c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d024      	beq.n	8006a1a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069d0:	4942      	ldr	r1, [pc, #264]	; (8006adc <HAL_RCC_GetSysClockFreq+0x160>)
 80069d2:	6849      	ldr	r1, [r1, #4]
 80069d4:	0989      	lsrs	r1, r1, #6
 80069d6:	4608      	mov	r0, r1
 80069d8:	f04f 0100 	mov.w	r1, #0
 80069dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80069e0:	f04f 0500 	mov.w	r5, #0
 80069e4:	ea00 0204 	and.w	r2, r0, r4
 80069e8:	ea01 0305 	and.w	r3, r1, r5
 80069ec:	493d      	ldr	r1, [pc, #244]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0x168>)
 80069ee:	fb01 f003 	mul.w	r0, r1, r3
 80069f2:	2100      	movs	r1, #0
 80069f4:	fb01 f102 	mul.w	r1, r1, r2
 80069f8:	1844      	adds	r4, r0, r1
 80069fa:	493a      	ldr	r1, [pc, #232]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0x168>)
 80069fc:	fba2 0101 	umull	r0, r1, r2, r1
 8006a00:	1863      	adds	r3, r4, r1
 8006a02:	4619      	mov	r1, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	f7fa f878 	bl	8000b00 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4613      	mov	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e04a      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a1a:	4b30      	ldr	r3, [pc, #192]	; (8006adc <HAL_RCC_GetSysClockFreq+0x160>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	099b      	lsrs	r3, r3, #6
 8006a20:	461a      	mov	r2, r3
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a2a:	f04f 0100 	mov.w	r1, #0
 8006a2e:	ea02 0400 	and.w	r4, r2, r0
 8006a32:	ea03 0501 	and.w	r5, r3, r1
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	f04f 0300 	mov.w	r3, #0
 8006a42:	014b      	lsls	r3, r1, #5
 8006a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a48:	0142      	lsls	r2, r0, #5
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	1b00      	subs	r0, r0, r4
 8006a50:	eb61 0105 	sbc.w	r1, r1, r5
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	f04f 0300 	mov.w	r3, #0
 8006a5c:	018b      	lsls	r3, r1, #6
 8006a5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a62:	0182      	lsls	r2, r0, #6
 8006a64:	1a12      	subs	r2, r2, r0
 8006a66:	eb63 0301 	sbc.w	r3, r3, r1
 8006a6a:	f04f 0000 	mov.w	r0, #0
 8006a6e:	f04f 0100 	mov.w	r1, #0
 8006a72:	00d9      	lsls	r1, r3, #3
 8006a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a78:	00d0      	lsls	r0, r2, #3
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	1912      	adds	r2, r2, r4
 8006a80:	eb45 0303 	adc.w	r3, r5, r3
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f04f 0100 	mov.w	r1, #0
 8006a8c:	0299      	lsls	r1, r3, #10
 8006a8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a92:	0290      	lsls	r0, r2, #10
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	f7fa f82c 	bl	8000b00 <__aeabi_uldivmod>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4613      	mov	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <HAL_RCC_GetSysClockFreq+0x160>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	f003 0303 	and.w	r3, r3, #3
 8006aba:	3301      	adds	r3, #1
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac8:	60bb      	str	r3, [r7, #8]
      break;
 8006aca:	e002      	b.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006acc:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x164>)
 8006ace:	60bb      	str	r3, [r7, #8]
      break;
 8006ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bdb0      	pop	{r4, r5, r7, pc}
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	00f42400 	.word	0x00f42400
 8006ae4:	017d7840 	.word	0x017d7840

08006ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aec:	4b03      	ldr	r3, [pc, #12]	; (8006afc <HAL_RCC_GetHCLKFreq+0x14>)
 8006aee:	681b      	ldr	r3, [r3, #0]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000230 	.word	0x20000230

08006b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b04:	f7ff fff0 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	0a9b      	lsrs	r3, r3, #10
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	4903      	ldr	r1, [pc, #12]	; (8006b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b16:	5ccb      	ldrb	r3, [r1, r3]
 8006b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40023800 	.word	0x40023800
 8006b24:	0800ab64 	.word	0x0800ab64

08006b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b2c:	f7ff ffdc 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8006b30:	4602      	mov	r2, r0
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	0b5b      	lsrs	r3, r3, #13
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	4903      	ldr	r1, [pc, #12]	; (8006b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b3e:	5ccb      	ldrb	r3, [r1, r3]
 8006b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	0800ab64 	.word	0x0800ab64

08006b50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d105      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d035      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b78:	4b62      	ldr	r3, [pc, #392]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b7e:	f7fd fe4b 	bl	8004818 <HAL_GetTick>
 8006b82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b84:	e008      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b86:	f7fd fe47 	bl	8004818 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e0b0      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b98:	4b5b      	ldr	r3, [pc, #364]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1f0      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	019a      	lsls	r2, r3, #6
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	071b      	lsls	r3, r3, #28
 8006bb0:	4955      	ldr	r1, [pc, #340]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bb8:	4b52      	ldr	r3, [pc, #328]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bbe:	f7fd fe2b 	bl	8004818 <HAL_GetTick>
 8006bc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bc6:	f7fd fe27 	bl	8004818 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e090      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bd8:	4b4b      	ldr	r3, [pc, #300]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 8083 	beq.w	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	4b44      	ldr	r3, [pc, #272]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	4a43      	ldr	r2, [pc, #268]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c00:	6413      	str	r3, [r2, #64]	; 0x40
 8006c02:	4b41      	ldr	r3, [pc, #260]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c0e:	4b3f      	ldr	r3, [pc, #252]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a3e      	ldr	r2, [pc, #248]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c1a:	f7fd fdfd 	bl	8004818 <HAL_GetTick>
 8006c1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c20:	e008      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c22:	f7fd fdf9 	bl	8004818 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e062      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c34:	4b35      	ldr	r3, [pc, #212]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0f0      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c40:	4b31      	ldr	r3, [pc, #196]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d02f      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d028      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c5e:	4b2a      	ldr	r3, [pc, #168]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c68:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c6e:	4b28      	ldr	r3, [pc, #160]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c74:	4a24      	ldr	r2, [pc, #144]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c7a:	4b23      	ldr	r3, [pc, #140]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d114      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c86:	f7fd fdc7 	bl	8004818 <HAL_GetTick>
 8006c8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c8c:	e00a      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c8e:	f7fd fdc3 	bl	8004818 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e02a      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca4:	4b18      	ldr	r3, [pc, #96]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0ee      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cbc:	d10d      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006cbe:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd2:	490d      	ldr	r1, [pc, #52]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	608b      	str	r3, [r1, #8]
 8006cd8:	e005      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	4a0a      	ldr	r2, [pc, #40]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ce0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ce4:	6093      	str	r3, [r2, #8]
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ce8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cf2:	4905      	ldr	r1, [pc, #20]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	42470068 	.word	0x42470068
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	40007000 	.word	0x40007000
 8006d10:	42470e40 	.word	0x42470e40

08006d14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d13e      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d32:	4b23      	ldr	r3, [pc, #140]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d12f      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d48:	4b1e      	ldr	r3, [pc, #120]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d4a:	617b      	str	r3, [r7, #20]
          break;
 8006d4c:	e02f      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d4e:	4b1c      	ldr	r3, [pc, #112]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d5a:	d108      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d5c:	4b18      	ldr	r3, [pc, #96]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d64:	4a18      	ldr	r2, [pc, #96]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	e007      	b.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d6e:	4b14      	ldr	r3, [pc, #80]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d76:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d7e:	4b10      	ldr	r3, [pc, #64]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d84:	099b      	lsrs	r3, r3, #6
 8006d86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	fb02 f303 	mul.w	r3, r2, r3
 8006d90:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d92:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d98:	0f1b      	lsrs	r3, r3, #28
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da4:	617b      	str	r3, [r7, #20]
          break;
 8006da6:	e002      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]
          break;
 8006dac:	bf00      	nop
        }
      }
      break;
 8006dae:	bf00      	nop
    }
  }
  return frequency;
 8006db0:	697b      	ldr	r3, [r7, #20]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	00bb8000 	.word	0x00bb8000
 8006dc8:	017d7840 	.word	0x017d7840
 8006dcc:	00f42400 	.word	0x00f42400

08006dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e041      	b.n	8006e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fd f9c0 	bl	800417c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f000 fa9c 	bl	800734c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d001      	beq.n	8006e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e04e      	b.n	8006f26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a23      	ldr	r2, [pc, #140]	; (8006f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d022      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0x80>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb2:	d01d      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0x80>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a1f      	ldr	r2, [pc, #124]	; (8006f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d018      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0x80>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a1e      	ldr	r2, [pc, #120]	; (8006f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d013      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0x80>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a1c      	ldr	r2, [pc, #112]	; (8006f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00e      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0x80>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1b      	ldr	r2, [pc, #108]	; (8006f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d009      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0x80>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d004      	beq.n	8006ef0 <HAL_TIM_Base_Start_IT+0x80>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a18      	ldr	r2, [pc, #96]	; (8006f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d111      	bne.n	8006f14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b06      	cmp	r3, #6
 8006f00:	d010      	beq.n	8006f24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f12:	e007      	b.n	8006f24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0201 	orr.w	r2, r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40010000 	.word	0x40010000
 8006f38:	40000400 	.word	0x40000400
 8006f3c:	40000800 	.word	0x40000800
 8006f40:	40000c00 	.word	0x40000c00
 8006f44:	40010400 	.word	0x40010400
 8006f48:	40014000 	.word	0x40014000
 8006f4c:	40001800 	.word	0x40001800

08006f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d122      	bne.n	8006fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d11b      	bne.n	8006fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0202 	mvn.w	r2, #2
 8006f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f9bc 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8006f98:	e005      	b.n	8006fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9ae 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f9bf 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d122      	bne.n	8007000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d11b      	bne.n	8007000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0204 	mvn.w	r2, #4
 8006fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f992 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8006fec:	e005      	b.n	8006ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f984 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f995 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b08      	cmp	r3, #8
 800700c:	d122      	bne.n	8007054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b08      	cmp	r3, #8
 800701a:	d11b      	bne.n	8007054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0208 	mvn.w	r2, #8
 8007024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2204      	movs	r2, #4
 800702a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f968 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8007040:	e005      	b.n	800704e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f95a 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f96b 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0310 	and.w	r3, r3, #16
 800705e:	2b10      	cmp	r3, #16
 8007060:	d122      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0310 	and.w	r3, r3, #16
 800706c:	2b10      	cmp	r3, #16
 800706e:	d11b      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0210 	mvn.w	r2, #16
 8007078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2208      	movs	r2, #8
 800707e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f93e 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8007094:	e005      	b.n	80070a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f930 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f941 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d10e      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d107      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0201 	mvn.w	r2, #1
 80070cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f90a 	bl	80072e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070de:	2b80      	cmp	r3, #128	; 0x80
 80070e0:	d10e      	bne.n	8007100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ec:	2b80      	cmp	r3, #128	; 0x80
 80070ee:	d107      	bne.n	8007100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fae6 	bl	80076cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d10e      	bne.n	800712c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d107      	bne.n	800712c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f906 	bl	8007338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b20      	cmp	r3, #32
 8007138:	d10e      	bne.n	8007158 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b20      	cmp	r3, #32
 8007146:	d107      	bne.n	8007158 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f06f 0220 	mvn.w	r2, #32
 8007150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fab0 	bl	80076b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_TIM_ConfigClockSource+0x18>
 8007174:	2302      	movs	r3, #2
 8007176:	e0b3      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x180>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007196:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800719e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b0:	d03e      	beq.n	8007230 <HAL_TIM_ConfigClockSource+0xd0>
 80071b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b6:	f200 8087 	bhi.w	80072c8 <HAL_TIM_ConfigClockSource+0x168>
 80071ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071be:	f000 8085 	beq.w	80072cc <HAL_TIM_ConfigClockSource+0x16c>
 80071c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c6:	d87f      	bhi.n	80072c8 <HAL_TIM_ConfigClockSource+0x168>
 80071c8:	2b70      	cmp	r3, #112	; 0x70
 80071ca:	d01a      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0xa2>
 80071cc:	2b70      	cmp	r3, #112	; 0x70
 80071ce:	d87b      	bhi.n	80072c8 <HAL_TIM_ConfigClockSource+0x168>
 80071d0:	2b60      	cmp	r3, #96	; 0x60
 80071d2:	d050      	beq.n	8007276 <HAL_TIM_ConfigClockSource+0x116>
 80071d4:	2b60      	cmp	r3, #96	; 0x60
 80071d6:	d877      	bhi.n	80072c8 <HAL_TIM_ConfigClockSource+0x168>
 80071d8:	2b50      	cmp	r3, #80	; 0x50
 80071da:	d03c      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0xf6>
 80071dc:	2b50      	cmp	r3, #80	; 0x50
 80071de:	d873      	bhi.n	80072c8 <HAL_TIM_ConfigClockSource+0x168>
 80071e0:	2b40      	cmp	r3, #64	; 0x40
 80071e2:	d058      	beq.n	8007296 <HAL_TIM_ConfigClockSource+0x136>
 80071e4:	2b40      	cmp	r3, #64	; 0x40
 80071e6:	d86f      	bhi.n	80072c8 <HAL_TIM_ConfigClockSource+0x168>
 80071e8:	2b30      	cmp	r3, #48	; 0x30
 80071ea:	d064      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0x156>
 80071ec:	2b30      	cmp	r3, #48	; 0x30
 80071ee:	d86b      	bhi.n	80072c8 <HAL_TIM_ConfigClockSource+0x168>
 80071f0:	2b20      	cmp	r3, #32
 80071f2:	d060      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0x156>
 80071f4:	2b20      	cmp	r3, #32
 80071f6:	d867      	bhi.n	80072c8 <HAL_TIM_ConfigClockSource+0x168>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d05c      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0x156>
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d05a      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007200:	e062      	b.n	80072c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	6899      	ldr	r1, [r3, #8]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f000 f9b5 	bl	8007580 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007224:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	609a      	str	r2, [r3, #8]
      break;
 800722e:	e04e      	b.n	80072ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	6899      	ldr	r1, [r3, #8]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f000 f99e 	bl	8007580 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007252:	609a      	str	r2, [r3, #8]
      break;
 8007254:	e03b      	b.n	80072ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6859      	ldr	r1, [r3, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	461a      	mov	r2, r3
 8007264:	f000 f912 	bl	800748c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2150      	movs	r1, #80	; 0x50
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f96b 	bl	800754a <TIM_ITRx_SetConfig>
      break;
 8007274:	e02b      	b.n	80072ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	6859      	ldr	r1, [r3, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	461a      	mov	r2, r3
 8007284:	f000 f931 	bl	80074ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2160      	movs	r1, #96	; 0x60
 800728e:	4618      	mov	r0, r3
 8007290:	f000 f95b 	bl	800754a <TIM_ITRx_SetConfig>
      break;
 8007294:	e01b      	b.n	80072ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	6859      	ldr	r1, [r3, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f000 f8f2 	bl	800748c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2140      	movs	r1, #64	; 0x40
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 f94b 	bl	800754a <TIM_ITRx_SetConfig>
      break;
 80072b4:	e00b      	b.n	80072ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f000 f942 	bl	800754a <TIM_ITRx_SetConfig>
        break;
 80072c6:	e002      	b.n	80072ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80072c8:	bf00      	nop
 80072ca:	e000      	b.n	80072ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80072cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a40      	ldr	r2, [pc, #256]	; (8007460 <TIM_Base_SetConfig+0x114>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d013      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d00f      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a3d      	ldr	r2, [pc, #244]	; (8007464 <TIM_Base_SetConfig+0x118>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00b      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a3c      	ldr	r2, [pc, #240]	; (8007468 <TIM_Base_SetConfig+0x11c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d007      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a3b      	ldr	r2, [pc, #236]	; (800746c <TIM_Base_SetConfig+0x120>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a3a      	ldr	r2, [pc, #232]	; (8007470 <TIM_Base_SetConfig+0x124>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d108      	bne.n	800739e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a2f      	ldr	r2, [pc, #188]	; (8007460 <TIM_Base_SetConfig+0x114>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d02b      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ac:	d027      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a2c      	ldr	r2, [pc, #176]	; (8007464 <TIM_Base_SetConfig+0x118>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d023      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a2b      	ldr	r2, [pc, #172]	; (8007468 <TIM_Base_SetConfig+0x11c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01f      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a2a      	ldr	r2, [pc, #168]	; (800746c <TIM_Base_SetConfig+0x120>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d01b      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a29      	ldr	r2, [pc, #164]	; (8007470 <TIM_Base_SetConfig+0x124>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d017      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a28      	ldr	r2, [pc, #160]	; (8007474 <TIM_Base_SetConfig+0x128>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a27      	ldr	r2, [pc, #156]	; (8007478 <TIM_Base_SetConfig+0x12c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00f      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a26      	ldr	r2, [pc, #152]	; (800747c <TIM_Base_SetConfig+0x130>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00b      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a25      	ldr	r2, [pc, #148]	; (8007480 <TIM_Base_SetConfig+0x134>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d007      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a24      	ldr	r2, [pc, #144]	; (8007484 <TIM_Base_SetConfig+0x138>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d003      	beq.n	80073fe <TIM_Base_SetConfig+0xb2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a23      	ldr	r2, [pc, #140]	; (8007488 <TIM_Base_SetConfig+0x13c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d108      	bne.n	8007410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a0a      	ldr	r2, [pc, #40]	; (8007460 <TIM_Base_SetConfig+0x114>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_Base_SetConfig+0xf8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a0c      	ldr	r2, [pc, #48]	; (8007470 <TIM_Base_SetConfig+0x124>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d103      	bne.n	800744c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	615a      	str	r2, [r3, #20]
}
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40010000 	.word	0x40010000
 8007464:	40000400 	.word	0x40000400
 8007468:	40000800 	.word	0x40000800
 800746c:	40000c00 	.word	0x40000c00
 8007470:	40010400 	.word	0x40010400
 8007474:	40014000 	.word	0x40014000
 8007478:	40014400 	.word	0x40014400
 800747c:	40014800 	.word	0x40014800
 8007480:	40001800 	.word	0x40001800
 8007484:	40001c00 	.word	0x40001c00
 8007488:	40002000 	.word	0x40002000

0800748c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f023 0201 	bic.w	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f023 030a 	bic.w	r3, r3, #10
 80074c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	621a      	str	r2, [r3, #32]
}
 80074de:	bf00      	nop
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b087      	sub	sp, #28
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f023 0210 	bic.w	r2, r3, #16
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	031b      	lsls	r3, r3, #12
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4313      	orrs	r3, r2
 8007530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4313      	orrs	r3, r2
 8007568:	f043 0307 	orr.w	r3, r3, #7
 800756c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	609a      	str	r2, [r3, #8]
}
 8007574:	bf00      	nop
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800759a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	021a      	lsls	r2, r3, #8
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	609a      	str	r2, [r3, #8]
}
 80075b4:	bf00      	nop
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e05a      	b.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a21      	ldr	r2, [pc, #132]	; (800769c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d022      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007624:	d01d      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1d      	ldr	r2, [pc, #116]	; (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d018      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1b      	ldr	r2, [pc, #108]	; (80076a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1a      	ldr	r2, [pc, #104]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00e      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a18      	ldr	r2, [pc, #96]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a17      	ldr	r2, [pc, #92]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d10c      	bne.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	4313      	orrs	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	40010000 	.word	0x40010000
 80076a0:	40000400 	.word	0x40000400
 80076a4:	40000800 	.word	0x40000800
 80076a8:	40000c00 	.word	0x40000c00
 80076ac:	40010400 	.word	0x40010400
 80076b0:	40014000 	.word	0x40014000
 80076b4:	40001800 	.word	0x40001800

080076b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e03f      	b.n	8007772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fc fd5e 	bl	80041c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2224      	movs	r2, #36	; 0x24
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fbcf 	bl	8007ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695a      	ldr	r2, [r3, #20]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800777a:	b480      	push	{r7}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	4613      	mov	r3, r2
 8007786:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b20      	cmp	r3, #32
 8007792:	d130      	bne.n	80077f6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_UART_Transmit_IT+0x26>
 800779a:	88fb      	ldrh	r3, [r7, #6]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e029      	b.n	80077f8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d101      	bne.n	80077b2 <HAL_UART_Transmit_IT+0x38>
 80077ae:	2302      	movs	r3, #2
 80077b0:	e022      	b.n	80077f8 <HAL_UART_Transmit_IT+0x7e>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	88fa      	ldrh	r2, [r7, #6]
 80077ca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2221      	movs	r2, #33	; 0x21
 80077d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e000      	b.n	80077f8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80077f6:	2302      	movs	r3, #2
  }
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b20      	cmp	r3, #32
 800781c:	d11d      	bne.n	800785a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <HAL_UART_Receive_IT+0x26>
 8007824:	88fb      	ldrh	r3, [r7, #6]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e016      	b.n	800785c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <HAL_UART_Receive_IT+0x38>
 8007838:	2302      	movs	r3, #2
 800783a:	e00f      	b.n	800785c <HAL_UART_Receive_IT+0x58>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	461a      	mov	r2, r3
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f9bf 	bl	8007bd4 <UART_Start_Receive_IT>
 8007856:	4603      	mov	r3, r0
 8007858:	e000      	b.n	800785c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800785a:	2302      	movs	r3, #2
  }
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08a      	sub	sp, #40	; 0x28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007884:	2300      	movs	r3, #0
 8007886:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10d      	bne.n	80078b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d008      	beq.n	80078b6 <HAL_UART_IRQHandler+0x52>
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa73 	bl	8007d9a <UART_Receive_IT>
      return;
 80078b4:	e17c      	b.n	8007bb0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 80b1 	beq.w	8007a20 <HAL_UART_IRQHandler+0x1bc>
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d105      	bne.n	80078d4 <HAL_UART_IRQHandler+0x70>
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 80a6 	beq.w	8007a20 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <HAL_UART_IRQHandler+0x90>
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	f043 0201 	orr.w	r2, r3, #1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <HAL_UART_IRQHandler+0xb0>
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790c:	f043 0202 	orr.w	r2, r3, #2
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <HAL_UART_IRQHandler+0xd0>
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	f043 0204 	orr.w	r2, r3, #4
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00f      	beq.n	800795e <HAL_UART_IRQHandler+0xfa>
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <HAL_UART_IRQHandler+0xee>
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	f043 0208 	orr.w	r2, r3, #8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 811f 	beq.w	8007ba6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <HAL_UART_IRQHandler+0x11e>
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fa0c 	bl	8007d9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	bf0c      	ite	eq
 8007990:	2301      	moveq	r3, #1
 8007992:	2300      	movne	r3, #0
 8007994:	b2db      	uxtb	r3, r3
 8007996:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	f003 0308 	and.w	r3, r3, #8
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <HAL_UART_IRQHandler+0x146>
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d031      	beq.n	8007a0e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f94c 	bl	8007c48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b40      	cmp	r3, #64	; 0x40
 80079bc:	d123      	bne.n	8007a06 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695a      	ldr	r2, [r3, #20]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d013      	beq.n	80079fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	4a77      	ldr	r2, [pc, #476]	; (8007bb8 <HAL_UART_IRQHandler+0x354>)
 80079dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fd f9d0 	bl	8004d88 <HAL_DMA_Abort_IT>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d016      	beq.n	8007a1c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079fc:	e00e      	b.n	8007a1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fc fd14 	bl	800442c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a04:	e00a      	b.n	8007a1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fc fd10 	bl	800442c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0c:	e006      	b.n	8007a1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fc fd0c 	bl	800442c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a1a:	e0c4      	b.n	8007ba6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1c:	bf00      	nop
    return;
 8007a1e:	e0c2      	b.n	8007ba6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	f040 80a2 	bne.w	8007b6e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	f003 0310 	and.w	r3, r3, #16
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 809c 	beq.w	8007b6e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	f003 0310 	and.w	r3, r3, #16
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8096 	beq.w	8007b6e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b40      	cmp	r3, #64	; 0x40
 8007a64:	d14f      	bne.n	8007b06 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007a70:	8a3b      	ldrh	r3, [r7, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 8099 	beq.w	8007baa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a7c:	8a3a      	ldrh	r2, [r7, #16]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	f080 8093 	bcs.w	8007baa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8a3a      	ldrh	r2, [r7, #16]
 8007a88:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a94:	d02b      	beq.n	8007aee <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aa4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	695a      	ldr	r2, [r3, #20]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0201 	bic.w	r2, r2, #1
 8007ab4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	695a      	ldr	r2, [r3, #20]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0210 	bic.w	r2, r2, #16
 8007ae2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fd f8dd 	bl	8004ca8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f85c 	bl	8007bbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b04:	e051      	b.n	8007baa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d047      	beq.n	8007bae <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007b1e:	8a7b      	ldrh	r3, [r7, #18]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d044      	beq.n	8007bae <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b32:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695a      	ldr	r2, [r3, #20]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0201 	bic.w	r2, r2, #1
 8007b42:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0210 	bic.w	r2, r2, #16
 8007b60:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b62:	8a7b      	ldrh	r3, [r7, #18]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f828 	bl	8007bbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b6c:	e01f      	b.n	8007bae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d008      	beq.n	8007b8a <HAL_UART_IRQHandler+0x326>
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f8a1 	bl	8007cca <UART_Transmit_IT>
    return;
 8007b88:	e012      	b.n	8007bb0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <HAL_UART_IRQHandler+0x34c>
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d008      	beq.n	8007bb0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f8e3 	bl	8007d6a <UART_EndTransmit_IT>
    return;
 8007ba4:	e004      	b.n	8007bb0 <HAL_UART_IRQHandler+0x34c>
    return;
 8007ba6:	bf00      	nop
 8007ba8:	e002      	b.n	8007bb0 <HAL_UART_IRQHandler+0x34c>
      return;
 8007baa:	bf00      	nop
 8007bac:	e000      	b.n	8007bb0 <HAL_UART_IRQHandler+0x34c>
      return;
 8007bae:	bf00      	nop
  }
}
 8007bb0:	3728      	adds	r7, #40	; 0x28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	08007ca3 	.word	0x08007ca3

08007bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	4613      	mov	r3, r2
 8007be0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	88fa      	ldrh	r2, [r7, #6]
 8007bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2222      	movs	r2, #34	; 0x22
 8007bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c18:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695a      	ldr	r2, [r3, #20]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0201 	orr.w	r2, r2, #1
 8007c28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0220 	orr.w	r2, r2, #32
 8007c38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695a      	ldr	r2, [r3, #20]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0201 	bic.w	r2, r2, #1
 8007c6e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d107      	bne.n	8007c88 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0210 	bic.w	r2, r2, #16
 8007c86:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7fc fbb5 	bl	800442c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b21      	cmp	r3, #33	; 0x21
 8007cdc:	d13e      	bne.n	8007d5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce6:	d114      	bne.n	8007d12 <UART_Transmit_IT+0x48>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d110      	bne.n	8007d12 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	1c9a      	adds	r2, r3, #2
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	621a      	str	r2, [r3, #32]
 8007d10:	e008      	b.n	8007d24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	1c59      	adds	r1, r3, #1
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6211      	str	r1, [r2, #32]
 8007d1c:	781a      	ldrb	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	4619      	mov	r1, r3
 8007d32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10f      	bne.n	8007d58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e000      	b.n	8007d5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d5c:	2302      	movs	r3, #2
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fc fb18 	bl	80043c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b22      	cmp	r3, #34	; 0x22
 8007dac:	f040 8087 	bne.w	8007ebe <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d117      	bne.n	8007dea <UART_Receive_IT+0x50>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d113      	bne.n	8007dea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	1c9a      	adds	r2, r3, #2
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	629a      	str	r2, [r3, #40]	; 0x28
 8007de8:	e026      	b.n	8007e38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dfc:	d007      	beq.n	8007e0e <UART_Receive_IT+0x74>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10a      	bne.n	8007e1c <UART_Receive_IT+0x82>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	e008      	b.n	8007e2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	4619      	mov	r1, r3
 8007e46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d136      	bne.n	8007eba <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0220 	bic.w	r2, r2, #32
 8007e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695a      	ldr	r2, [r3, #20]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d10e      	bne.n	8007eaa <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0210 	bic.w	r2, r2, #16
 8007e9a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff fe8a 	bl	8007bbc <HAL_UARTEx_RxEventCallback>
 8007ea8:	e002      	b.n	8007eb0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7fc fa52 	bl	8004354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e002      	b.n	8007ec0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	e000      	b.n	8007ec0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007ebe:	2302      	movs	r3, #2
  }
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	b09f      	sub	sp, #124	; 0x7c
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ede:	68d9      	ldr	r1, [r3, #12]
 8007ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	ea40 0301 	orr.w	r3, r0, r1
 8007ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f0c:	f021 010c 	bic.w	r1, r1, #12
 8007f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f16:	430b      	orrs	r3, r1
 8007f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f26:	6999      	ldr	r1, [r3, #24]
 8007f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	ea40 0301 	orr.w	r3, r0, r1
 8007f30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4bc5      	ldr	r3, [pc, #788]	; (800824c <UART_SetConfig+0x384>)
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d004      	beq.n	8007f46 <UART_SetConfig+0x7e>
 8007f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	4bc3      	ldr	r3, [pc, #780]	; (8008250 <UART_SetConfig+0x388>)
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d103      	bne.n	8007f4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f46:	f7fe fdef 	bl	8006b28 <HAL_RCC_GetPCLK2Freq>
 8007f4a:	6778      	str	r0, [r7, #116]	; 0x74
 8007f4c:	e002      	b.n	8007f54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f4e:	f7fe fdd7 	bl	8006b00 <HAL_RCC_GetPCLK1Freq>
 8007f52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f5c:	f040 80b6 	bne.w	80080cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f62:	461c      	mov	r4, r3
 8007f64:	f04f 0500 	mov.w	r5, #0
 8007f68:	4622      	mov	r2, r4
 8007f6a:	462b      	mov	r3, r5
 8007f6c:	1891      	adds	r1, r2, r2
 8007f6e:	6439      	str	r1, [r7, #64]	; 0x40
 8007f70:	415b      	adcs	r3, r3
 8007f72:	647b      	str	r3, [r7, #68]	; 0x44
 8007f74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f78:	1912      	adds	r2, r2, r4
 8007f7a:	eb45 0303 	adc.w	r3, r5, r3
 8007f7e:	f04f 0000 	mov.w	r0, #0
 8007f82:	f04f 0100 	mov.w	r1, #0
 8007f86:	00d9      	lsls	r1, r3, #3
 8007f88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f8c:	00d0      	lsls	r0, r2, #3
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	1911      	adds	r1, r2, r4
 8007f94:	6639      	str	r1, [r7, #96]	; 0x60
 8007f96:	416b      	adcs	r3, r5
 8007f98:	667b      	str	r3, [r7, #100]	; 0x64
 8007f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	1891      	adds	r1, r2, r2
 8007fa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fa8:	415b      	adcs	r3, r3
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007fb4:	f7f8 fda4 	bl	8000b00 <__aeabi_uldivmod>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4ba5      	ldr	r3, [pc, #660]	; (8008254 <UART_SetConfig+0x38c>)
 8007fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	011e      	lsls	r6, r3, #4
 8007fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc8:	461c      	mov	r4, r3
 8007fca:	f04f 0500 	mov.w	r5, #0
 8007fce:	4622      	mov	r2, r4
 8007fd0:	462b      	mov	r3, r5
 8007fd2:	1891      	adds	r1, r2, r2
 8007fd4:	6339      	str	r1, [r7, #48]	; 0x30
 8007fd6:	415b      	adcs	r3, r3
 8007fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007fde:	1912      	adds	r2, r2, r4
 8007fe0:	eb45 0303 	adc.w	r3, r5, r3
 8007fe4:	f04f 0000 	mov.w	r0, #0
 8007fe8:	f04f 0100 	mov.w	r1, #0
 8007fec:	00d9      	lsls	r1, r3, #3
 8007fee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ff2:	00d0      	lsls	r0, r2, #3
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	1911      	adds	r1, r2, r4
 8007ffa:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ffc:	416b      	adcs	r3, r5
 8007ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	461a      	mov	r2, r3
 8008006:	f04f 0300 	mov.w	r3, #0
 800800a:	1891      	adds	r1, r2, r2
 800800c:	62b9      	str	r1, [r7, #40]	; 0x28
 800800e:	415b      	adcs	r3, r3
 8008010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008016:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800801a:	f7f8 fd71 	bl	8000b00 <__aeabi_uldivmod>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4b8c      	ldr	r3, [pc, #560]	; (8008254 <UART_SetConfig+0x38c>)
 8008024:	fba3 1302 	umull	r1, r3, r3, r2
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	2164      	movs	r1, #100	; 0x64
 800802c:	fb01 f303 	mul.w	r3, r1, r3
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	3332      	adds	r3, #50	; 0x32
 8008036:	4a87      	ldr	r2, [pc, #540]	; (8008254 <UART_SetConfig+0x38c>)
 8008038:	fba2 2303 	umull	r2, r3, r2, r3
 800803c:	095b      	lsrs	r3, r3, #5
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008044:	441e      	add	r6, r3
 8008046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008048:	4618      	mov	r0, r3
 800804a:	f04f 0100 	mov.w	r1, #0
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	1894      	adds	r4, r2, r2
 8008054:	623c      	str	r4, [r7, #32]
 8008056:	415b      	adcs	r3, r3
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
 800805a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800805e:	1812      	adds	r2, r2, r0
 8008060:	eb41 0303 	adc.w	r3, r1, r3
 8008064:	f04f 0400 	mov.w	r4, #0
 8008068:	f04f 0500 	mov.w	r5, #0
 800806c:	00dd      	lsls	r5, r3, #3
 800806e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008072:	00d4      	lsls	r4, r2, #3
 8008074:	4622      	mov	r2, r4
 8008076:	462b      	mov	r3, r5
 8008078:	1814      	adds	r4, r2, r0
 800807a:	653c      	str	r4, [r7, #80]	; 0x50
 800807c:	414b      	adcs	r3, r1
 800807e:	657b      	str	r3, [r7, #84]	; 0x54
 8008080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	461a      	mov	r2, r3
 8008086:	f04f 0300 	mov.w	r3, #0
 800808a:	1891      	adds	r1, r2, r2
 800808c:	61b9      	str	r1, [r7, #24]
 800808e:	415b      	adcs	r3, r3
 8008090:	61fb      	str	r3, [r7, #28]
 8008092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008096:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800809a:	f7f8 fd31 	bl	8000b00 <__aeabi_uldivmod>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4b6c      	ldr	r3, [pc, #432]	; (8008254 <UART_SetConfig+0x38c>)
 80080a4:	fba3 1302 	umull	r1, r3, r3, r2
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	2164      	movs	r1, #100	; 0x64
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	3332      	adds	r3, #50	; 0x32
 80080b6:	4a67      	ldr	r2, [pc, #412]	; (8008254 <UART_SetConfig+0x38c>)
 80080b8:	fba2 2303 	umull	r2, r3, r2, r3
 80080bc:	095b      	lsrs	r3, r3, #5
 80080be:	f003 0207 	and.w	r2, r3, #7
 80080c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4432      	add	r2, r6
 80080c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080ca:	e0b9      	b.n	8008240 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080ce:	461c      	mov	r4, r3
 80080d0:	f04f 0500 	mov.w	r5, #0
 80080d4:	4622      	mov	r2, r4
 80080d6:	462b      	mov	r3, r5
 80080d8:	1891      	adds	r1, r2, r2
 80080da:	6139      	str	r1, [r7, #16]
 80080dc:	415b      	adcs	r3, r3
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80080e4:	1912      	adds	r2, r2, r4
 80080e6:	eb45 0303 	adc.w	r3, r5, r3
 80080ea:	f04f 0000 	mov.w	r0, #0
 80080ee:	f04f 0100 	mov.w	r1, #0
 80080f2:	00d9      	lsls	r1, r3, #3
 80080f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080f8:	00d0      	lsls	r0, r2, #3
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	eb12 0804 	adds.w	r8, r2, r4
 8008102:	eb43 0905 	adc.w	r9, r3, r5
 8008106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	4618      	mov	r0, r3
 800810c:	f04f 0100 	mov.w	r1, #0
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	008b      	lsls	r3, r1, #2
 800811a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800811e:	0082      	lsls	r2, r0, #2
 8008120:	4640      	mov	r0, r8
 8008122:	4649      	mov	r1, r9
 8008124:	f7f8 fcec 	bl	8000b00 <__aeabi_uldivmod>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4b49      	ldr	r3, [pc, #292]	; (8008254 <UART_SetConfig+0x38c>)
 800812e:	fba3 2302 	umull	r2, r3, r3, r2
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	011e      	lsls	r6, r3, #4
 8008136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008138:	4618      	mov	r0, r3
 800813a:	f04f 0100 	mov.w	r1, #0
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	1894      	adds	r4, r2, r2
 8008144:	60bc      	str	r4, [r7, #8]
 8008146:	415b      	adcs	r3, r3
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800814e:	1812      	adds	r2, r2, r0
 8008150:	eb41 0303 	adc.w	r3, r1, r3
 8008154:	f04f 0400 	mov.w	r4, #0
 8008158:	f04f 0500 	mov.w	r5, #0
 800815c:	00dd      	lsls	r5, r3, #3
 800815e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008162:	00d4      	lsls	r4, r2, #3
 8008164:	4622      	mov	r2, r4
 8008166:	462b      	mov	r3, r5
 8008168:	1814      	adds	r4, r2, r0
 800816a:	64bc      	str	r4, [r7, #72]	; 0x48
 800816c:	414b      	adcs	r3, r1
 800816e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	4618      	mov	r0, r3
 8008176:	f04f 0100 	mov.w	r1, #0
 800817a:	f04f 0200 	mov.w	r2, #0
 800817e:	f04f 0300 	mov.w	r3, #0
 8008182:	008b      	lsls	r3, r1, #2
 8008184:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008188:	0082      	lsls	r2, r0, #2
 800818a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800818e:	f7f8 fcb7 	bl	8000b00 <__aeabi_uldivmod>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4b2f      	ldr	r3, [pc, #188]	; (8008254 <UART_SetConfig+0x38c>)
 8008198:	fba3 1302 	umull	r1, r3, r3, r2
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	2164      	movs	r1, #100	; 0x64
 80081a0:	fb01 f303 	mul.w	r3, r1, r3
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	3332      	adds	r3, #50	; 0x32
 80081aa:	4a2a      	ldr	r2, [pc, #168]	; (8008254 <UART_SetConfig+0x38c>)
 80081ac:	fba2 2303 	umull	r2, r3, r2, r3
 80081b0:	095b      	lsrs	r3, r3, #5
 80081b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081b6:	441e      	add	r6, r3
 80081b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ba:	4618      	mov	r0, r3
 80081bc:	f04f 0100 	mov.w	r1, #0
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	1894      	adds	r4, r2, r2
 80081c6:	603c      	str	r4, [r7, #0]
 80081c8:	415b      	adcs	r3, r3
 80081ca:	607b      	str	r3, [r7, #4]
 80081cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d0:	1812      	adds	r2, r2, r0
 80081d2:	eb41 0303 	adc.w	r3, r1, r3
 80081d6:	f04f 0400 	mov.w	r4, #0
 80081da:	f04f 0500 	mov.w	r5, #0
 80081de:	00dd      	lsls	r5, r3, #3
 80081e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081e4:	00d4      	lsls	r4, r2, #3
 80081e6:	4622      	mov	r2, r4
 80081e8:	462b      	mov	r3, r5
 80081ea:	eb12 0a00 	adds.w	sl, r2, r0
 80081ee:	eb43 0b01 	adc.w	fp, r3, r1
 80081f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f04f 0100 	mov.w	r1, #0
 80081fc:	f04f 0200 	mov.w	r2, #0
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	008b      	lsls	r3, r1, #2
 8008206:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800820a:	0082      	lsls	r2, r0, #2
 800820c:	4650      	mov	r0, sl
 800820e:	4659      	mov	r1, fp
 8008210:	f7f8 fc76 	bl	8000b00 <__aeabi_uldivmod>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4b0e      	ldr	r3, [pc, #56]	; (8008254 <UART_SetConfig+0x38c>)
 800821a:	fba3 1302 	umull	r1, r3, r3, r2
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	2164      	movs	r1, #100	; 0x64
 8008222:	fb01 f303 	mul.w	r3, r1, r3
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	3332      	adds	r3, #50	; 0x32
 800822c:	4a09      	ldr	r2, [pc, #36]	; (8008254 <UART_SetConfig+0x38c>)
 800822e:	fba2 2303 	umull	r2, r3, r2, r3
 8008232:	095b      	lsrs	r3, r3, #5
 8008234:	f003 020f 	and.w	r2, r3, #15
 8008238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4432      	add	r2, r6
 800823e:	609a      	str	r2, [r3, #8]
}
 8008240:	bf00      	nop
 8008242:	377c      	adds	r7, #124	; 0x7c
 8008244:	46bd      	mov	sp, r7
 8008246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824a:	bf00      	nop
 800824c:	40011000 	.word	0x40011000
 8008250:	40011400 	.word	0x40011400
 8008254:	51eb851f 	.word	0x51eb851f

08008258 <arm_fir_init_f32>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
 800825e:	1e65      	subs	r5, r4, #1
 8008260:	4604      	mov	r4, r0
 8008262:	9804      	ldr	r0, [sp, #16]
 8008264:	8021      	strh	r1, [r4, #0]
 8008266:	1828      	adds	r0, r5, r0
 8008268:	461d      	mov	r5, r3
 800826a:	4613      	mov	r3, r2
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	0082      	lsls	r2, r0, #2
 8008270:	2100      	movs	r1, #0
 8008272:	4628      	mov	r0, r5
 8008274:	f002 faf6 	bl	800a864 <memset>
 8008278:	6065      	str	r5, [r4, #4]
 800827a:	bd38      	pop	{r3, r4, r5, pc}

0800827c <arm_biquad_cascade_df2T_init_f32>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	461d      	mov	r5, r3
 8008280:	4604      	mov	r4, r0
 8008282:	00cb      	lsls	r3, r1, #3
 8008284:	7001      	strb	r1, [r0, #0]
 8008286:	6082      	str	r2, [r0, #8]
 8008288:	2100      	movs	r1, #0
 800828a:	4628      	mov	r0, r5
 800828c:	461a      	mov	r2, r3
 800828e:	f002 fae9 	bl	800a864 <memset>
 8008292:	6065      	str	r5, [r4, #4]
 8008294:	bd38      	pop	{r3, r4, r5, pc}
 8008296:	bf00      	nop

08008298 <arm_biquad_cascade_df2T_f32>:
 8008298:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800829c:	089d      	lsrs	r5, r3, #2
 800829e:	6846      	ldr	r6, [r0, #4]
 80082a0:	6884      	ldr	r4, [r0, #8]
 80082a2:	7800      	ldrb	r0, [r0, #0]
 80082a4:	b082      	sub	sp, #8
 80082a6:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 80082aa:	f003 0a03 	and.w	sl, r3, #3
 80082ae:	eb02 030b 	add.w	r3, r2, fp
 80082b2:	f106 0808 	add.w	r8, r6, #8
 80082b6:	f106 0904 	add.w	r9, r6, #4
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	4613      	mov	r3, r2
 80082be:	edd4 3a00 	vldr	s7, [r4]
 80082c2:	4652      	mov	r2, sl
 80082c4:	edd4 4a01 	vldr	s9, [r4, #4]
 80082c8:	edd4 5a02 	vldr	s11, [r4, #8]
 80082cc:	ed94 4a03 	vldr	s8, [r4, #12]
 80082d0:	ed94 5a04 	vldr	s10, [r4, #16]
 80082d4:	469a      	mov	sl, r3
 80082d6:	ed58 6a02 	vldr	s13, [r8, #-8]
 80082da:	3414      	adds	r4, #20
 80082dc:	ed99 6a00 	vldr	s12, [r9]
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	f000 80b5 	beq.w	8008450 <arm_biquad_cascade_df2T_f32+0x1b8>
 80082e6:	462f      	mov	r7, r5
 80082e8:	4656      	mov	r6, sl
 80082ea:	460b      	mov	r3, r1
 80082ec:	edd3 0a00 	vldr	s1, [r3]
 80082f0:	ee43 6aa0 	vmla.f32	s13, s7, s1
 80082f4:	ee04 6aa0 	vmla.f32	s12, s9, s1
 80082f8:	ee25 7a26 	vmul.f32	s14, s10, s13
 80082fc:	ee04 6a26 	vmla.f32	s12, s8, s13
 8008300:	ed93 0a01 	vldr	s0, [r3, #4]
 8008304:	ee05 7aa0 	vmla.f32	s14, s11, s1
 8008308:	ee03 6a80 	vmla.f32	s12, s7, s0
 800830c:	ee04 7a80 	vmla.f32	s14, s9, s0
 8008310:	edc6 6a00 	vstr	s13, [r6]
 8008314:	ee04 7a06 	vmla.f32	s14, s8, s12
 8008318:	ee65 7a06 	vmul.f32	s15, s10, s12
 800831c:	edd3 2a02 	vldr	s5, [r3, #8]
 8008320:	ee45 7a80 	vmla.f32	s15, s11, s0
 8008324:	ee03 7aa2 	vmla.f32	s14, s7, s5
 8008328:	ee44 7aa2 	vmla.f32	s15, s9, s5
 800832c:	ed86 6a01 	vstr	s12, [r6, #4]
 8008330:	ee44 7a07 	vmla.f32	s15, s8, s14
 8008334:	ed93 3a03 	vldr	s6, [r3, #12]
 8008338:	ee65 6a07 	vmul.f32	s13, s10, s14
 800833c:	ee45 6aa2 	vmla.f32	s13, s11, s5
 8008340:	ee43 7a83 	vmla.f32	s15, s7, s6
 8008344:	ee44 6a83 	vmla.f32	s13, s9, s6
 8008348:	ee25 6a27 	vmul.f32	s12, s10, s15
 800834c:	ed86 7a02 	vstr	s14, [r6, #8]
 8008350:	edc6 7a03 	vstr	s15, [r6, #12]
 8008354:	3310      	adds	r3, #16
 8008356:	3610      	adds	r6, #16
 8008358:	3f01      	subs	r7, #1
 800835a:	ee44 6a27 	vmla.f32	s13, s8, s15
 800835e:	ee05 6a83 	vmla.f32	s12, s11, s6
 8008362:	d1c3      	bne.n	80082ec <arm_biquad_cascade_df2T_f32+0x54>
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	4459      	add	r1, fp
 8008368:	2a00      	cmp	r2, #0
 800836a:	d054      	beq.n	8008416 <arm_biquad_cascade_df2T_f32+0x17e>
 800836c:	ecb1 1a01 	vldmia	r1!, {s2}
 8008370:	eef0 1a66 	vmov.f32	s3, s13
 8008374:	ee43 1a81 	vmla.f32	s3, s7, s2
 8008378:	1e57      	subs	r7, r2, #1
 800837a:	ee64 6a21 	vmul.f32	s13, s8, s3
 800837e:	ee44 6a81 	vmla.f32	s13, s9, s2
 8008382:	463e      	mov	r6, r7
 8008384:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008388:	ee25 6a21 	vmul.f32	s12, s10, s3
 800838c:	f007 0701 	and.w	r7, r7, #1
 8008390:	ece3 1a01 	vstmia	r3!, {s3}
 8008394:	ee05 6a81 	vmla.f32	s12, s11, s2
 8008398:	2e00      	cmp	r6, #0
 800839a:	d03c      	beq.n	8008416 <arm_biquad_cascade_df2T_f32+0x17e>
 800839c:	b19f      	cbz	r7, 80083c6 <arm_biquad_cascade_df2T_f32+0x12e>
 800839e:	ecf1 0a01 	vldmia	r1!, {s1}
 80083a2:	eeb0 1a66 	vmov.f32	s2, s13
 80083a6:	ee03 1aa0 	vmla.f32	s2, s7, s1
 80083aa:	3e01      	subs	r6, #1
 80083ac:	ee64 1a01 	vmul.f32	s3, s8, s2
 80083b0:	ee44 1aa0 	vmla.f32	s3, s9, s1
 80083b4:	eca3 1a01 	vstmia	r3!, {s2}
 80083b8:	ee71 6a86 	vadd.f32	s13, s3, s12
 80083bc:	ee25 6a01 	vmul.f32	s12, s10, s2
 80083c0:	ee05 6aa0 	vmla.f32	s12, s11, s1
 80083c4:	d027      	beq.n	8008416 <arm_biquad_cascade_df2T_f32+0x17e>
 80083c6:	46a4      	mov	ip, r4
 80083c8:	460f      	mov	r7, r1
 80083ca:	ecf7 2a01 	vldmia	r7!, {s5}
 80083ce:	ee43 6aa2 	vmla.f32	s13, s7, s5
 80083d2:	461c      	mov	r4, r3
 80083d4:	ee24 0a26 	vmul.f32	s0, s8, s13
 80083d8:	ee04 0aa2 	vmla.f32	s0, s9, s5
 80083dc:	ece4 6a01 	vstmia	r4!, {s13}
 80083e0:	ed91 2a01 	vldr	s4, [r1, #4]
 80083e4:	ee70 7a06 	vadd.f32	s15, s0, s12
 80083e8:	ee43 7a82 	vmla.f32	s15, s7, s4
 80083ec:	ee25 7a26 	vmul.f32	s14, s10, s13
 80083f0:	ee24 3a27 	vmul.f32	s6, s8, s15
 80083f4:	ee05 7aa2 	vmla.f32	s14, s11, s5
 80083f8:	ee04 3a82 	vmla.f32	s6, s9, s4
 80083fc:	ee25 6a27 	vmul.f32	s12, s10, s15
 8008400:	edc3 7a01 	vstr	s15, [r3, #4]
 8008404:	1d39      	adds	r1, r7, #4
 8008406:	1d23      	adds	r3, r4, #4
 8008408:	3e02      	subs	r6, #2
 800840a:	ee73 6a07 	vadd.f32	s13, s6, s14
 800840e:	ee05 6a82 	vmla.f32	s12, s11, s4
 8008412:	d1d9      	bne.n	80083c8 <arm_biquad_cascade_df2T_f32+0x130>
 8008414:	4664      	mov	r4, ip
 8008416:	ee16 1a10 	vmov	r1, s12
 800841a:	3801      	subs	r0, #1
 800841c:	ed48 6a02 	vstr	s13, [r8, #-8]
 8008420:	f849 1b08 	str.w	r1, [r9], #8
 8008424:	f108 0808 	add.w	r8, r8, #8
 8008428:	d014      	beq.n	8008454 <arm_biquad_cascade_df2T_f32+0x1bc>
 800842a:	edd4 3a00 	vldr	s7, [r4]
 800842e:	edd4 4a01 	vldr	s9, [r4, #4]
 8008432:	edd4 5a02 	vldr	s11, [r4, #8]
 8008436:	ed94 4a03 	vldr	s8, [r4, #12]
 800843a:	ed94 5a04 	vldr	s10, [r4, #16]
 800843e:	4651      	mov	r1, sl
 8008440:	ed58 6a02 	vldr	s13, [r8, #-8]
 8008444:	3414      	adds	r4, #20
 8008446:	ed99 6a00 	vldr	s12, [r9]
 800844a:	2d00      	cmp	r5, #0
 800844c:	f47f af4b 	bne.w	80082e6 <arm_biquad_cascade_df2T_f32+0x4e>
 8008450:	4653      	mov	r3, sl
 8008452:	e789      	b.n	8008368 <arm_biquad_cascade_df2T_f32+0xd0>
 8008454:	b002      	add	sp, #8
 8008456:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800845a:	4770      	bx	lr

0800845c <_ZdlPvj>:
 800845c:	f000 b811 	b.w	8008482 <_ZdlPv>

08008460 <_Znwj>:
 8008460:	2801      	cmp	r0, #1
 8008462:	bf38      	it	cc
 8008464:	2001      	movcc	r0, #1
 8008466:	b510      	push	{r4, lr}
 8008468:	4604      	mov	r4, r0
 800846a:	4620      	mov	r0, r4
 800846c:	f002 f9dc 	bl	800a828 <malloc>
 8008470:	b930      	cbnz	r0, 8008480 <_Znwj+0x20>
 8008472:	f000 f809 	bl	8008488 <_ZSt15get_new_handlerv>
 8008476:	b908      	cbnz	r0, 800847c <_Znwj+0x1c>
 8008478:	f002 f9a4 	bl	800a7c4 <abort>
 800847c:	4780      	blx	r0
 800847e:	e7f4      	b.n	800846a <_Znwj+0xa>
 8008480:	bd10      	pop	{r4, pc}

08008482 <_ZdlPv>:
 8008482:	f002 b9d9 	b.w	800a838 <free>
	...

08008488 <_ZSt15get_new_handlerv>:
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <_ZSt15get_new_handlerv+0xc>)
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	f3bf 8f5b 	dmb	ish
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	20002270 	.word	0x20002270

08008498 <sin>:
 8008498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800849a:	ec53 2b10 	vmov	r2, r3, d0
 800849e:	4826      	ldr	r0, [pc, #152]	; (8008538 <sin+0xa0>)
 80084a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084a4:	4281      	cmp	r1, r0
 80084a6:	dc07      	bgt.n	80084b8 <sin+0x20>
 80084a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008530 <sin+0x98>
 80084ac:	2000      	movs	r0, #0
 80084ae:	f001 fd47 	bl	8009f40 <__kernel_sin>
 80084b2:	ec51 0b10 	vmov	r0, r1, d0
 80084b6:	e007      	b.n	80084c8 <sin+0x30>
 80084b8:	4820      	ldr	r0, [pc, #128]	; (800853c <sin+0xa4>)
 80084ba:	4281      	cmp	r1, r0
 80084bc:	dd09      	ble.n	80084d2 <sin+0x3a>
 80084be:	ee10 0a10 	vmov	r0, s0
 80084c2:	4619      	mov	r1, r3
 80084c4:	f7f7 fe8c 	bl	80001e0 <__aeabi_dsub>
 80084c8:	ec41 0b10 	vmov	d0, r0, r1
 80084cc:	b005      	add	sp, #20
 80084ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80084d2:	4668      	mov	r0, sp
 80084d4:	f000 fe6c 	bl	80091b0 <__ieee754_rem_pio2>
 80084d8:	f000 0003 	and.w	r0, r0, #3
 80084dc:	2801      	cmp	r0, #1
 80084de:	d008      	beq.n	80084f2 <sin+0x5a>
 80084e0:	2802      	cmp	r0, #2
 80084e2:	d00d      	beq.n	8008500 <sin+0x68>
 80084e4:	b9d0      	cbnz	r0, 800851c <sin+0x84>
 80084e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084ea:	ed9d 0b00 	vldr	d0, [sp]
 80084ee:	2001      	movs	r0, #1
 80084f0:	e7dd      	b.n	80084ae <sin+0x16>
 80084f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084f6:	ed9d 0b00 	vldr	d0, [sp]
 80084fa:	f001 f919 	bl	8009730 <__kernel_cos>
 80084fe:	e7d8      	b.n	80084b2 <sin+0x1a>
 8008500:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008504:	ed9d 0b00 	vldr	d0, [sp]
 8008508:	2001      	movs	r0, #1
 800850a:	f001 fd19 	bl	8009f40 <__kernel_sin>
 800850e:	ec53 2b10 	vmov	r2, r3, d0
 8008512:	ee10 0a10 	vmov	r0, s0
 8008516:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800851a:	e7d5      	b.n	80084c8 <sin+0x30>
 800851c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008520:	ed9d 0b00 	vldr	d0, [sp]
 8008524:	f001 f904 	bl	8009730 <__kernel_cos>
 8008528:	e7f1      	b.n	800850e <sin+0x76>
 800852a:	bf00      	nop
 800852c:	f3af 8000 	nop.w
	...
 8008538:	3fe921fb 	.word	0x3fe921fb
 800853c:	7fefffff 	.word	0x7fefffff

08008540 <tan>:
 8008540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008542:	ec53 2b10 	vmov	r2, r3, d0
 8008546:	4814      	ldr	r0, [pc, #80]	; (8008598 <tan+0x58>)
 8008548:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800854c:	4281      	cmp	r1, r0
 800854e:	dc05      	bgt.n	800855c <tan+0x1c>
 8008550:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8008590 <tan+0x50>
 8008554:	2001      	movs	r0, #1
 8008556:	f001 fdb3 	bl	800a0c0 <__kernel_tan>
 800855a:	e009      	b.n	8008570 <tan+0x30>
 800855c:	480f      	ldr	r0, [pc, #60]	; (800859c <tan+0x5c>)
 800855e:	4281      	cmp	r1, r0
 8008560:	dd09      	ble.n	8008576 <tan+0x36>
 8008562:	ee10 0a10 	vmov	r0, s0
 8008566:	4619      	mov	r1, r3
 8008568:	f7f7 fe3a 	bl	80001e0 <__aeabi_dsub>
 800856c:	ec41 0b10 	vmov	d0, r0, r1
 8008570:	b005      	add	sp, #20
 8008572:	f85d fb04 	ldr.w	pc, [sp], #4
 8008576:	4668      	mov	r0, sp
 8008578:	f000 fe1a 	bl	80091b0 <__ieee754_rem_pio2>
 800857c:	0040      	lsls	r0, r0, #1
 800857e:	f000 0002 	and.w	r0, r0, #2
 8008582:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008586:	ed9d 0b00 	vldr	d0, [sp]
 800858a:	f1c0 0001 	rsb	r0, r0, #1
 800858e:	e7e2      	b.n	8008556 <tan+0x16>
	...
 8008598:	3fe921fb 	.word	0x3fe921fb
 800859c:	7fefffff 	.word	0x7fefffff

080085a0 <pow>:
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	ec59 8b10 	vmov	r8, r9, d0
 80085a8:	ec57 6b11 	vmov	r6, r7, d1
 80085ac:	f000 f8dc 	bl	8008768 <__ieee754_pow>
 80085b0:	4b4e      	ldr	r3, [pc, #312]	; (80086ec <pow+0x14c>)
 80085b2:	f993 3000 	ldrsb.w	r3, [r3]
 80085b6:	3301      	adds	r3, #1
 80085b8:	ec55 4b10 	vmov	r4, r5, d0
 80085bc:	d015      	beq.n	80085ea <pow+0x4a>
 80085be:	4632      	mov	r2, r6
 80085c0:	463b      	mov	r3, r7
 80085c2:	4630      	mov	r0, r6
 80085c4:	4639      	mov	r1, r7
 80085c6:	f7f8 fa5d 	bl	8000a84 <__aeabi_dcmpun>
 80085ca:	b970      	cbnz	r0, 80085ea <pow+0x4a>
 80085cc:	4642      	mov	r2, r8
 80085ce:	464b      	mov	r3, r9
 80085d0:	4640      	mov	r0, r8
 80085d2:	4649      	mov	r1, r9
 80085d4:	f7f8 fa56 	bl	8000a84 <__aeabi_dcmpun>
 80085d8:	2200      	movs	r2, #0
 80085da:	2300      	movs	r3, #0
 80085dc:	b148      	cbz	r0, 80085f2 <pow+0x52>
 80085de:	4630      	mov	r0, r6
 80085e0:	4639      	mov	r1, r7
 80085e2:	f7f8 fa1d 	bl	8000a20 <__aeabi_dcmpeq>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d17d      	bne.n	80086e6 <pow+0x146>
 80085ea:	ec45 4b10 	vmov	d0, r4, r5
 80085ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f2:	4640      	mov	r0, r8
 80085f4:	4649      	mov	r1, r9
 80085f6:	f7f8 fa13 	bl	8000a20 <__aeabi_dcmpeq>
 80085fa:	b1e0      	cbz	r0, 8008636 <pow+0x96>
 80085fc:	2200      	movs	r2, #0
 80085fe:	2300      	movs	r3, #0
 8008600:	4630      	mov	r0, r6
 8008602:	4639      	mov	r1, r7
 8008604:	f7f8 fa0c 	bl	8000a20 <__aeabi_dcmpeq>
 8008608:	2800      	cmp	r0, #0
 800860a:	d16c      	bne.n	80086e6 <pow+0x146>
 800860c:	ec47 6b10 	vmov	d0, r6, r7
 8008610:	f001 ff33 	bl	800a47a <finite>
 8008614:	2800      	cmp	r0, #0
 8008616:	d0e8      	beq.n	80085ea <pow+0x4a>
 8008618:	2200      	movs	r2, #0
 800861a:	2300      	movs	r3, #0
 800861c:	4630      	mov	r0, r6
 800861e:	4639      	mov	r1, r7
 8008620:	f7f8 fa08 	bl	8000a34 <__aeabi_dcmplt>
 8008624:	2800      	cmp	r0, #0
 8008626:	d0e0      	beq.n	80085ea <pow+0x4a>
 8008628:	f002 f8d4 	bl	800a7d4 <__errno>
 800862c:	2321      	movs	r3, #33	; 0x21
 800862e:	6003      	str	r3, [r0, #0]
 8008630:	2400      	movs	r4, #0
 8008632:	4d2f      	ldr	r5, [pc, #188]	; (80086f0 <pow+0x150>)
 8008634:	e7d9      	b.n	80085ea <pow+0x4a>
 8008636:	ec45 4b10 	vmov	d0, r4, r5
 800863a:	f001 ff1e 	bl	800a47a <finite>
 800863e:	bbb8      	cbnz	r0, 80086b0 <pow+0x110>
 8008640:	ec49 8b10 	vmov	d0, r8, r9
 8008644:	f001 ff19 	bl	800a47a <finite>
 8008648:	b390      	cbz	r0, 80086b0 <pow+0x110>
 800864a:	ec47 6b10 	vmov	d0, r6, r7
 800864e:	f001 ff14 	bl	800a47a <finite>
 8008652:	b368      	cbz	r0, 80086b0 <pow+0x110>
 8008654:	4622      	mov	r2, r4
 8008656:	462b      	mov	r3, r5
 8008658:	4620      	mov	r0, r4
 800865a:	4629      	mov	r1, r5
 800865c:	f7f8 fa12 	bl	8000a84 <__aeabi_dcmpun>
 8008660:	b160      	cbz	r0, 800867c <pow+0xdc>
 8008662:	f002 f8b7 	bl	800a7d4 <__errno>
 8008666:	2321      	movs	r3, #33	; 0x21
 8008668:	6003      	str	r3, [r0, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	4610      	mov	r0, r2
 8008670:	4619      	mov	r1, r3
 8008672:	f7f8 f897 	bl	80007a4 <__aeabi_ddiv>
 8008676:	4604      	mov	r4, r0
 8008678:	460d      	mov	r5, r1
 800867a:	e7b6      	b.n	80085ea <pow+0x4a>
 800867c:	f002 f8aa 	bl	800a7d4 <__errno>
 8008680:	2322      	movs	r3, #34	; 0x22
 8008682:	6003      	str	r3, [r0, #0]
 8008684:	2200      	movs	r2, #0
 8008686:	2300      	movs	r3, #0
 8008688:	4640      	mov	r0, r8
 800868a:	4649      	mov	r1, r9
 800868c:	f7f8 f9d2 	bl	8000a34 <__aeabi_dcmplt>
 8008690:	2400      	movs	r4, #0
 8008692:	b158      	cbz	r0, 80086ac <pow+0x10c>
 8008694:	ec47 6b10 	vmov	d0, r6, r7
 8008698:	f001 ff82 	bl	800a5a0 <rint>
 800869c:	4632      	mov	r2, r6
 800869e:	ec51 0b10 	vmov	r0, r1, d0
 80086a2:	463b      	mov	r3, r7
 80086a4:	f7f8 f9bc 	bl	8000a20 <__aeabi_dcmpeq>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d0c2      	beq.n	8008632 <pow+0x92>
 80086ac:	4d11      	ldr	r5, [pc, #68]	; (80086f4 <pow+0x154>)
 80086ae:	e79c      	b.n	80085ea <pow+0x4a>
 80086b0:	2200      	movs	r2, #0
 80086b2:	2300      	movs	r3, #0
 80086b4:	4620      	mov	r0, r4
 80086b6:	4629      	mov	r1, r5
 80086b8:	f7f8 f9b2 	bl	8000a20 <__aeabi_dcmpeq>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d094      	beq.n	80085ea <pow+0x4a>
 80086c0:	ec49 8b10 	vmov	d0, r8, r9
 80086c4:	f001 fed9 	bl	800a47a <finite>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d08e      	beq.n	80085ea <pow+0x4a>
 80086cc:	ec47 6b10 	vmov	d0, r6, r7
 80086d0:	f001 fed3 	bl	800a47a <finite>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d088      	beq.n	80085ea <pow+0x4a>
 80086d8:	f002 f87c 	bl	800a7d4 <__errno>
 80086dc:	2322      	movs	r3, #34	; 0x22
 80086de:	6003      	str	r3, [r0, #0]
 80086e0:	2400      	movs	r4, #0
 80086e2:	2500      	movs	r5, #0
 80086e4:	e781      	b.n	80085ea <pow+0x4a>
 80086e6:	4d04      	ldr	r5, [pc, #16]	; (80086f8 <pow+0x158>)
 80086e8:	2400      	movs	r4, #0
 80086ea:	e77e      	b.n	80085ea <pow+0x4a>
 80086ec:	20000239 	.word	0x20000239
 80086f0:	fff00000 	.word	0xfff00000
 80086f4:	7ff00000 	.word	0x7ff00000
 80086f8:	3ff00000 	.word	0x3ff00000

080086fc <sqrt>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	ed2d 8b02 	vpush	{d8}
 8008702:	ec55 4b10 	vmov	r4, r5, d0
 8008706:	f000 ff5d 	bl	80095c4 <__ieee754_sqrt>
 800870a:	4b15      	ldr	r3, [pc, #84]	; (8008760 <sqrt+0x64>)
 800870c:	eeb0 8a40 	vmov.f32	s16, s0
 8008710:	eef0 8a60 	vmov.f32	s17, s1
 8008714:	f993 3000 	ldrsb.w	r3, [r3]
 8008718:	3301      	adds	r3, #1
 800871a:	d019      	beq.n	8008750 <sqrt+0x54>
 800871c:	4622      	mov	r2, r4
 800871e:	462b      	mov	r3, r5
 8008720:	4620      	mov	r0, r4
 8008722:	4629      	mov	r1, r5
 8008724:	f7f8 f9ae 	bl	8000a84 <__aeabi_dcmpun>
 8008728:	b990      	cbnz	r0, 8008750 <sqrt+0x54>
 800872a:	2200      	movs	r2, #0
 800872c:	2300      	movs	r3, #0
 800872e:	4620      	mov	r0, r4
 8008730:	4629      	mov	r1, r5
 8008732:	f7f8 f97f 	bl	8000a34 <__aeabi_dcmplt>
 8008736:	b158      	cbz	r0, 8008750 <sqrt+0x54>
 8008738:	f002 f84c 	bl	800a7d4 <__errno>
 800873c:	2321      	movs	r3, #33	; 0x21
 800873e:	6003      	str	r3, [r0, #0]
 8008740:	2200      	movs	r2, #0
 8008742:	2300      	movs	r3, #0
 8008744:	4610      	mov	r0, r2
 8008746:	4619      	mov	r1, r3
 8008748:	f7f8 f82c 	bl	80007a4 <__aeabi_ddiv>
 800874c:	ec41 0b18 	vmov	d8, r0, r1
 8008750:	eeb0 0a48 	vmov.f32	s0, s16
 8008754:	eef0 0a68 	vmov.f32	s1, s17
 8008758:	ecbd 8b02 	vpop	{d8}
 800875c:	bd38      	pop	{r3, r4, r5, pc}
 800875e:	bf00      	nop
 8008760:	20000239 	.word	0x20000239
 8008764:	00000000 	.word	0x00000000

08008768 <__ieee754_pow>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	ed2d 8b06 	vpush	{d8-d10}
 8008770:	b08d      	sub	sp, #52	; 0x34
 8008772:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008776:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800877a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800877e:	ea56 0100 	orrs.w	r1, r6, r0
 8008782:	ec53 2b10 	vmov	r2, r3, d0
 8008786:	f000 84d1 	beq.w	800912c <__ieee754_pow+0x9c4>
 800878a:	497f      	ldr	r1, [pc, #508]	; (8008988 <__ieee754_pow+0x220>)
 800878c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008790:	428c      	cmp	r4, r1
 8008792:	ee10 8a10 	vmov	r8, s0
 8008796:	4699      	mov	r9, r3
 8008798:	dc09      	bgt.n	80087ae <__ieee754_pow+0x46>
 800879a:	d103      	bne.n	80087a4 <__ieee754_pow+0x3c>
 800879c:	b97a      	cbnz	r2, 80087be <__ieee754_pow+0x56>
 800879e:	42a6      	cmp	r6, r4
 80087a0:	dd02      	ble.n	80087a8 <__ieee754_pow+0x40>
 80087a2:	e00c      	b.n	80087be <__ieee754_pow+0x56>
 80087a4:	428e      	cmp	r6, r1
 80087a6:	dc02      	bgt.n	80087ae <__ieee754_pow+0x46>
 80087a8:	428e      	cmp	r6, r1
 80087aa:	d110      	bne.n	80087ce <__ieee754_pow+0x66>
 80087ac:	b178      	cbz	r0, 80087ce <__ieee754_pow+0x66>
 80087ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80087b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80087b6:	ea54 0308 	orrs.w	r3, r4, r8
 80087ba:	f000 84b7 	beq.w	800912c <__ieee754_pow+0x9c4>
 80087be:	4873      	ldr	r0, [pc, #460]	; (800898c <__ieee754_pow+0x224>)
 80087c0:	b00d      	add	sp, #52	; 0x34
 80087c2:	ecbd 8b06 	vpop	{d8-d10}
 80087c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ca:	f001 bee1 	b.w	800a590 <nan>
 80087ce:	f1b9 0f00 	cmp.w	r9, #0
 80087d2:	da36      	bge.n	8008842 <__ieee754_pow+0xda>
 80087d4:	496e      	ldr	r1, [pc, #440]	; (8008990 <__ieee754_pow+0x228>)
 80087d6:	428e      	cmp	r6, r1
 80087d8:	dc51      	bgt.n	800887e <__ieee754_pow+0x116>
 80087da:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80087de:	428e      	cmp	r6, r1
 80087e0:	f340 84af 	ble.w	8009142 <__ieee754_pow+0x9da>
 80087e4:	1531      	asrs	r1, r6, #20
 80087e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80087ea:	2914      	cmp	r1, #20
 80087ec:	dd0f      	ble.n	800880e <__ieee754_pow+0xa6>
 80087ee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80087f2:	fa20 fc01 	lsr.w	ip, r0, r1
 80087f6:	fa0c f101 	lsl.w	r1, ip, r1
 80087fa:	4281      	cmp	r1, r0
 80087fc:	f040 84a1 	bne.w	8009142 <__ieee754_pow+0x9da>
 8008800:	f00c 0c01 	and.w	ip, ip, #1
 8008804:	f1cc 0102 	rsb	r1, ip, #2
 8008808:	9100      	str	r1, [sp, #0]
 800880a:	b180      	cbz	r0, 800882e <__ieee754_pow+0xc6>
 800880c:	e059      	b.n	80088c2 <__ieee754_pow+0x15a>
 800880e:	2800      	cmp	r0, #0
 8008810:	d155      	bne.n	80088be <__ieee754_pow+0x156>
 8008812:	f1c1 0114 	rsb	r1, r1, #20
 8008816:	fa46 fc01 	asr.w	ip, r6, r1
 800881a:	fa0c f101 	lsl.w	r1, ip, r1
 800881e:	42b1      	cmp	r1, r6
 8008820:	f040 848c 	bne.w	800913c <__ieee754_pow+0x9d4>
 8008824:	f00c 0c01 	and.w	ip, ip, #1
 8008828:	f1cc 0102 	rsb	r1, ip, #2
 800882c:	9100      	str	r1, [sp, #0]
 800882e:	4959      	ldr	r1, [pc, #356]	; (8008994 <__ieee754_pow+0x22c>)
 8008830:	428e      	cmp	r6, r1
 8008832:	d12d      	bne.n	8008890 <__ieee754_pow+0x128>
 8008834:	2f00      	cmp	r7, #0
 8008836:	da79      	bge.n	800892c <__ieee754_pow+0x1c4>
 8008838:	4956      	ldr	r1, [pc, #344]	; (8008994 <__ieee754_pow+0x22c>)
 800883a:	2000      	movs	r0, #0
 800883c:	f7f7 ffb2 	bl	80007a4 <__aeabi_ddiv>
 8008840:	e016      	b.n	8008870 <__ieee754_pow+0x108>
 8008842:	2100      	movs	r1, #0
 8008844:	9100      	str	r1, [sp, #0]
 8008846:	2800      	cmp	r0, #0
 8008848:	d13b      	bne.n	80088c2 <__ieee754_pow+0x15a>
 800884a:	494f      	ldr	r1, [pc, #316]	; (8008988 <__ieee754_pow+0x220>)
 800884c:	428e      	cmp	r6, r1
 800884e:	d1ee      	bne.n	800882e <__ieee754_pow+0xc6>
 8008850:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008854:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008858:	ea53 0308 	orrs.w	r3, r3, r8
 800885c:	f000 8466 	beq.w	800912c <__ieee754_pow+0x9c4>
 8008860:	4b4d      	ldr	r3, [pc, #308]	; (8008998 <__ieee754_pow+0x230>)
 8008862:	429c      	cmp	r4, r3
 8008864:	dd0d      	ble.n	8008882 <__ieee754_pow+0x11a>
 8008866:	2f00      	cmp	r7, #0
 8008868:	f280 8464 	bge.w	8009134 <__ieee754_pow+0x9cc>
 800886c:	2000      	movs	r0, #0
 800886e:	2100      	movs	r1, #0
 8008870:	ec41 0b10 	vmov	d0, r0, r1
 8008874:	b00d      	add	sp, #52	; 0x34
 8008876:	ecbd 8b06 	vpop	{d8-d10}
 800887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887e:	2102      	movs	r1, #2
 8008880:	e7e0      	b.n	8008844 <__ieee754_pow+0xdc>
 8008882:	2f00      	cmp	r7, #0
 8008884:	daf2      	bge.n	800886c <__ieee754_pow+0x104>
 8008886:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800888a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800888e:	e7ef      	b.n	8008870 <__ieee754_pow+0x108>
 8008890:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008894:	d104      	bne.n	80088a0 <__ieee754_pow+0x138>
 8008896:	4610      	mov	r0, r2
 8008898:	4619      	mov	r1, r3
 800889a:	f7f7 fe59 	bl	8000550 <__aeabi_dmul>
 800889e:	e7e7      	b.n	8008870 <__ieee754_pow+0x108>
 80088a0:	493e      	ldr	r1, [pc, #248]	; (800899c <__ieee754_pow+0x234>)
 80088a2:	428f      	cmp	r7, r1
 80088a4:	d10d      	bne.n	80088c2 <__ieee754_pow+0x15a>
 80088a6:	f1b9 0f00 	cmp.w	r9, #0
 80088aa:	db0a      	blt.n	80088c2 <__ieee754_pow+0x15a>
 80088ac:	ec43 2b10 	vmov	d0, r2, r3
 80088b0:	b00d      	add	sp, #52	; 0x34
 80088b2:	ecbd 8b06 	vpop	{d8-d10}
 80088b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ba:	f000 be83 	b.w	80095c4 <__ieee754_sqrt>
 80088be:	2100      	movs	r1, #0
 80088c0:	9100      	str	r1, [sp, #0]
 80088c2:	ec43 2b10 	vmov	d0, r2, r3
 80088c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088ca:	f001 fdcd 	bl	800a468 <fabs>
 80088ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d2:	ec51 0b10 	vmov	r0, r1, d0
 80088d6:	f1b8 0f00 	cmp.w	r8, #0
 80088da:	d12a      	bne.n	8008932 <__ieee754_pow+0x1ca>
 80088dc:	b12c      	cbz	r4, 80088ea <__ieee754_pow+0x182>
 80088de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008994 <__ieee754_pow+0x22c>
 80088e2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80088e6:	45e6      	cmp	lr, ip
 80088e8:	d123      	bne.n	8008932 <__ieee754_pow+0x1ca>
 80088ea:	2f00      	cmp	r7, #0
 80088ec:	da05      	bge.n	80088fa <__ieee754_pow+0x192>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	2000      	movs	r0, #0
 80088f4:	4927      	ldr	r1, [pc, #156]	; (8008994 <__ieee754_pow+0x22c>)
 80088f6:	f7f7 ff55 	bl	80007a4 <__aeabi_ddiv>
 80088fa:	f1b9 0f00 	cmp.w	r9, #0
 80088fe:	dab7      	bge.n	8008870 <__ieee754_pow+0x108>
 8008900:	9b00      	ldr	r3, [sp, #0]
 8008902:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008906:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800890a:	4323      	orrs	r3, r4
 800890c:	d108      	bne.n	8008920 <__ieee754_pow+0x1b8>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4610      	mov	r0, r2
 8008914:	4619      	mov	r1, r3
 8008916:	f7f7 fc63 	bl	80001e0 <__aeabi_dsub>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	e78d      	b.n	800883c <__ieee754_pow+0xd4>
 8008920:	9b00      	ldr	r3, [sp, #0]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d1a4      	bne.n	8008870 <__ieee754_pow+0x108>
 8008926:	4602      	mov	r2, r0
 8008928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800892c:	4610      	mov	r0, r2
 800892e:	4619      	mov	r1, r3
 8008930:	e79e      	b.n	8008870 <__ieee754_pow+0x108>
 8008932:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008936:	f10c 35ff 	add.w	r5, ip, #4294967295
 800893a:	950a      	str	r5, [sp, #40]	; 0x28
 800893c:	9d00      	ldr	r5, [sp, #0]
 800893e:	46ac      	mov	ip, r5
 8008940:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008942:	ea5c 0505 	orrs.w	r5, ip, r5
 8008946:	d0e4      	beq.n	8008912 <__ieee754_pow+0x1aa>
 8008948:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <__ieee754_pow+0x238>)
 800894a:	429e      	cmp	r6, r3
 800894c:	f340 80fc 	ble.w	8008b48 <__ieee754_pow+0x3e0>
 8008950:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008954:	429e      	cmp	r6, r3
 8008956:	4b10      	ldr	r3, [pc, #64]	; (8008998 <__ieee754_pow+0x230>)
 8008958:	dd07      	ble.n	800896a <__ieee754_pow+0x202>
 800895a:	429c      	cmp	r4, r3
 800895c:	dc0a      	bgt.n	8008974 <__ieee754_pow+0x20c>
 800895e:	2f00      	cmp	r7, #0
 8008960:	da84      	bge.n	800886c <__ieee754_pow+0x104>
 8008962:	a307      	add	r3, pc, #28	; (adr r3, 8008980 <__ieee754_pow+0x218>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	e795      	b.n	8008896 <__ieee754_pow+0x12e>
 800896a:	429c      	cmp	r4, r3
 800896c:	dbf7      	blt.n	800895e <__ieee754_pow+0x1f6>
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <__ieee754_pow+0x22c>)
 8008970:	429c      	cmp	r4, r3
 8008972:	dd17      	ble.n	80089a4 <__ieee754_pow+0x23c>
 8008974:	2f00      	cmp	r7, #0
 8008976:	dcf4      	bgt.n	8008962 <__ieee754_pow+0x1fa>
 8008978:	e778      	b.n	800886c <__ieee754_pow+0x104>
 800897a:	bf00      	nop
 800897c:	f3af 8000 	nop.w
 8008980:	8800759c 	.word	0x8800759c
 8008984:	7e37e43c 	.word	0x7e37e43c
 8008988:	7ff00000 	.word	0x7ff00000
 800898c:	0800ab74 	.word	0x0800ab74
 8008990:	433fffff 	.word	0x433fffff
 8008994:	3ff00000 	.word	0x3ff00000
 8008998:	3fefffff 	.word	0x3fefffff
 800899c:	3fe00000 	.word	0x3fe00000
 80089a0:	41e00000 	.word	0x41e00000
 80089a4:	4b64      	ldr	r3, [pc, #400]	; (8008b38 <__ieee754_pow+0x3d0>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	f7f7 fc1a 	bl	80001e0 <__aeabi_dsub>
 80089ac:	a356      	add	r3, pc, #344	; (adr r3, 8008b08 <__ieee754_pow+0x3a0>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	4604      	mov	r4, r0
 80089b4:	460d      	mov	r5, r1
 80089b6:	f7f7 fdcb 	bl	8000550 <__aeabi_dmul>
 80089ba:	a355      	add	r3, pc, #340	; (adr r3, 8008b10 <__ieee754_pow+0x3a8>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	4606      	mov	r6, r0
 80089c2:	460f      	mov	r7, r1
 80089c4:	4620      	mov	r0, r4
 80089c6:	4629      	mov	r1, r5
 80089c8:	f7f7 fdc2 	bl	8000550 <__aeabi_dmul>
 80089cc:	4b5b      	ldr	r3, [pc, #364]	; (8008b3c <__ieee754_pow+0x3d4>)
 80089ce:	4682      	mov	sl, r0
 80089d0:	468b      	mov	fp, r1
 80089d2:	2200      	movs	r2, #0
 80089d4:	4620      	mov	r0, r4
 80089d6:	4629      	mov	r1, r5
 80089d8:	f7f7 fdba 	bl	8000550 <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	a14d      	add	r1, pc, #308	; (adr r1, 8008b18 <__ieee754_pow+0x3b0>)
 80089e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e6:	f7f7 fbfb 	bl	80001e0 <__aeabi_dsub>
 80089ea:	4622      	mov	r2, r4
 80089ec:	462b      	mov	r3, r5
 80089ee:	f7f7 fdaf 	bl	8000550 <__aeabi_dmul>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	2000      	movs	r0, #0
 80089f8:	4951      	ldr	r1, [pc, #324]	; (8008b40 <__ieee754_pow+0x3d8>)
 80089fa:	f7f7 fbf1 	bl	80001e0 <__aeabi_dsub>
 80089fe:	4622      	mov	r2, r4
 8008a00:	4680      	mov	r8, r0
 8008a02:	4689      	mov	r9, r1
 8008a04:	462b      	mov	r3, r5
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f7 fda1 	bl	8000550 <__aeabi_dmul>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	f7f7 fd9b 	bl	8000550 <__aeabi_dmul>
 8008a1a:	a341      	add	r3, pc, #260	; (adr r3, 8008b20 <__ieee754_pow+0x3b8>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f7f7 fd96 	bl	8000550 <__aeabi_dmul>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4650      	mov	r0, sl
 8008a2a:	4659      	mov	r1, fp
 8008a2c:	f7f7 fbd8 	bl	80001e0 <__aeabi_dsub>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4680      	mov	r8, r0
 8008a36:	4689      	mov	r9, r1
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f7 fbd2 	bl	80001e4 <__adddf3>
 8008a40:	2400      	movs	r4, #0
 8008a42:	4632      	mov	r2, r6
 8008a44:	463b      	mov	r3, r7
 8008a46:	4620      	mov	r0, r4
 8008a48:	460d      	mov	r5, r1
 8008a4a:	f7f7 fbc9 	bl	80001e0 <__aeabi_dsub>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f7 fbc3 	bl	80001e0 <__aeabi_dsub>
 8008a5a:	9b00      	ldr	r3, [sp, #0]
 8008a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	4313      	orrs	r3, r2
 8008a62:	4682      	mov	sl, r0
 8008a64:	468b      	mov	fp, r1
 8008a66:	f040 81f1 	bne.w	8008e4c <__ieee754_pow+0x6e4>
 8008a6a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008b28 <__ieee754_pow+0x3c0>
 8008a6e:	eeb0 8a47 	vmov.f32	s16, s14
 8008a72:	eef0 8a67 	vmov.f32	s17, s15
 8008a76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008a7a:	2600      	movs	r6, #0
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	463b      	mov	r3, r7
 8008a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a84:	f7f7 fbac 	bl	80001e0 <__aeabi_dsub>
 8008a88:	4622      	mov	r2, r4
 8008a8a:	462b      	mov	r3, r5
 8008a8c:	f7f7 fd60 	bl	8000550 <__aeabi_dmul>
 8008a90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a94:	4680      	mov	r8, r0
 8008a96:	4689      	mov	r9, r1
 8008a98:	4650      	mov	r0, sl
 8008a9a:	4659      	mov	r1, fp
 8008a9c:	f7f7 fd58 	bl	8000550 <__aeabi_dmul>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	f7f7 fb9c 	bl	80001e4 <__adddf3>
 8008aac:	4632      	mov	r2, r6
 8008aae:	463b      	mov	r3, r7
 8008ab0:	4680      	mov	r8, r0
 8008ab2:	4689      	mov	r9, r1
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f7f7 fd4a 	bl	8000550 <__aeabi_dmul>
 8008abc:	460b      	mov	r3, r1
 8008abe:	4604      	mov	r4, r0
 8008ac0:	460d      	mov	r5, r1
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	f7f7 fb8c 	bl	80001e4 <__adddf3>
 8008acc:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <__ieee754_pow+0x3dc>)
 8008ace:	4299      	cmp	r1, r3
 8008ad0:	ec45 4b19 	vmov	d9, r4, r5
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	460f      	mov	r7, r1
 8008ad8:	468b      	mov	fp, r1
 8008ada:	f340 82fe 	ble.w	80090da <__ieee754_pow+0x972>
 8008ade:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008ae2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008ae6:	4303      	orrs	r3, r0
 8008ae8:	f000 81f0 	beq.w	8008ecc <__ieee754_pow+0x764>
 8008aec:	a310      	add	r3, pc, #64	; (adr r3, 8008b30 <__ieee754_pow+0x3c8>)
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	ec51 0b18 	vmov	r0, r1, d8
 8008af6:	f7f7 fd2b 	bl	8000550 <__aeabi_dmul>
 8008afa:	a30d      	add	r3, pc, #52	; (adr r3, 8008b30 <__ieee754_pow+0x3c8>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	e6cb      	b.n	800889a <__ieee754_pow+0x132>
 8008b02:	bf00      	nop
 8008b04:	f3af 8000 	nop.w
 8008b08:	60000000 	.word	0x60000000
 8008b0c:	3ff71547 	.word	0x3ff71547
 8008b10:	f85ddf44 	.word	0xf85ddf44
 8008b14:	3e54ae0b 	.word	0x3e54ae0b
 8008b18:	55555555 	.word	0x55555555
 8008b1c:	3fd55555 	.word	0x3fd55555
 8008b20:	652b82fe 	.word	0x652b82fe
 8008b24:	3ff71547 	.word	0x3ff71547
 8008b28:	00000000 	.word	0x00000000
 8008b2c:	bff00000 	.word	0xbff00000
 8008b30:	8800759c 	.word	0x8800759c
 8008b34:	7e37e43c 	.word	0x7e37e43c
 8008b38:	3ff00000 	.word	0x3ff00000
 8008b3c:	3fd00000 	.word	0x3fd00000
 8008b40:	3fe00000 	.word	0x3fe00000
 8008b44:	408fffff 	.word	0x408fffff
 8008b48:	4bd7      	ldr	r3, [pc, #860]	; (8008ea8 <__ieee754_pow+0x740>)
 8008b4a:	ea03 0309 	and.w	r3, r3, r9
 8008b4e:	2200      	movs	r2, #0
 8008b50:	b92b      	cbnz	r3, 8008b5e <__ieee754_pow+0x3f6>
 8008b52:	4bd6      	ldr	r3, [pc, #856]	; (8008eac <__ieee754_pow+0x744>)
 8008b54:	f7f7 fcfc 	bl	8000550 <__aeabi_dmul>
 8008b58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	1523      	asrs	r3, r4, #20
 8008b60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b64:	4413      	add	r3, r2
 8008b66:	9309      	str	r3, [sp, #36]	; 0x24
 8008b68:	4bd1      	ldr	r3, [pc, #836]	; (8008eb0 <__ieee754_pow+0x748>)
 8008b6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008b6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008b72:	429c      	cmp	r4, r3
 8008b74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008b78:	dd08      	ble.n	8008b8c <__ieee754_pow+0x424>
 8008b7a:	4bce      	ldr	r3, [pc, #824]	; (8008eb4 <__ieee754_pow+0x74c>)
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	f340 8163 	ble.w	8008e48 <__ieee754_pow+0x6e0>
 8008b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b84:	3301      	adds	r3, #1
 8008b86:	9309      	str	r3, [sp, #36]	; 0x24
 8008b88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008b8c:	2400      	movs	r4, #0
 8008b8e:	00e3      	lsls	r3, r4, #3
 8008b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b92:	4bc9      	ldr	r3, [pc, #804]	; (8008eb8 <__ieee754_pow+0x750>)
 8008b94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b98:	ed93 7b00 	vldr	d7, [r3]
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	ec53 2b17 	vmov	r2, r3, d7
 8008ba2:	eeb0 8a47 	vmov.f32	s16, s14
 8008ba6:	eef0 8a67 	vmov.f32	s17, s15
 8008baa:	4682      	mov	sl, r0
 8008bac:	f7f7 fb18 	bl	80001e0 <__aeabi_dsub>
 8008bb0:	4652      	mov	r2, sl
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460f      	mov	r7, r1
 8008bb6:	462b      	mov	r3, r5
 8008bb8:	ec51 0b18 	vmov	r0, r1, d8
 8008bbc:	f7f7 fb12 	bl	80001e4 <__adddf3>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	49bd      	ldr	r1, [pc, #756]	; (8008ebc <__ieee754_pow+0x754>)
 8008bc8:	f7f7 fdec 	bl	80007a4 <__aeabi_ddiv>
 8008bcc:	ec41 0b19 	vmov	d9, r0, r1
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f7f7 fcba 	bl	8000550 <__aeabi_dmul>
 8008bdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008be0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008be4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008be8:	2300      	movs	r3, #0
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008bf0:	46ab      	mov	fp, r5
 8008bf2:	106d      	asrs	r5, r5, #1
 8008bf4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008bf8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008bfc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008c00:	2200      	movs	r2, #0
 8008c02:	4640      	mov	r0, r8
 8008c04:	4649      	mov	r1, r9
 8008c06:	4614      	mov	r4, r2
 8008c08:	461d      	mov	r5, r3
 8008c0a:	f7f7 fca1 	bl	8000550 <__aeabi_dmul>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4630      	mov	r0, r6
 8008c14:	4639      	mov	r1, r7
 8008c16:	f7f7 fae3 	bl	80001e0 <__aeabi_dsub>
 8008c1a:	ec53 2b18 	vmov	r2, r3, d8
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460f      	mov	r7, r1
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 fadb 	bl	80001e0 <__aeabi_dsub>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4650      	mov	r0, sl
 8008c30:	4659      	mov	r1, fp
 8008c32:	f7f7 fad5 	bl	80001e0 <__aeabi_dsub>
 8008c36:	4642      	mov	r2, r8
 8008c38:	464b      	mov	r3, r9
 8008c3a:	f7f7 fc89 	bl	8000550 <__aeabi_dmul>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 facb 	bl	80001e0 <__aeabi_dsub>
 8008c4a:	ec53 2b19 	vmov	r2, r3, d9
 8008c4e:	f7f7 fc7f 	bl	8000550 <__aeabi_dmul>
 8008c52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c56:	ec41 0b18 	vmov	d8, r0, r1
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	f7f7 fc77 	bl	8000550 <__aeabi_dmul>
 8008c62:	a37d      	add	r3, pc, #500	; (adr r3, 8008e58 <__ieee754_pow+0x6f0>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	4604      	mov	r4, r0
 8008c6a:	460d      	mov	r5, r1
 8008c6c:	f7f7 fc70 	bl	8000550 <__aeabi_dmul>
 8008c70:	a37b      	add	r3, pc, #492	; (adr r3, 8008e60 <__ieee754_pow+0x6f8>)
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f7f7 fab5 	bl	80001e4 <__adddf3>
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	f7f7 fc67 	bl	8000550 <__aeabi_dmul>
 8008c82:	a379      	add	r3, pc, #484	; (adr r3, 8008e68 <__ieee754_pow+0x700>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f7f7 faac 	bl	80001e4 <__adddf3>
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	462b      	mov	r3, r5
 8008c90:	f7f7 fc5e 	bl	8000550 <__aeabi_dmul>
 8008c94:	a376      	add	r3, pc, #472	; (adr r3, 8008e70 <__ieee754_pow+0x708>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f7f7 faa3 	bl	80001e4 <__adddf3>
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	f7f7 fc55 	bl	8000550 <__aeabi_dmul>
 8008ca6:	a374      	add	r3, pc, #464	; (adr r3, 8008e78 <__ieee754_pow+0x710>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fa9a 	bl	80001e4 <__adddf3>
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	462b      	mov	r3, r5
 8008cb4:	f7f7 fc4c 	bl	8000550 <__aeabi_dmul>
 8008cb8:	a371      	add	r3, pc, #452	; (adr r3, 8008e80 <__ieee754_pow+0x718>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fa91 	bl	80001e4 <__adddf3>
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	460f      	mov	r7, r1
 8008cc8:	462b      	mov	r3, r5
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7f7 fc3f 	bl	8000550 <__aeabi_dmul>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	4639      	mov	r1, r7
 8008cda:	f7f7 fc39 	bl	8000550 <__aeabi_dmul>
 8008cde:	4642      	mov	r2, r8
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	460d      	mov	r5, r1
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cea:	f7f7 fa7b 	bl	80001e4 <__adddf3>
 8008cee:	ec53 2b18 	vmov	r2, r3, d8
 8008cf2:	f7f7 fc2d 	bl	8000550 <__aeabi_dmul>
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	f7f7 fa73 	bl	80001e4 <__adddf3>
 8008cfe:	4642      	mov	r2, r8
 8008d00:	4682      	mov	sl, r0
 8008d02:	468b      	mov	fp, r1
 8008d04:	464b      	mov	r3, r9
 8008d06:	4640      	mov	r0, r8
 8008d08:	4649      	mov	r1, r9
 8008d0a:	f7f7 fc21 	bl	8000550 <__aeabi_dmul>
 8008d0e:	4b6c      	ldr	r3, [pc, #432]	; (8008ec0 <__ieee754_pow+0x758>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	4606      	mov	r6, r0
 8008d14:	460f      	mov	r7, r1
 8008d16:	f7f7 fa65 	bl	80001e4 <__adddf3>
 8008d1a:	4652      	mov	r2, sl
 8008d1c:	465b      	mov	r3, fp
 8008d1e:	f7f7 fa61 	bl	80001e4 <__adddf3>
 8008d22:	9c04      	ldr	r4, [sp, #16]
 8008d24:	460d      	mov	r5, r1
 8008d26:	4622      	mov	r2, r4
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	f7f7 fc0f 	bl	8000550 <__aeabi_dmul>
 8008d32:	4b63      	ldr	r3, [pc, #396]	; (8008ec0 <__ieee754_pow+0x758>)
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f7f7 fa4f 	bl	80001e0 <__aeabi_dsub>
 8008d42:	4632      	mov	r2, r6
 8008d44:	463b      	mov	r3, r7
 8008d46:	f7f7 fa4b 	bl	80001e0 <__aeabi_dsub>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4650      	mov	r0, sl
 8008d50:	4659      	mov	r1, fp
 8008d52:	f7f7 fa45 	bl	80001e0 <__aeabi_dsub>
 8008d56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d5a:	f7f7 fbf9 	bl	8000550 <__aeabi_dmul>
 8008d5e:	4622      	mov	r2, r4
 8008d60:	4606      	mov	r6, r0
 8008d62:	460f      	mov	r7, r1
 8008d64:	462b      	mov	r3, r5
 8008d66:	ec51 0b18 	vmov	r0, r1, d8
 8008d6a:	f7f7 fbf1 	bl	8000550 <__aeabi_dmul>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4630      	mov	r0, r6
 8008d74:	4639      	mov	r1, r7
 8008d76:	f7f7 fa35 	bl	80001e4 <__adddf3>
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	460f      	mov	r7, r1
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4640      	mov	r0, r8
 8008d84:	4649      	mov	r1, r9
 8008d86:	f7f7 fa2d 	bl	80001e4 <__adddf3>
 8008d8a:	9c04      	ldr	r4, [sp, #16]
 8008d8c:	a33e      	add	r3, pc, #248	; (adr r3, 8008e88 <__ieee754_pow+0x720>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	4620      	mov	r0, r4
 8008d94:	460d      	mov	r5, r1
 8008d96:	f7f7 fbdb 	bl	8000550 <__aeabi_dmul>
 8008d9a:	4642      	mov	r2, r8
 8008d9c:	ec41 0b18 	vmov	d8, r0, r1
 8008da0:	464b      	mov	r3, r9
 8008da2:	4620      	mov	r0, r4
 8008da4:	4629      	mov	r1, r5
 8008da6:	f7f7 fa1b 	bl	80001e0 <__aeabi_dsub>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	4630      	mov	r0, r6
 8008db0:	4639      	mov	r1, r7
 8008db2:	f7f7 fa15 	bl	80001e0 <__aeabi_dsub>
 8008db6:	a336      	add	r3, pc, #216	; (adr r3, 8008e90 <__ieee754_pow+0x728>)
 8008db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbc:	f7f7 fbc8 	bl	8000550 <__aeabi_dmul>
 8008dc0:	a335      	add	r3, pc, #212	; (adr r3, 8008e98 <__ieee754_pow+0x730>)
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	460f      	mov	r7, r1
 8008dca:	4620      	mov	r0, r4
 8008dcc:	4629      	mov	r1, r5
 8008dce:	f7f7 fbbf 	bl	8000550 <__aeabi_dmul>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4639      	mov	r1, r7
 8008dda:	f7f7 fa03 	bl	80001e4 <__adddf3>
 8008dde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008de0:	4b38      	ldr	r3, [pc, #224]	; (8008ec4 <__ieee754_pow+0x75c>)
 8008de2:	4413      	add	r3, r2
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f7f7 f9fc 	bl	80001e4 <__adddf3>
 8008dec:	4682      	mov	sl, r0
 8008dee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008df0:	468b      	mov	fp, r1
 8008df2:	f7f7 fb43 	bl	800047c <__aeabi_i2d>
 8008df6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008df8:	4b33      	ldr	r3, [pc, #204]	; (8008ec8 <__ieee754_pow+0x760>)
 8008dfa:	4413      	add	r3, r2
 8008dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e00:	4606      	mov	r6, r0
 8008e02:	460f      	mov	r7, r1
 8008e04:	4652      	mov	r2, sl
 8008e06:	465b      	mov	r3, fp
 8008e08:	ec51 0b18 	vmov	r0, r1, d8
 8008e0c:	f7f7 f9ea 	bl	80001e4 <__adddf3>
 8008e10:	4642      	mov	r2, r8
 8008e12:	464b      	mov	r3, r9
 8008e14:	f7f7 f9e6 	bl	80001e4 <__adddf3>
 8008e18:	4632      	mov	r2, r6
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	f7f7 f9e2 	bl	80001e4 <__adddf3>
 8008e20:	9c04      	ldr	r4, [sp, #16]
 8008e22:	4632      	mov	r2, r6
 8008e24:	463b      	mov	r3, r7
 8008e26:	4620      	mov	r0, r4
 8008e28:	460d      	mov	r5, r1
 8008e2a:	f7f7 f9d9 	bl	80001e0 <__aeabi_dsub>
 8008e2e:	4642      	mov	r2, r8
 8008e30:	464b      	mov	r3, r9
 8008e32:	f7f7 f9d5 	bl	80001e0 <__aeabi_dsub>
 8008e36:	ec53 2b18 	vmov	r2, r3, d8
 8008e3a:	f7f7 f9d1 	bl	80001e0 <__aeabi_dsub>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4650      	mov	r0, sl
 8008e44:	4659      	mov	r1, fp
 8008e46:	e606      	b.n	8008a56 <__ieee754_pow+0x2ee>
 8008e48:	2401      	movs	r4, #1
 8008e4a:	e6a0      	b.n	8008b8e <__ieee754_pow+0x426>
 8008e4c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008ea0 <__ieee754_pow+0x738>
 8008e50:	e60d      	b.n	8008a6e <__ieee754_pow+0x306>
 8008e52:	bf00      	nop
 8008e54:	f3af 8000 	nop.w
 8008e58:	4a454eef 	.word	0x4a454eef
 8008e5c:	3fca7e28 	.word	0x3fca7e28
 8008e60:	93c9db65 	.word	0x93c9db65
 8008e64:	3fcd864a 	.word	0x3fcd864a
 8008e68:	a91d4101 	.word	0xa91d4101
 8008e6c:	3fd17460 	.word	0x3fd17460
 8008e70:	518f264d 	.word	0x518f264d
 8008e74:	3fd55555 	.word	0x3fd55555
 8008e78:	db6fabff 	.word	0xdb6fabff
 8008e7c:	3fdb6db6 	.word	0x3fdb6db6
 8008e80:	33333303 	.word	0x33333303
 8008e84:	3fe33333 	.word	0x3fe33333
 8008e88:	e0000000 	.word	0xe0000000
 8008e8c:	3feec709 	.word	0x3feec709
 8008e90:	dc3a03fd 	.word	0xdc3a03fd
 8008e94:	3feec709 	.word	0x3feec709
 8008e98:	145b01f5 	.word	0x145b01f5
 8008e9c:	be3e2fe0 	.word	0xbe3e2fe0
 8008ea0:	00000000 	.word	0x00000000
 8008ea4:	3ff00000 	.word	0x3ff00000
 8008ea8:	7ff00000 	.word	0x7ff00000
 8008eac:	43400000 	.word	0x43400000
 8008eb0:	0003988e 	.word	0x0003988e
 8008eb4:	000bb679 	.word	0x000bb679
 8008eb8:	0800ab78 	.word	0x0800ab78
 8008ebc:	3ff00000 	.word	0x3ff00000
 8008ec0:	40080000 	.word	0x40080000
 8008ec4:	0800ab98 	.word	0x0800ab98
 8008ec8:	0800ab88 	.word	0x0800ab88
 8008ecc:	a3b5      	add	r3, pc, #724	; (adr r3, 80091a4 <__ieee754_pow+0xa3c>)
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	f7f7 f985 	bl	80001e4 <__adddf3>
 8008eda:	4622      	mov	r2, r4
 8008edc:	ec41 0b1a 	vmov	d10, r0, r1
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 f97b 	bl	80001e0 <__aeabi_dsub>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	ec51 0b1a 	vmov	r0, r1, d10
 8008ef2:	f7f7 fdbd 	bl	8000a70 <__aeabi_dcmpgt>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f47f adf8 	bne.w	8008aec <__ieee754_pow+0x384>
 8008efc:	4aa4      	ldr	r2, [pc, #656]	; (8009190 <__ieee754_pow+0xa28>)
 8008efe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f02:	4293      	cmp	r3, r2
 8008f04:	f340 810b 	ble.w	800911e <__ieee754_pow+0x9b6>
 8008f08:	151b      	asrs	r3, r3, #20
 8008f0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008f0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008f12:	fa4a f303 	asr.w	r3, sl, r3
 8008f16:	445b      	add	r3, fp
 8008f18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008f1c:	4e9d      	ldr	r6, [pc, #628]	; (8009194 <__ieee754_pow+0xa2c>)
 8008f1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008f22:	4116      	asrs	r6, r2
 8008f24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008f28:	2000      	movs	r0, #0
 8008f2a:	ea23 0106 	bic.w	r1, r3, r6
 8008f2e:	f1c2 0214 	rsb	r2, r2, #20
 8008f32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008f36:	fa4a fa02 	asr.w	sl, sl, r2
 8008f3a:	f1bb 0f00 	cmp.w	fp, #0
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4620      	mov	r0, r4
 8008f44:	4629      	mov	r1, r5
 8008f46:	bfb8      	it	lt
 8008f48:	f1ca 0a00 	rsblt	sl, sl, #0
 8008f4c:	f7f7 f948 	bl	80001e0 <__aeabi_dsub>
 8008f50:	ec41 0b19 	vmov	d9, r0, r1
 8008f54:	4642      	mov	r2, r8
 8008f56:	464b      	mov	r3, r9
 8008f58:	ec51 0b19 	vmov	r0, r1, d9
 8008f5c:	f7f7 f942 	bl	80001e4 <__adddf3>
 8008f60:	2400      	movs	r4, #0
 8008f62:	a379      	add	r3, pc, #484	; (adr r3, 8009148 <__ieee754_pow+0x9e0>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	4620      	mov	r0, r4
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	f7f7 faf0 	bl	8000550 <__aeabi_dmul>
 8008f70:	ec53 2b19 	vmov	r2, r3, d9
 8008f74:	4606      	mov	r6, r0
 8008f76:	460f      	mov	r7, r1
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 f930 	bl	80001e0 <__aeabi_dsub>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4640      	mov	r0, r8
 8008f86:	4649      	mov	r1, r9
 8008f88:	f7f7 f92a 	bl	80001e0 <__aeabi_dsub>
 8008f8c:	a370      	add	r3, pc, #448	; (adr r3, 8009150 <__ieee754_pow+0x9e8>)
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	f7f7 fadd 	bl	8000550 <__aeabi_dmul>
 8008f96:	a370      	add	r3, pc, #448	; (adr r3, 8009158 <__ieee754_pow+0x9f0>)
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	4680      	mov	r8, r0
 8008f9e:	4689      	mov	r9, r1
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	f7f7 fad4 	bl	8000550 <__aeabi_dmul>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4640      	mov	r0, r8
 8008fae:	4649      	mov	r1, r9
 8008fb0:	f7f7 f918 	bl	80001e4 <__adddf3>
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f7f7 f910 	bl	80001e4 <__adddf3>
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	4680      	mov	r8, r0
 8008fca:	4689      	mov	r9, r1
 8008fcc:	f7f7 f908 	bl	80001e0 <__aeabi_dsub>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7f7 f902 	bl	80001e0 <__aeabi_dsub>
 8008fdc:	4642      	mov	r2, r8
 8008fde:	4606      	mov	r6, r0
 8008fe0:	460f      	mov	r7, r1
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	f7f7 fab2 	bl	8000550 <__aeabi_dmul>
 8008fec:	a35c      	add	r3, pc, #368	; (adr r3, 8009160 <__ieee754_pow+0x9f8>)
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	f7f7 faab 	bl	8000550 <__aeabi_dmul>
 8008ffa:	a35b      	add	r3, pc, #364	; (adr r3, 8009168 <__ieee754_pow+0xa00>)
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	f7f7 f8ee 	bl	80001e0 <__aeabi_dsub>
 8009004:	4622      	mov	r2, r4
 8009006:	462b      	mov	r3, r5
 8009008:	f7f7 faa2 	bl	8000550 <__aeabi_dmul>
 800900c:	a358      	add	r3, pc, #352	; (adr r3, 8009170 <__ieee754_pow+0xa08>)
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f7f7 f8e7 	bl	80001e4 <__adddf3>
 8009016:	4622      	mov	r2, r4
 8009018:	462b      	mov	r3, r5
 800901a:	f7f7 fa99 	bl	8000550 <__aeabi_dmul>
 800901e:	a356      	add	r3, pc, #344	; (adr r3, 8009178 <__ieee754_pow+0xa10>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	f7f7 f8dc 	bl	80001e0 <__aeabi_dsub>
 8009028:	4622      	mov	r2, r4
 800902a:	462b      	mov	r3, r5
 800902c:	f7f7 fa90 	bl	8000550 <__aeabi_dmul>
 8009030:	a353      	add	r3, pc, #332	; (adr r3, 8009180 <__ieee754_pow+0xa18>)
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	f7f7 f8d5 	bl	80001e4 <__adddf3>
 800903a:	4622      	mov	r2, r4
 800903c:	462b      	mov	r3, r5
 800903e:	f7f7 fa87 	bl	8000550 <__aeabi_dmul>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4640      	mov	r0, r8
 8009048:	4649      	mov	r1, r9
 800904a:	f7f7 f8c9 	bl	80001e0 <__aeabi_dsub>
 800904e:	4604      	mov	r4, r0
 8009050:	460d      	mov	r5, r1
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	4640      	mov	r0, r8
 8009058:	4649      	mov	r1, r9
 800905a:	f7f7 fa79 	bl	8000550 <__aeabi_dmul>
 800905e:	2200      	movs	r2, #0
 8009060:	ec41 0b19 	vmov	d9, r0, r1
 8009064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009068:	4620      	mov	r0, r4
 800906a:	4629      	mov	r1, r5
 800906c:	f7f7 f8b8 	bl	80001e0 <__aeabi_dsub>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	ec51 0b19 	vmov	r0, r1, d9
 8009078:	f7f7 fb94 	bl	80007a4 <__aeabi_ddiv>
 800907c:	4632      	mov	r2, r6
 800907e:	4604      	mov	r4, r0
 8009080:	460d      	mov	r5, r1
 8009082:	463b      	mov	r3, r7
 8009084:	4640      	mov	r0, r8
 8009086:	4649      	mov	r1, r9
 8009088:	f7f7 fa62 	bl	8000550 <__aeabi_dmul>
 800908c:	4632      	mov	r2, r6
 800908e:	463b      	mov	r3, r7
 8009090:	f7f7 f8a8 	bl	80001e4 <__adddf3>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4620      	mov	r0, r4
 800909a:	4629      	mov	r1, r5
 800909c:	f7f7 f8a0 	bl	80001e0 <__aeabi_dsub>
 80090a0:	4642      	mov	r2, r8
 80090a2:	464b      	mov	r3, r9
 80090a4:	f7f7 f89c 	bl	80001e0 <__aeabi_dsub>
 80090a8:	460b      	mov	r3, r1
 80090aa:	4602      	mov	r2, r0
 80090ac:	493a      	ldr	r1, [pc, #232]	; (8009198 <__ieee754_pow+0xa30>)
 80090ae:	2000      	movs	r0, #0
 80090b0:	f7f7 f896 	bl	80001e0 <__aeabi_dsub>
 80090b4:	e9cd 0100 	strd	r0, r1, [sp]
 80090b8:	9b01      	ldr	r3, [sp, #4]
 80090ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80090be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090c2:	da2f      	bge.n	8009124 <__ieee754_pow+0x9bc>
 80090c4:	4650      	mov	r0, sl
 80090c6:	ed9d 0b00 	vldr	d0, [sp]
 80090ca:	f001 faf5 	bl	800a6b8 <scalbn>
 80090ce:	ec51 0b10 	vmov	r0, r1, d0
 80090d2:	ec53 2b18 	vmov	r2, r3, d8
 80090d6:	f7ff bbe0 	b.w	800889a <__ieee754_pow+0x132>
 80090da:	4b30      	ldr	r3, [pc, #192]	; (800919c <__ieee754_pow+0xa34>)
 80090dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80090e0:	429e      	cmp	r6, r3
 80090e2:	f77f af0b 	ble.w	8008efc <__ieee754_pow+0x794>
 80090e6:	4b2e      	ldr	r3, [pc, #184]	; (80091a0 <__ieee754_pow+0xa38>)
 80090e8:	440b      	add	r3, r1
 80090ea:	4303      	orrs	r3, r0
 80090ec:	d00b      	beq.n	8009106 <__ieee754_pow+0x99e>
 80090ee:	a326      	add	r3, pc, #152	; (adr r3, 8009188 <__ieee754_pow+0xa20>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	ec51 0b18 	vmov	r0, r1, d8
 80090f8:	f7f7 fa2a 	bl	8000550 <__aeabi_dmul>
 80090fc:	a322      	add	r3, pc, #136	; (adr r3, 8009188 <__ieee754_pow+0xa20>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	f7ff bbca 	b.w	800889a <__ieee754_pow+0x132>
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f7f7 f869 	bl	80001e0 <__aeabi_dsub>
 800910e:	4642      	mov	r2, r8
 8009110:	464b      	mov	r3, r9
 8009112:	f7f7 fca3 	bl	8000a5c <__aeabi_dcmpge>
 8009116:	2800      	cmp	r0, #0
 8009118:	f43f aef0 	beq.w	8008efc <__ieee754_pow+0x794>
 800911c:	e7e7      	b.n	80090ee <__ieee754_pow+0x986>
 800911e:	f04f 0a00 	mov.w	sl, #0
 8009122:	e717      	b.n	8008f54 <__ieee754_pow+0x7ec>
 8009124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009128:	4619      	mov	r1, r3
 800912a:	e7d2      	b.n	80090d2 <__ieee754_pow+0x96a>
 800912c:	491a      	ldr	r1, [pc, #104]	; (8009198 <__ieee754_pow+0xa30>)
 800912e:	2000      	movs	r0, #0
 8009130:	f7ff bb9e 	b.w	8008870 <__ieee754_pow+0x108>
 8009134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009138:	f7ff bb9a 	b.w	8008870 <__ieee754_pow+0x108>
 800913c:	9000      	str	r0, [sp, #0]
 800913e:	f7ff bb76 	b.w	800882e <__ieee754_pow+0xc6>
 8009142:	2100      	movs	r1, #0
 8009144:	f7ff bb60 	b.w	8008808 <__ieee754_pow+0xa0>
 8009148:	00000000 	.word	0x00000000
 800914c:	3fe62e43 	.word	0x3fe62e43
 8009150:	fefa39ef 	.word	0xfefa39ef
 8009154:	3fe62e42 	.word	0x3fe62e42
 8009158:	0ca86c39 	.word	0x0ca86c39
 800915c:	be205c61 	.word	0xbe205c61
 8009160:	72bea4d0 	.word	0x72bea4d0
 8009164:	3e663769 	.word	0x3e663769
 8009168:	c5d26bf1 	.word	0xc5d26bf1
 800916c:	3ebbbd41 	.word	0x3ebbbd41
 8009170:	af25de2c 	.word	0xaf25de2c
 8009174:	3f11566a 	.word	0x3f11566a
 8009178:	16bebd93 	.word	0x16bebd93
 800917c:	3f66c16c 	.word	0x3f66c16c
 8009180:	5555553e 	.word	0x5555553e
 8009184:	3fc55555 	.word	0x3fc55555
 8009188:	c2f8f359 	.word	0xc2f8f359
 800918c:	01a56e1f 	.word	0x01a56e1f
 8009190:	3fe00000 	.word	0x3fe00000
 8009194:	000fffff 	.word	0x000fffff
 8009198:	3ff00000 	.word	0x3ff00000
 800919c:	4090cbff 	.word	0x4090cbff
 80091a0:	3f6f3400 	.word	0x3f6f3400
 80091a4:	652b82fe 	.word	0x652b82fe
 80091a8:	3c971547 	.word	0x3c971547
 80091ac:	00000000 	.word	0x00000000

080091b0 <__ieee754_rem_pio2>:
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	ed2d 8b02 	vpush	{d8}
 80091b8:	ec55 4b10 	vmov	r4, r5, d0
 80091bc:	4bca      	ldr	r3, [pc, #808]	; (80094e8 <__ieee754_rem_pio2+0x338>)
 80091be:	b08b      	sub	sp, #44	; 0x2c
 80091c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80091c4:	4598      	cmp	r8, r3
 80091c6:	4682      	mov	sl, r0
 80091c8:	9502      	str	r5, [sp, #8]
 80091ca:	dc08      	bgt.n	80091de <__ieee754_rem_pio2+0x2e>
 80091cc:	2200      	movs	r2, #0
 80091ce:	2300      	movs	r3, #0
 80091d0:	ed80 0b00 	vstr	d0, [r0]
 80091d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80091d8:	f04f 0b00 	mov.w	fp, #0
 80091dc:	e028      	b.n	8009230 <__ieee754_rem_pio2+0x80>
 80091de:	4bc3      	ldr	r3, [pc, #780]	; (80094ec <__ieee754_rem_pio2+0x33c>)
 80091e0:	4598      	cmp	r8, r3
 80091e2:	dc78      	bgt.n	80092d6 <__ieee754_rem_pio2+0x126>
 80091e4:	9b02      	ldr	r3, [sp, #8]
 80091e6:	4ec2      	ldr	r6, [pc, #776]	; (80094f0 <__ieee754_rem_pio2+0x340>)
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	ee10 0a10 	vmov	r0, s0
 80091ee:	a3b0      	add	r3, pc, #704	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x300>)
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	4629      	mov	r1, r5
 80091f6:	dd39      	ble.n	800926c <__ieee754_rem_pio2+0xbc>
 80091f8:	f7f6 fff2 	bl	80001e0 <__aeabi_dsub>
 80091fc:	45b0      	cmp	r8, r6
 80091fe:	4604      	mov	r4, r0
 8009200:	460d      	mov	r5, r1
 8009202:	d01b      	beq.n	800923c <__ieee754_rem_pio2+0x8c>
 8009204:	a3ac      	add	r3, pc, #688	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x308>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f6 ffe9 	bl	80001e0 <__aeabi_dsub>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	e9ca 2300 	strd	r2, r3, [sl]
 8009216:	4620      	mov	r0, r4
 8009218:	4629      	mov	r1, r5
 800921a:	f7f6 ffe1 	bl	80001e0 <__aeabi_dsub>
 800921e:	a3a6      	add	r3, pc, #664	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x308>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f6 ffdc 	bl	80001e0 <__aeabi_dsub>
 8009228:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800922c:	f04f 0b01 	mov.w	fp, #1
 8009230:	4658      	mov	r0, fp
 8009232:	b00b      	add	sp, #44	; 0x2c
 8009234:	ecbd 8b02 	vpop	{d8}
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	a3a0      	add	r3, pc, #640	; (adr r3, 80094c0 <__ieee754_rem_pio2+0x310>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f6 ffcd 	bl	80001e0 <__aeabi_dsub>
 8009246:	a3a0      	add	r3, pc, #640	; (adr r3, 80094c8 <__ieee754_rem_pio2+0x318>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	4604      	mov	r4, r0
 800924e:	460d      	mov	r5, r1
 8009250:	f7f6 ffc6 	bl	80001e0 <__aeabi_dsub>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	e9ca 2300 	strd	r2, r3, [sl]
 800925c:	4620      	mov	r0, r4
 800925e:	4629      	mov	r1, r5
 8009260:	f7f6 ffbe 	bl	80001e0 <__aeabi_dsub>
 8009264:	a398      	add	r3, pc, #608	; (adr r3, 80094c8 <__ieee754_rem_pio2+0x318>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	e7db      	b.n	8009224 <__ieee754_rem_pio2+0x74>
 800926c:	f7f6 ffba 	bl	80001e4 <__adddf3>
 8009270:	45b0      	cmp	r8, r6
 8009272:	4604      	mov	r4, r0
 8009274:	460d      	mov	r5, r1
 8009276:	d016      	beq.n	80092a6 <__ieee754_rem_pio2+0xf6>
 8009278:	a38f      	add	r3, pc, #572	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x308>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	f7f6 ffb1 	bl	80001e4 <__adddf3>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	e9ca 2300 	strd	r2, r3, [sl]
 800928a:	4620      	mov	r0, r4
 800928c:	4629      	mov	r1, r5
 800928e:	f7f6 ffa7 	bl	80001e0 <__aeabi_dsub>
 8009292:	a389      	add	r3, pc, #548	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x308>)
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f7f6 ffa4 	bl	80001e4 <__adddf3>
 800929c:	f04f 3bff 	mov.w	fp, #4294967295
 80092a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092a4:	e7c4      	b.n	8009230 <__ieee754_rem_pio2+0x80>
 80092a6:	a386      	add	r3, pc, #536	; (adr r3, 80094c0 <__ieee754_rem_pio2+0x310>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f6 ff9a 	bl	80001e4 <__adddf3>
 80092b0:	a385      	add	r3, pc, #532	; (adr r3, 80094c8 <__ieee754_rem_pio2+0x318>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	f7f6 ff93 	bl	80001e4 <__adddf3>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	e9ca 2300 	strd	r2, r3, [sl]
 80092c6:	4620      	mov	r0, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7f6 ff89 	bl	80001e0 <__aeabi_dsub>
 80092ce:	a37e      	add	r3, pc, #504	; (adr r3, 80094c8 <__ieee754_rem_pio2+0x318>)
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	e7e0      	b.n	8009298 <__ieee754_rem_pio2+0xe8>
 80092d6:	4b87      	ldr	r3, [pc, #540]	; (80094f4 <__ieee754_rem_pio2+0x344>)
 80092d8:	4598      	cmp	r8, r3
 80092da:	f300 80d9 	bgt.w	8009490 <__ieee754_rem_pio2+0x2e0>
 80092de:	f001 f8c3 	bl	800a468 <fabs>
 80092e2:	ec55 4b10 	vmov	r4, r5, d0
 80092e6:	ee10 0a10 	vmov	r0, s0
 80092ea:	a379      	add	r3, pc, #484	; (adr r3, 80094d0 <__ieee754_rem_pio2+0x320>)
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7f7 f92d 	bl	8000550 <__aeabi_dmul>
 80092f6:	4b80      	ldr	r3, [pc, #512]	; (80094f8 <__ieee754_rem_pio2+0x348>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	f7f6 ff73 	bl	80001e4 <__adddf3>
 80092fe:	f7f7 fbd7 	bl	8000ab0 <__aeabi_d2iz>
 8009302:	4683      	mov	fp, r0
 8009304:	f7f7 f8ba 	bl	800047c <__aeabi_i2d>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	ec43 2b18 	vmov	d8, r2, r3
 8009310:	a367      	add	r3, pc, #412	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x300>)
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f7f7 f91b 	bl	8000550 <__aeabi_dmul>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4620      	mov	r0, r4
 8009320:	4629      	mov	r1, r5
 8009322:	f7f6 ff5d 	bl	80001e0 <__aeabi_dsub>
 8009326:	a364      	add	r3, pc, #400	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x308>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	4606      	mov	r6, r0
 800932e:	460f      	mov	r7, r1
 8009330:	ec51 0b18 	vmov	r0, r1, d8
 8009334:	f7f7 f90c 	bl	8000550 <__aeabi_dmul>
 8009338:	f1bb 0f1f 	cmp.w	fp, #31
 800933c:	4604      	mov	r4, r0
 800933e:	460d      	mov	r5, r1
 8009340:	dc0d      	bgt.n	800935e <__ieee754_rem_pio2+0x1ae>
 8009342:	4b6e      	ldr	r3, [pc, #440]	; (80094fc <__ieee754_rem_pio2+0x34c>)
 8009344:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	4543      	cmp	r3, r8
 800934e:	d006      	beq.n	800935e <__ieee754_rem_pio2+0x1ae>
 8009350:	4622      	mov	r2, r4
 8009352:	462b      	mov	r3, r5
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f6 ff42 	bl	80001e0 <__aeabi_dsub>
 800935c:	e00f      	b.n	800937e <__ieee754_rem_pio2+0x1ce>
 800935e:	462b      	mov	r3, r5
 8009360:	4622      	mov	r2, r4
 8009362:	4630      	mov	r0, r6
 8009364:	4639      	mov	r1, r7
 8009366:	f7f6 ff3b 	bl	80001e0 <__aeabi_dsub>
 800936a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800936e:	9303      	str	r3, [sp, #12]
 8009370:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009374:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009378:	f1b8 0f10 	cmp.w	r8, #16
 800937c:	dc02      	bgt.n	8009384 <__ieee754_rem_pio2+0x1d4>
 800937e:	e9ca 0100 	strd	r0, r1, [sl]
 8009382:	e039      	b.n	80093f8 <__ieee754_rem_pio2+0x248>
 8009384:	a34e      	add	r3, pc, #312	; (adr r3, 80094c0 <__ieee754_rem_pio2+0x310>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	ec51 0b18 	vmov	r0, r1, d8
 800938e:	f7f7 f8df 	bl	8000550 <__aeabi_dmul>
 8009392:	4604      	mov	r4, r0
 8009394:	460d      	mov	r5, r1
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	4630      	mov	r0, r6
 800939c:	4639      	mov	r1, r7
 800939e:	f7f6 ff1f 	bl	80001e0 <__aeabi_dsub>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4680      	mov	r8, r0
 80093a8:	4689      	mov	r9, r1
 80093aa:	4630      	mov	r0, r6
 80093ac:	4639      	mov	r1, r7
 80093ae:	f7f6 ff17 	bl	80001e0 <__aeabi_dsub>
 80093b2:	4622      	mov	r2, r4
 80093b4:	462b      	mov	r3, r5
 80093b6:	f7f6 ff13 	bl	80001e0 <__aeabi_dsub>
 80093ba:	a343      	add	r3, pc, #268	; (adr r3, 80094c8 <__ieee754_rem_pio2+0x318>)
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	4604      	mov	r4, r0
 80093c2:	460d      	mov	r5, r1
 80093c4:	ec51 0b18 	vmov	r0, r1, d8
 80093c8:	f7f7 f8c2 	bl	8000550 <__aeabi_dmul>
 80093cc:	4622      	mov	r2, r4
 80093ce:	462b      	mov	r3, r5
 80093d0:	f7f6 ff06 	bl	80001e0 <__aeabi_dsub>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4604      	mov	r4, r0
 80093da:	460d      	mov	r5, r1
 80093dc:	4640      	mov	r0, r8
 80093de:	4649      	mov	r1, r9
 80093e0:	f7f6 fefe 	bl	80001e0 <__aeabi_dsub>
 80093e4:	9a03      	ldr	r2, [sp, #12]
 80093e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b31      	cmp	r3, #49	; 0x31
 80093ee:	dc24      	bgt.n	800943a <__ieee754_rem_pio2+0x28a>
 80093f0:	e9ca 0100 	strd	r0, r1, [sl]
 80093f4:	4646      	mov	r6, r8
 80093f6:	464f      	mov	r7, r9
 80093f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80093fc:	4630      	mov	r0, r6
 80093fe:	4642      	mov	r2, r8
 8009400:	464b      	mov	r3, r9
 8009402:	4639      	mov	r1, r7
 8009404:	f7f6 feec 	bl	80001e0 <__aeabi_dsub>
 8009408:	462b      	mov	r3, r5
 800940a:	4622      	mov	r2, r4
 800940c:	f7f6 fee8 	bl	80001e0 <__aeabi_dsub>
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009418:	f6bf af0a 	bge.w	8009230 <__ieee754_rem_pio2+0x80>
 800941c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009420:	f8ca 3004 	str.w	r3, [sl, #4]
 8009424:	f8ca 8000 	str.w	r8, [sl]
 8009428:	f8ca 0008 	str.w	r0, [sl, #8]
 800942c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009430:	f8ca 300c 	str.w	r3, [sl, #12]
 8009434:	f1cb 0b00 	rsb	fp, fp, #0
 8009438:	e6fa      	b.n	8009230 <__ieee754_rem_pio2+0x80>
 800943a:	a327      	add	r3, pc, #156	; (adr r3, 80094d8 <__ieee754_rem_pio2+0x328>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	ec51 0b18 	vmov	r0, r1, d8
 8009444:	f7f7 f884 	bl	8000550 <__aeabi_dmul>
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4640      	mov	r0, r8
 8009452:	4649      	mov	r1, r9
 8009454:	f7f6 fec4 	bl	80001e0 <__aeabi_dsub>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4606      	mov	r6, r0
 800945e:	460f      	mov	r7, r1
 8009460:	4640      	mov	r0, r8
 8009462:	4649      	mov	r1, r9
 8009464:	f7f6 febc 	bl	80001e0 <__aeabi_dsub>
 8009468:	4622      	mov	r2, r4
 800946a:	462b      	mov	r3, r5
 800946c:	f7f6 feb8 	bl	80001e0 <__aeabi_dsub>
 8009470:	a31b      	add	r3, pc, #108	; (adr r3, 80094e0 <__ieee754_rem_pio2+0x330>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	4604      	mov	r4, r0
 8009478:	460d      	mov	r5, r1
 800947a:	ec51 0b18 	vmov	r0, r1, d8
 800947e:	f7f7 f867 	bl	8000550 <__aeabi_dmul>
 8009482:	4622      	mov	r2, r4
 8009484:	462b      	mov	r3, r5
 8009486:	f7f6 feab 	bl	80001e0 <__aeabi_dsub>
 800948a:	4604      	mov	r4, r0
 800948c:	460d      	mov	r5, r1
 800948e:	e75f      	b.n	8009350 <__ieee754_rem_pio2+0x1a0>
 8009490:	4b1b      	ldr	r3, [pc, #108]	; (8009500 <__ieee754_rem_pio2+0x350>)
 8009492:	4598      	cmp	r8, r3
 8009494:	dd36      	ble.n	8009504 <__ieee754_rem_pio2+0x354>
 8009496:	ee10 2a10 	vmov	r2, s0
 800949a:	462b      	mov	r3, r5
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f7f6 fe9e 	bl	80001e0 <__aeabi_dsub>
 80094a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80094a8:	e9ca 0100 	strd	r0, r1, [sl]
 80094ac:	e694      	b.n	80091d8 <__ieee754_rem_pio2+0x28>
 80094ae:	bf00      	nop
 80094b0:	54400000 	.word	0x54400000
 80094b4:	3ff921fb 	.word	0x3ff921fb
 80094b8:	1a626331 	.word	0x1a626331
 80094bc:	3dd0b461 	.word	0x3dd0b461
 80094c0:	1a600000 	.word	0x1a600000
 80094c4:	3dd0b461 	.word	0x3dd0b461
 80094c8:	2e037073 	.word	0x2e037073
 80094cc:	3ba3198a 	.word	0x3ba3198a
 80094d0:	6dc9c883 	.word	0x6dc9c883
 80094d4:	3fe45f30 	.word	0x3fe45f30
 80094d8:	2e000000 	.word	0x2e000000
 80094dc:	3ba3198a 	.word	0x3ba3198a
 80094e0:	252049c1 	.word	0x252049c1
 80094e4:	397b839a 	.word	0x397b839a
 80094e8:	3fe921fb 	.word	0x3fe921fb
 80094ec:	4002d97b 	.word	0x4002d97b
 80094f0:	3ff921fb 	.word	0x3ff921fb
 80094f4:	413921fb 	.word	0x413921fb
 80094f8:	3fe00000 	.word	0x3fe00000
 80094fc:	0800aba8 	.word	0x0800aba8
 8009500:	7fefffff 	.word	0x7fefffff
 8009504:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009508:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800950c:	ee10 0a10 	vmov	r0, s0
 8009510:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009514:	ee10 6a10 	vmov	r6, s0
 8009518:	460f      	mov	r7, r1
 800951a:	f7f7 fac9 	bl	8000ab0 <__aeabi_d2iz>
 800951e:	f7f6 ffad 	bl	800047c <__aeabi_i2d>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4630      	mov	r0, r6
 8009528:	4639      	mov	r1, r7
 800952a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800952e:	f7f6 fe57 	bl	80001e0 <__aeabi_dsub>
 8009532:	4b22      	ldr	r3, [pc, #136]	; (80095bc <__ieee754_rem_pio2+0x40c>)
 8009534:	2200      	movs	r2, #0
 8009536:	f7f7 f80b 	bl	8000550 <__aeabi_dmul>
 800953a:	460f      	mov	r7, r1
 800953c:	4606      	mov	r6, r0
 800953e:	f7f7 fab7 	bl	8000ab0 <__aeabi_d2iz>
 8009542:	f7f6 ff9b 	bl	800047c <__aeabi_i2d>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009552:	f7f6 fe45 	bl	80001e0 <__aeabi_dsub>
 8009556:	4b19      	ldr	r3, [pc, #100]	; (80095bc <__ieee754_rem_pio2+0x40c>)
 8009558:	2200      	movs	r2, #0
 800955a:	f7f6 fff9 	bl	8000550 <__aeabi_dmul>
 800955e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009562:	ad04      	add	r5, sp, #16
 8009564:	f04f 0803 	mov.w	r8, #3
 8009568:	46a9      	mov	r9, r5
 800956a:	2600      	movs	r6, #0
 800956c:	2700      	movs	r7, #0
 800956e:	4632      	mov	r2, r6
 8009570:	463b      	mov	r3, r7
 8009572:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009576:	46c3      	mov	fp, r8
 8009578:	3d08      	subs	r5, #8
 800957a:	f108 38ff 	add.w	r8, r8, #4294967295
 800957e:	f7f7 fa4f 	bl	8000a20 <__aeabi_dcmpeq>
 8009582:	2800      	cmp	r0, #0
 8009584:	d1f3      	bne.n	800956e <__ieee754_rem_pio2+0x3be>
 8009586:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <__ieee754_rem_pio2+0x410>)
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	2302      	movs	r3, #2
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	4622      	mov	r2, r4
 8009590:	465b      	mov	r3, fp
 8009592:	4651      	mov	r1, sl
 8009594:	4648      	mov	r0, r9
 8009596:	f000 f993 	bl	80098c0 <__kernel_rem_pio2>
 800959a:	9b02      	ldr	r3, [sp, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	4683      	mov	fp, r0
 80095a0:	f6bf ae46 	bge.w	8009230 <__ieee754_rem_pio2+0x80>
 80095a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80095a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80095ac:	f8ca 3004 	str.w	r3, [sl, #4]
 80095b0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80095b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80095b8:	e73a      	b.n	8009430 <__ieee754_rem_pio2+0x280>
 80095ba:	bf00      	nop
 80095bc:	41700000 	.word	0x41700000
 80095c0:	0800ac28 	.word	0x0800ac28

080095c4 <__ieee754_sqrt>:
 80095c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c8:	ec55 4b10 	vmov	r4, r5, d0
 80095cc:	4e56      	ldr	r6, [pc, #344]	; (8009728 <__ieee754_sqrt+0x164>)
 80095ce:	43ae      	bics	r6, r5
 80095d0:	ee10 0a10 	vmov	r0, s0
 80095d4:	ee10 3a10 	vmov	r3, s0
 80095d8:	4629      	mov	r1, r5
 80095da:	462a      	mov	r2, r5
 80095dc:	d110      	bne.n	8009600 <__ieee754_sqrt+0x3c>
 80095de:	ee10 2a10 	vmov	r2, s0
 80095e2:	462b      	mov	r3, r5
 80095e4:	f7f6 ffb4 	bl	8000550 <__aeabi_dmul>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4620      	mov	r0, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	f7f6 fdf8 	bl	80001e4 <__adddf3>
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	ec45 4b10 	vmov	d0, r4, r5
 80095fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009600:	2d00      	cmp	r5, #0
 8009602:	dc10      	bgt.n	8009626 <__ieee754_sqrt+0x62>
 8009604:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009608:	4330      	orrs	r0, r6
 800960a:	d0f5      	beq.n	80095f8 <__ieee754_sqrt+0x34>
 800960c:	b15d      	cbz	r5, 8009626 <__ieee754_sqrt+0x62>
 800960e:	ee10 2a10 	vmov	r2, s0
 8009612:	462b      	mov	r3, r5
 8009614:	ee10 0a10 	vmov	r0, s0
 8009618:	f7f6 fde2 	bl	80001e0 <__aeabi_dsub>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	f7f7 f8c0 	bl	80007a4 <__aeabi_ddiv>
 8009624:	e7e6      	b.n	80095f4 <__ieee754_sqrt+0x30>
 8009626:	1509      	asrs	r1, r1, #20
 8009628:	d076      	beq.n	8009718 <__ieee754_sqrt+0x154>
 800962a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800962e:	07ce      	lsls	r6, r1, #31
 8009630:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009634:	bf5e      	ittt	pl
 8009636:	0fda      	lsrpl	r2, r3, #31
 8009638:	005b      	lslpl	r3, r3, #1
 800963a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800963e:	0fda      	lsrs	r2, r3, #31
 8009640:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009644:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009648:	2000      	movs	r0, #0
 800964a:	106d      	asrs	r5, r5, #1
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	f04f 0e16 	mov.w	lr, #22
 8009652:	4684      	mov	ip, r0
 8009654:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009658:	eb0c 0401 	add.w	r4, ip, r1
 800965c:	4294      	cmp	r4, r2
 800965e:	bfde      	ittt	le
 8009660:	1b12      	suble	r2, r2, r4
 8009662:	eb04 0c01 	addle.w	ip, r4, r1
 8009666:	1840      	addle	r0, r0, r1
 8009668:	0052      	lsls	r2, r2, #1
 800966a:	f1be 0e01 	subs.w	lr, lr, #1
 800966e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009672:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800967a:	d1ed      	bne.n	8009658 <__ieee754_sqrt+0x94>
 800967c:	4671      	mov	r1, lr
 800967e:	2720      	movs	r7, #32
 8009680:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009684:	4562      	cmp	r2, ip
 8009686:	eb04 060e 	add.w	r6, r4, lr
 800968a:	dc02      	bgt.n	8009692 <__ieee754_sqrt+0xce>
 800968c:	d113      	bne.n	80096b6 <__ieee754_sqrt+0xf2>
 800968e:	429e      	cmp	r6, r3
 8009690:	d811      	bhi.n	80096b6 <__ieee754_sqrt+0xf2>
 8009692:	2e00      	cmp	r6, #0
 8009694:	eb06 0e04 	add.w	lr, r6, r4
 8009698:	da43      	bge.n	8009722 <__ieee754_sqrt+0x15e>
 800969a:	f1be 0f00 	cmp.w	lr, #0
 800969e:	db40      	blt.n	8009722 <__ieee754_sqrt+0x15e>
 80096a0:	f10c 0801 	add.w	r8, ip, #1
 80096a4:	eba2 020c 	sub.w	r2, r2, ip
 80096a8:	429e      	cmp	r6, r3
 80096aa:	bf88      	it	hi
 80096ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80096b0:	1b9b      	subs	r3, r3, r6
 80096b2:	4421      	add	r1, r4
 80096b4:	46c4      	mov	ip, r8
 80096b6:	0052      	lsls	r2, r2, #1
 80096b8:	3f01      	subs	r7, #1
 80096ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80096be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80096c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096c6:	d1dd      	bne.n	8009684 <__ieee754_sqrt+0xc0>
 80096c8:	4313      	orrs	r3, r2
 80096ca:	d006      	beq.n	80096da <__ieee754_sqrt+0x116>
 80096cc:	1c4c      	adds	r4, r1, #1
 80096ce:	bf13      	iteet	ne
 80096d0:	3101      	addne	r1, #1
 80096d2:	3001      	addeq	r0, #1
 80096d4:	4639      	moveq	r1, r7
 80096d6:	f021 0101 	bicne.w	r1, r1, #1
 80096da:	1043      	asrs	r3, r0, #1
 80096dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80096e0:	0849      	lsrs	r1, r1, #1
 80096e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80096e6:	07c2      	lsls	r2, r0, #31
 80096e8:	bf48      	it	mi
 80096ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80096ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80096f2:	460c      	mov	r4, r1
 80096f4:	463d      	mov	r5, r7
 80096f6:	e77f      	b.n	80095f8 <__ieee754_sqrt+0x34>
 80096f8:	0ada      	lsrs	r2, r3, #11
 80096fa:	3815      	subs	r0, #21
 80096fc:	055b      	lsls	r3, r3, #21
 80096fe:	2a00      	cmp	r2, #0
 8009700:	d0fa      	beq.n	80096f8 <__ieee754_sqrt+0x134>
 8009702:	02d7      	lsls	r7, r2, #11
 8009704:	d50a      	bpl.n	800971c <__ieee754_sqrt+0x158>
 8009706:	f1c1 0420 	rsb	r4, r1, #32
 800970a:	fa23 f404 	lsr.w	r4, r3, r4
 800970e:	1e4d      	subs	r5, r1, #1
 8009710:	408b      	lsls	r3, r1
 8009712:	4322      	orrs	r2, r4
 8009714:	1b41      	subs	r1, r0, r5
 8009716:	e788      	b.n	800962a <__ieee754_sqrt+0x66>
 8009718:	4608      	mov	r0, r1
 800971a:	e7f0      	b.n	80096fe <__ieee754_sqrt+0x13a>
 800971c:	0052      	lsls	r2, r2, #1
 800971e:	3101      	adds	r1, #1
 8009720:	e7ef      	b.n	8009702 <__ieee754_sqrt+0x13e>
 8009722:	46e0      	mov	r8, ip
 8009724:	e7be      	b.n	80096a4 <__ieee754_sqrt+0xe0>
 8009726:	bf00      	nop
 8009728:	7ff00000 	.word	0x7ff00000
 800972c:	00000000 	.word	0x00000000

08009730 <__kernel_cos>:
 8009730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	ec57 6b10 	vmov	r6, r7, d0
 8009738:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800973c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009740:	ed8d 1b00 	vstr	d1, [sp]
 8009744:	da07      	bge.n	8009756 <__kernel_cos+0x26>
 8009746:	ee10 0a10 	vmov	r0, s0
 800974a:	4639      	mov	r1, r7
 800974c:	f7f7 f9b0 	bl	8000ab0 <__aeabi_d2iz>
 8009750:	2800      	cmp	r0, #0
 8009752:	f000 8088 	beq.w	8009866 <__kernel_cos+0x136>
 8009756:	4632      	mov	r2, r6
 8009758:	463b      	mov	r3, r7
 800975a:	4630      	mov	r0, r6
 800975c:	4639      	mov	r1, r7
 800975e:	f7f6 fef7 	bl	8000550 <__aeabi_dmul>
 8009762:	4b51      	ldr	r3, [pc, #324]	; (80098a8 <__kernel_cos+0x178>)
 8009764:	2200      	movs	r2, #0
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
 800976a:	f7f6 fef1 	bl	8000550 <__aeabi_dmul>
 800976e:	a340      	add	r3, pc, #256	; (adr r3, 8009870 <__kernel_cos+0x140>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	4682      	mov	sl, r0
 8009776:	468b      	mov	fp, r1
 8009778:	4620      	mov	r0, r4
 800977a:	4629      	mov	r1, r5
 800977c:	f7f6 fee8 	bl	8000550 <__aeabi_dmul>
 8009780:	a33d      	add	r3, pc, #244	; (adr r3, 8009878 <__kernel_cos+0x148>)
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f7f6 fd2d 	bl	80001e4 <__adddf3>
 800978a:	4622      	mov	r2, r4
 800978c:	462b      	mov	r3, r5
 800978e:	f7f6 fedf 	bl	8000550 <__aeabi_dmul>
 8009792:	a33b      	add	r3, pc, #236	; (adr r3, 8009880 <__kernel_cos+0x150>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 fd22 	bl	80001e0 <__aeabi_dsub>
 800979c:	4622      	mov	r2, r4
 800979e:	462b      	mov	r3, r5
 80097a0:	f7f6 fed6 	bl	8000550 <__aeabi_dmul>
 80097a4:	a338      	add	r3, pc, #224	; (adr r3, 8009888 <__kernel_cos+0x158>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f6 fd1b 	bl	80001e4 <__adddf3>
 80097ae:	4622      	mov	r2, r4
 80097b0:	462b      	mov	r3, r5
 80097b2:	f7f6 fecd 	bl	8000550 <__aeabi_dmul>
 80097b6:	a336      	add	r3, pc, #216	; (adr r3, 8009890 <__kernel_cos+0x160>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f6 fd10 	bl	80001e0 <__aeabi_dsub>
 80097c0:	4622      	mov	r2, r4
 80097c2:	462b      	mov	r3, r5
 80097c4:	f7f6 fec4 	bl	8000550 <__aeabi_dmul>
 80097c8:	a333      	add	r3, pc, #204	; (adr r3, 8009898 <__kernel_cos+0x168>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f7f6 fd09 	bl	80001e4 <__adddf3>
 80097d2:	4622      	mov	r2, r4
 80097d4:	462b      	mov	r3, r5
 80097d6:	f7f6 febb 	bl	8000550 <__aeabi_dmul>
 80097da:	4622      	mov	r2, r4
 80097dc:	462b      	mov	r3, r5
 80097de:	f7f6 feb7 	bl	8000550 <__aeabi_dmul>
 80097e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097e6:	4604      	mov	r4, r0
 80097e8:	460d      	mov	r5, r1
 80097ea:	4630      	mov	r0, r6
 80097ec:	4639      	mov	r1, r7
 80097ee:	f7f6 feaf 	bl	8000550 <__aeabi_dmul>
 80097f2:	460b      	mov	r3, r1
 80097f4:	4602      	mov	r2, r0
 80097f6:	4629      	mov	r1, r5
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7f6 fcf1 	bl	80001e0 <__aeabi_dsub>
 80097fe:	4b2b      	ldr	r3, [pc, #172]	; (80098ac <__kernel_cos+0x17c>)
 8009800:	4598      	cmp	r8, r3
 8009802:	4606      	mov	r6, r0
 8009804:	460f      	mov	r7, r1
 8009806:	dc10      	bgt.n	800982a <__kernel_cos+0xfa>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4650      	mov	r0, sl
 800980e:	4659      	mov	r1, fp
 8009810:	f7f6 fce6 	bl	80001e0 <__aeabi_dsub>
 8009814:	460b      	mov	r3, r1
 8009816:	4926      	ldr	r1, [pc, #152]	; (80098b0 <__kernel_cos+0x180>)
 8009818:	4602      	mov	r2, r0
 800981a:	2000      	movs	r0, #0
 800981c:	f7f6 fce0 	bl	80001e0 <__aeabi_dsub>
 8009820:	ec41 0b10 	vmov	d0, r0, r1
 8009824:	b003      	add	sp, #12
 8009826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982a:	4b22      	ldr	r3, [pc, #136]	; (80098b4 <__kernel_cos+0x184>)
 800982c:	4920      	ldr	r1, [pc, #128]	; (80098b0 <__kernel_cos+0x180>)
 800982e:	4598      	cmp	r8, r3
 8009830:	bfcc      	ite	gt
 8009832:	4d21      	ldrgt	r5, [pc, #132]	; (80098b8 <__kernel_cos+0x188>)
 8009834:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009838:	2400      	movs	r4, #0
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	2000      	movs	r0, #0
 8009840:	f7f6 fcce 	bl	80001e0 <__aeabi_dsub>
 8009844:	4622      	mov	r2, r4
 8009846:	4680      	mov	r8, r0
 8009848:	4689      	mov	r9, r1
 800984a:	462b      	mov	r3, r5
 800984c:	4650      	mov	r0, sl
 800984e:	4659      	mov	r1, fp
 8009850:	f7f6 fcc6 	bl	80001e0 <__aeabi_dsub>
 8009854:	4632      	mov	r2, r6
 8009856:	463b      	mov	r3, r7
 8009858:	f7f6 fcc2 	bl	80001e0 <__aeabi_dsub>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4640      	mov	r0, r8
 8009862:	4649      	mov	r1, r9
 8009864:	e7da      	b.n	800981c <__kernel_cos+0xec>
 8009866:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80098a0 <__kernel_cos+0x170>
 800986a:	e7db      	b.n	8009824 <__kernel_cos+0xf4>
 800986c:	f3af 8000 	nop.w
 8009870:	be8838d4 	.word	0xbe8838d4
 8009874:	bda8fae9 	.word	0xbda8fae9
 8009878:	bdb4b1c4 	.word	0xbdb4b1c4
 800987c:	3e21ee9e 	.word	0x3e21ee9e
 8009880:	809c52ad 	.word	0x809c52ad
 8009884:	3e927e4f 	.word	0x3e927e4f
 8009888:	19cb1590 	.word	0x19cb1590
 800988c:	3efa01a0 	.word	0x3efa01a0
 8009890:	16c15177 	.word	0x16c15177
 8009894:	3f56c16c 	.word	0x3f56c16c
 8009898:	5555554c 	.word	0x5555554c
 800989c:	3fa55555 	.word	0x3fa55555
 80098a0:	00000000 	.word	0x00000000
 80098a4:	3ff00000 	.word	0x3ff00000
 80098a8:	3fe00000 	.word	0x3fe00000
 80098ac:	3fd33332 	.word	0x3fd33332
 80098b0:	3ff00000 	.word	0x3ff00000
 80098b4:	3fe90000 	.word	0x3fe90000
 80098b8:	3fd20000 	.word	0x3fd20000
 80098bc:	00000000 	.word	0x00000000

080098c0 <__kernel_rem_pio2>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	ed2d 8b02 	vpush	{d8}
 80098c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80098cc:	f112 0f14 	cmn.w	r2, #20
 80098d0:	9308      	str	r3, [sp, #32]
 80098d2:	9101      	str	r1, [sp, #4]
 80098d4:	4bc6      	ldr	r3, [pc, #792]	; (8009bf0 <__kernel_rem_pio2+0x330>)
 80098d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80098d8:	9009      	str	r0, [sp, #36]	; 0x24
 80098da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098de:	9304      	str	r3, [sp, #16]
 80098e0:	9b08      	ldr	r3, [sp, #32]
 80098e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80098e6:	bfa8      	it	ge
 80098e8:	1ed4      	subge	r4, r2, #3
 80098ea:	9306      	str	r3, [sp, #24]
 80098ec:	bfb2      	itee	lt
 80098ee:	2400      	movlt	r4, #0
 80098f0:	2318      	movge	r3, #24
 80098f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80098f6:	f06f 0317 	mvn.w	r3, #23
 80098fa:	fb04 3303 	mla	r3, r4, r3, r3
 80098fe:	eb03 0a02 	add.w	sl, r3, r2
 8009902:	9b04      	ldr	r3, [sp, #16]
 8009904:	9a06      	ldr	r2, [sp, #24]
 8009906:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009be0 <__kernel_rem_pio2+0x320>
 800990a:	eb03 0802 	add.w	r8, r3, r2
 800990e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009910:	1aa7      	subs	r7, r4, r2
 8009912:	ae20      	add	r6, sp, #128	; 0x80
 8009914:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009918:	2500      	movs	r5, #0
 800991a:	4545      	cmp	r5, r8
 800991c:	dd18      	ble.n	8009950 <__kernel_rem_pio2+0x90>
 800991e:	9b08      	ldr	r3, [sp, #32]
 8009920:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009924:	aa20      	add	r2, sp, #128	; 0x80
 8009926:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009be0 <__kernel_rem_pio2+0x320>
 800992a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800992e:	f1c3 0301 	rsb	r3, r3, #1
 8009932:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009936:	9307      	str	r3, [sp, #28]
 8009938:	9b07      	ldr	r3, [sp, #28]
 800993a:	9a04      	ldr	r2, [sp, #16]
 800993c:	4443      	add	r3, r8
 800993e:	429a      	cmp	r2, r3
 8009940:	db2f      	blt.n	80099a2 <__kernel_rem_pio2+0xe2>
 8009942:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009946:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800994a:	462f      	mov	r7, r5
 800994c:	2600      	movs	r6, #0
 800994e:	e01b      	b.n	8009988 <__kernel_rem_pio2+0xc8>
 8009950:	42ef      	cmn	r7, r5
 8009952:	d407      	bmi.n	8009964 <__kernel_rem_pio2+0xa4>
 8009954:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009958:	f7f6 fd90 	bl	800047c <__aeabi_i2d>
 800995c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009960:	3501      	adds	r5, #1
 8009962:	e7da      	b.n	800991a <__kernel_rem_pio2+0x5a>
 8009964:	ec51 0b18 	vmov	r0, r1, d8
 8009968:	e7f8      	b.n	800995c <__kernel_rem_pio2+0x9c>
 800996a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800996e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009972:	f7f6 fded 	bl	8000550 <__aeabi_dmul>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800997e:	f7f6 fc31 	bl	80001e4 <__adddf3>
 8009982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009986:	3601      	adds	r6, #1
 8009988:	9b06      	ldr	r3, [sp, #24]
 800998a:	429e      	cmp	r6, r3
 800998c:	f1a7 0708 	sub.w	r7, r7, #8
 8009990:	ddeb      	ble.n	800996a <__kernel_rem_pio2+0xaa>
 8009992:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009996:	3508      	adds	r5, #8
 8009998:	ecab 7b02 	vstmia	fp!, {d7}
 800999c:	f108 0801 	add.w	r8, r8, #1
 80099a0:	e7ca      	b.n	8009938 <__kernel_rem_pio2+0x78>
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	aa0c      	add	r2, sp, #48	; 0x30
 80099a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80099ac:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80099ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80099b2:	9c04      	ldr	r4, [sp, #16]
 80099b4:	930a      	str	r3, [sp, #40]	; 0x28
 80099b6:	ab98      	add	r3, sp, #608	; 0x260
 80099b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099bc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80099c0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80099c4:	f8cd b008 	str.w	fp, [sp, #8]
 80099c8:	4625      	mov	r5, r4
 80099ca:	2d00      	cmp	r5, #0
 80099cc:	dc78      	bgt.n	8009ac0 <__kernel_rem_pio2+0x200>
 80099ce:	ec47 6b10 	vmov	d0, r6, r7
 80099d2:	4650      	mov	r0, sl
 80099d4:	f000 fe70 	bl	800a6b8 <scalbn>
 80099d8:	ec57 6b10 	vmov	r6, r7, d0
 80099dc:	2200      	movs	r2, #0
 80099de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80099e2:	ee10 0a10 	vmov	r0, s0
 80099e6:	4639      	mov	r1, r7
 80099e8:	f7f6 fdb2 	bl	8000550 <__aeabi_dmul>
 80099ec:	ec41 0b10 	vmov	d0, r0, r1
 80099f0:	f000 fd4e 	bl	800a490 <floor>
 80099f4:	4b7f      	ldr	r3, [pc, #508]	; (8009bf4 <__kernel_rem_pio2+0x334>)
 80099f6:	ec51 0b10 	vmov	r0, r1, d0
 80099fa:	2200      	movs	r2, #0
 80099fc:	f7f6 fda8 	bl	8000550 <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4630      	mov	r0, r6
 8009a06:	4639      	mov	r1, r7
 8009a08:	f7f6 fbea 	bl	80001e0 <__aeabi_dsub>
 8009a0c:	460f      	mov	r7, r1
 8009a0e:	4606      	mov	r6, r0
 8009a10:	f7f7 f84e 	bl	8000ab0 <__aeabi_d2iz>
 8009a14:	9007      	str	r0, [sp, #28]
 8009a16:	f7f6 fd31 	bl	800047c <__aeabi_i2d>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	f7f6 fbdd 	bl	80001e0 <__aeabi_dsub>
 8009a26:	f1ba 0f00 	cmp.w	sl, #0
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	dd70      	ble.n	8009b12 <__kernel_rem_pio2+0x252>
 8009a30:	1e62      	subs	r2, r4, #1
 8009a32:	ab0c      	add	r3, sp, #48	; 0x30
 8009a34:	9d07      	ldr	r5, [sp, #28]
 8009a36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009a3a:	f1ca 0118 	rsb	r1, sl, #24
 8009a3e:	fa40 f301 	asr.w	r3, r0, r1
 8009a42:	441d      	add	r5, r3
 8009a44:	408b      	lsls	r3, r1
 8009a46:	1ac0      	subs	r0, r0, r3
 8009a48:	ab0c      	add	r3, sp, #48	; 0x30
 8009a4a:	9507      	str	r5, [sp, #28]
 8009a4c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009a50:	f1ca 0317 	rsb	r3, sl, #23
 8009a54:	fa40 f303 	asr.w	r3, r0, r3
 8009a58:	9302      	str	r3, [sp, #8]
 8009a5a:	9b02      	ldr	r3, [sp, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	dd66      	ble.n	8009b2e <__kernel_rem_pio2+0x26e>
 8009a60:	9b07      	ldr	r3, [sp, #28]
 8009a62:	2200      	movs	r2, #0
 8009a64:	3301      	adds	r3, #1
 8009a66:	9307      	str	r3, [sp, #28]
 8009a68:	4615      	mov	r5, r2
 8009a6a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009a6e:	4294      	cmp	r4, r2
 8009a70:	f300 8099 	bgt.w	8009ba6 <__kernel_rem_pio2+0x2e6>
 8009a74:	f1ba 0f00 	cmp.w	sl, #0
 8009a78:	dd07      	ble.n	8009a8a <__kernel_rem_pio2+0x1ca>
 8009a7a:	f1ba 0f01 	cmp.w	sl, #1
 8009a7e:	f000 80a5 	beq.w	8009bcc <__kernel_rem_pio2+0x30c>
 8009a82:	f1ba 0f02 	cmp.w	sl, #2
 8009a86:	f000 80c1 	beq.w	8009c0c <__kernel_rem_pio2+0x34c>
 8009a8a:	9b02      	ldr	r3, [sp, #8]
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d14e      	bne.n	8009b2e <__kernel_rem_pio2+0x26e>
 8009a90:	4632      	mov	r2, r6
 8009a92:	463b      	mov	r3, r7
 8009a94:	4958      	ldr	r1, [pc, #352]	; (8009bf8 <__kernel_rem_pio2+0x338>)
 8009a96:	2000      	movs	r0, #0
 8009a98:	f7f6 fba2 	bl	80001e0 <__aeabi_dsub>
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	460f      	mov	r7, r1
 8009aa0:	2d00      	cmp	r5, #0
 8009aa2:	d044      	beq.n	8009b2e <__kernel_rem_pio2+0x26e>
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009be8 <__kernel_rem_pio2+0x328>
 8009aaa:	f000 fe05 	bl	800a6b8 <scalbn>
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	ec53 2b10 	vmov	r2, r3, d0
 8009ab6:	f7f6 fb93 	bl	80001e0 <__aeabi_dsub>
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	e036      	b.n	8009b2e <__kernel_rem_pio2+0x26e>
 8009ac0:	4b4e      	ldr	r3, [pc, #312]	; (8009bfc <__kernel_rem_pio2+0x33c>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f7f6 fd42 	bl	8000550 <__aeabi_dmul>
 8009acc:	f7f6 fff0 	bl	8000ab0 <__aeabi_d2iz>
 8009ad0:	f7f6 fcd4 	bl	800047c <__aeabi_i2d>
 8009ad4:	4b4a      	ldr	r3, [pc, #296]	; (8009c00 <__kernel_rem_pio2+0x340>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	4680      	mov	r8, r0
 8009ada:	4689      	mov	r9, r1
 8009adc:	f7f6 fd38 	bl	8000550 <__aeabi_dmul>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	f7f6 fb7a 	bl	80001e0 <__aeabi_dsub>
 8009aec:	f7f6 ffe0 	bl	8000ab0 <__aeabi_d2iz>
 8009af0:	9b02      	ldr	r3, [sp, #8]
 8009af2:	f843 0b04 	str.w	r0, [r3], #4
 8009af6:	3d01      	subs	r5, #1
 8009af8:	9302      	str	r3, [sp, #8]
 8009afa:	ab70      	add	r3, sp, #448	; 0x1c0
 8009afc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	4640      	mov	r0, r8
 8009b06:	4649      	mov	r1, r9
 8009b08:	f7f6 fb6c 	bl	80001e4 <__adddf3>
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	460f      	mov	r7, r1
 8009b10:	e75b      	b.n	80099ca <__kernel_rem_pio2+0x10a>
 8009b12:	d105      	bne.n	8009b20 <__kernel_rem_pio2+0x260>
 8009b14:	1e63      	subs	r3, r4, #1
 8009b16:	aa0c      	add	r2, sp, #48	; 0x30
 8009b18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009b1c:	15c3      	asrs	r3, r0, #23
 8009b1e:	e79b      	b.n	8009a58 <__kernel_rem_pio2+0x198>
 8009b20:	4b38      	ldr	r3, [pc, #224]	; (8009c04 <__kernel_rem_pio2+0x344>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	f7f6 ff9a 	bl	8000a5c <__aeabi_dcmpge>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d139      	bne.n	8009ba0 <__kernel_rem_pio2+0x2e0>
 8009b2c:	9002      	str	r0, [sp, #8]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2300      	movs	r3, #0
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 ff73 	bl	8000a20 <__aeabi_dcmpeq>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	f000 80b4 	beq.w	8009ca8 <__kernel_rem_pio2+0x3e8>
 8009b40:	f104 3bff 	add.w	fp, r4, #4294967295
 8009b44:	465b      	mov	r3, fp
 8009b46:	2200      	movs	r2, #0
 8009b48:	9904      	ldr	r1, [sp, #16]
 8009b4a:	428b      	cmp	r3, r1
 8009b4c:	da65      	bge.n	8009c1a <__kernel_rem_pio2+0x35a>
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	d07b      	beq.n	8009c4a <__kernel_rem_pio2+0x38a>
 8009b52:	ab0c      	add	r3, sp, #48	; 0x30
 8009b54:	f1aa 0a18 	sub.w	sl, sl, #24
 8009b58:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 80a0 	beq.w	8009ca2 <__kernel_rem_pio2+0x3e2>
 8009b62:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009be8 <__kernel_rem_pio2+0x328>
 8009b66:	4650      	mov	r0, sl
 8009b68:	f000 fda6 	bl	800a6b8 <scalbn>
 8009b6c:	4f23      	ldr	r7, [pc, #140]	; (8009bfc <__kernel_rem_pio2+0x33c>)
 8009b6e:	ec55 4b10 	vmov	r4, r5, d0
 8009b72:	46d8      	mov	r8, fp
 8009b74:	2600      	movs	r6, #0
 8009b76:	f1b8 0f00 	cmp.w	r8, #0
 8009b7a:	f280 80cf 	bge.w	8009d1c <__kernel_rem_pio2+0x45c>
 8009b7e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009be0 <__kernel_rem_pio2+0x320>
 8009b82:	465f      	mov	r7, fp
 8009b84:	f04f 0800 	mov.w	r8, #0
 8009b88:	2f00      	cmp	r7, #0
 8009b8a:	f2c0 80fd 	blt.w	8009d88 <__kernel_rem_pio2+0x4c8>
 8009b8e:	ab70      	add	r3, sp, #448	; 0x1c0
 8009b90:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009c08 <__kernel_rem_pio2+0x348>
 8009b94:	ec55 4b18 	vmov	r4, r5, d8
 8009b98:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009b9c:	2600      	movs	r6, #0
 8009b9e:	e0e5      	b.n	8009d6c <__kernel_rem_pio2+0x4ac>
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	e75c      	b.n	8009a60 <__kernel_rem_pio2+0x1a0>
 8009ba6:	f8db 3000 	ldr.w	r3, [fp]
 8009baa:	b955      	cbnz	r5, 8009bc2 <__kernel_rem_pio2+0x302>
 8009bac:	b123      	cbz	r3, 8009bb8 <__kernel_rem_pio2+0x2f8>
 8009bae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009bb2:	f8cb 3000 	str.w	r3, [fp]
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	3201      	adds	r2, #1
 8009bba:	f10b 0b04 	add.w	fp, fp, #4
 8009bbe:	461d      	mov	r5, r3
 8009bc0:	e755      	b.n	8009a6e <__kernel_rem_pio2+0x1ae>
 8009bc2:	1acb      	subs	r3, r1, r3
 8009bc4:	f8cb 3000 	str.w	r3, [fp]
 8009bc8:	462b      	mov	r3, r5
 8009bca:	e7f5      	b.n	8009bb8 <__kernel_rem_pio2+0x2f8>
 8009bcc:	1e62      	subs	r2, r4, #1
 8009bce:	ab0c      	add	r3, sp, #48	; 0x30
 8009bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009bd8:	a90c      	add	r1, sp, #48	; 0x30
 8009bda:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009bde:	e754      	b.n	8009a8a <__kernel_rem_pio2+0x1ca>
	...
 8009bec:	3ff00000 	.word	0x3ff00000
 8009bf0:	0800ad70 	.word	0x0800ad70
 8009bf4:	40200000 	.word	0x40200000
 8009bf8:	3ff00000 	.word	0x3ff00000
 8009bfc:	3e700000 	.word	0x3e700000
 8009c00:	41700000 	.word	0x41700000
 8009c04:	3fe00000 	.word	0x3fe00000
 8009c08:	0800ad30 	.word	0x0800ad30
 8009c0c:	1e62      	subs	r2, r4, #1
 8009c0e:	ab0c      	add	r3, sp, #48	; 0x30
 8009c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009c18:	e7de      	b.n	8009bd8 <__kernel_rem_pio2+0x318>
 8009c1a:	a90c      	add	r1, sp, #48	; 0x30
 8009c1c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	430a      	orrs	r2, r1
 8009c24:	e790      	b.n	8009b48 <__kernel_rem_pio2+0x288>
 8009c26:	3301      	adds	r3, #1
 8009c28:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	d0fa      	beq.n	8009c26 <__kernel_rem_pio2+0x366>
 8009c30:	9a08      	ldr	r2, [sp, #32]
 8009c32:	18e3      	adds	r3, r4, r3
 8009c34:	18a6      	adds	r6, r4, r2
 8009c36:	aa20      	add	r2, sp, #128	; 0x80
 8009c38:	1c65      	adds	r5, r4, #1
 8009c3a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009c3e:	9302      	str	r3, [sp, #8]
 8009c40:	9b02      	ldr	r3, [sp, #8]
 8009c42:	42ab      	cmp	r3, r5
 8009c44:	da04      	bge.n	8009c50 <__kernel_rem_pio2+0x390>
 8009c46:	461c      	mov	r4, r3
 8009c48:	e6b5      	b.n	80099b6 <__kernel_rem_pio2+0xf6>
 8009c4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e7eb      	b.n	8009c28 <__kernel_rem_pio2+0x368>
 8009c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c56:	f7f6 fc11 	bl	800047c <__aeabi_i2d>
 8009c5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c60:	46b3      	mov	fp, r6
 8009c62:	461c      	mov	r4, r3
 8009c64:	2700      	movs	r7, #0
 8009c66:	f04f 0800 	mov.w	r8, #0
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	9b06      	ldr	r3, [sp, #24]
 8009c70:	429f      	cmp	r7, r3
 8009c72:	dd06      	ble.n	8009c82 <__kernel_rem_pio2+0x3c2>
 8009c74:	ab70      	add	r3, sp, #448	; 0x1c0
 8009c76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009c7a:	e9c3 8900 	strd	r8, r9, [r3]
 8009c7e:	3501      	adds	r5, #1
 8009c80:	e7de      	b.n	8009c40 <__kernel_rem_pio2+0x380>
 8009c82:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009c86:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009c8a:	f7f6 fc61 	bl	8000550 <__aeabi_dmul>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	4640      	mov	r0, r8
 8009c94:	4649      	mov	r1, r9
 8009c96:	f7f6 faa5 	bl	80001e4 <__adddf3>
 8009c9a:	3701      	adds	r7, #1
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4689      	mov	r9, r1
 8009ca0:	e7e5      	b.n	8009c6e <__kernel_rem_pio2+0x3ae>
 8009ca2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ca6:	e754      	b.n	8009b52 <__kernel_rem_pio2+0x292>
 8009ca8:	ec47 6b10 	vmov	d0, r6, r7
 8009cac:	f1ca 0000 	rsb	r0, sl, #0
 8009cb0:	f000 fd02 	bl	800a6b8 <scalbn>
 8009cb4:	ec57 6b10 	vmov	r6, r7, d0
 8009cb8:	4b9f      	ldr	r3, [pc, #636]	; (8009f38 <__kernel_rem_pio2+0x678>)
 8009cba:	ee10 0a10 	vmov	r0, s0
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4639      	mov	r1, r7
 8009cc2:	f7f6 fecb 	bl	8000a5c <__aeabi_dcmpge>
 8009cc6:	b300      	cbz	r0, 8009d0a <__kernel_rem_pio2+0x44a>
 8009cc8:	4b9c      	ldr	r3, [pc, #624]	; (8009f3c <__kernel_rem_pio2+0x67c>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4630      	mov	r0, r6
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f7f6 fc3e 	bl	8000550 <__aeabi_dmul>
 8009cd4:	f7f6 feec 	bl	8000ab0 <__aeabi_d2iz>
 8009cd8:	4605      	mov	r5, r0
 8009cda:	f7f6 fbcf 	bl	800047c <__aeabi_i2d>
 8009cde:	4b96      	ldr	r3, [pc, #600]	; (8009f38 <__kernel_rem_pio2+0x678>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f7f6 fc35 	bl	8000550 <__aeabi_dmul>
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4602      	mov	r2, r0
 8009cea:	4639      	mov	r1, r7
 8009cec:	4630      	mov	r0, r6
 8009cee:	f7f6 fa77 	bl	80001e0 <__aeabi_dsub>
 8009cf2:	f7f6 fedd 	bl	8000ab0 <__aeabi_d2iz>
 8009cf6:	f104 0b01 	add.w	fp, r4, #1
 8009cfa:	ab0c      	add	r3, sp, #48	; 0x30
 8009cfc:	f10a 0a18 	add.w	sl, sl, #24
 8009d00:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009d04:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009d08:	e72b      	b.n	8009b62 <__kernel_rem_pio2+0x2a2>
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	4639      	mov	r1, r7
 8009d0e:	f7f6 fecf 	bl	8000ab0 <__aeabi_d2iz>
 8009d12:	ab0c      	add	r3, sp, #48	; 0x30
 8009d14:	46a3      	mov	fp, r4
 8009d16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009d1a:	e722      	b.n	8009b62 <__kernel_rem_pio2+0x2a2>
 8009d1c:	ab70      	add	r3, sp, #448	; 0x1c0
 8009d1e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009d22:	ab0c      	add	r3, sp, #48	; 0x30
 8009d24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009d28:	f7f6 fba8 	bl	800047c <__aeabi_i2d>
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	462b      	mov	r3, r5
 8009d30:	f7f6 fc0e 	bl	8000550 <__aeabi_dmul>
 8009d34:	4632      	mov	r2, r6
 8009d36:	e9c9 0100 	strd	r0, r1, [r9]
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	4629      	mov	r1, r5
 8009d40:	f7f6 fc06 	bl	8000550 <__aeabi_dmul>
 8009d44:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d48:	4604      	mov	r4, r0
 8009d4a:	460d      	mov	r5, r1
 8009d4c:	e713      	b.n	8009b76 <__kernel_rem_pio2+0x2b6>
 8009d4e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009d52:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009d56:	f7f6 fbfb 	bl	8000550 <__aeabi_dmul>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4620      	mov	r0, r4
 8009d60:	4629      	mov	r1, r5
 8009d62:	f7f6 fa3f 	bl	80001e4 <__adddf3>
 8009d66:	3601      	adds	r6, #1
 8009d68:	4604      	mov	r4, r0
 8009d6a:	460d      	mov	r5, r1
 8009d6c:	9b04      	ldr	r3, [sp, #16]
 8009d6e:	429e      	cmp	r6, r3
 8009d70:	dc01      	bgt.n	8009d76 <__kernel_rem_pio2+0x4b6>
 8009d72:	45b0      	cmp	r8, r6
 8009d74:	daeb      	bge.n	8009d4e <__kernel_rem_pio2+0x48e>
 8009d76:	ab48      	add	r3, sp, #288	; 0x120
 8009d78:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d7c:	e9c3 4500 	strd	r4, r5, [r3]
 8009d80:	3f01      	subs	r7, #1
 8009d82:	f108 0801 	add.w	r8, r8, #1
 8009d86:	e6ff      	b.n	8009b88 <__kernel_rem_pio2+0x2c8>
 8009d88:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	dc0b      	bgt.n	8009da6 <__kernel_rem_pio2+0x4e6>
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	dc6e      	bgt.n	8009e70 <__kernel_rem_pio2+0x5b0>
 8009d92:	d045      	beq.n	8009e20 <__kernel_rem_pio2+0x560>
 8009d94:	9b07      	ldr	r3, [sp, #28]
 8009d96:	f003 0007 	and.w	r0, r3, #7
 8009d9a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009d9e:	ecbd 8b02 	vpop	{d8}
 8009da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009da8:	2b03      	cmp	r3, #3
 8009daa:	d1f3      	bne.n	8009d94 <__kernel_rem_pio2+0x4d4>
 8009dac:	ab48      	add	r3, sp, #288	; 0x120
 8009dae:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009db2:	46d0      	mov	r8, sl
 8009db4:	46d9      	mov	r9, fp
 8009db6:	f1b9 0f00 	cmp.w	r9, #0
 8009dba:	f1a8 0808 	sub.w	r8, r8, #8
 8009dbe:	dc64      	bgt.n	8009e8a <__kernel_rem_pio2+0x5ca>
 8009dc0:	465c      	mov	r4, fp
 8009dc2:	2c01      	cmp	r4, #1
 8009dc4:	f1aa 0a08 	sub.w	sl, sl, #8
 8009dc8:	dc7e      	bgt.n	8009ec8 <__kernel_rem_pio2+0x608>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	2100      	movs	r1, #0
 8009dce:	f1bb 0f01 	cmp.w	fp, #1
 8009dd2:	f300 8097 	bgt.w	8009f04 <__kernel_rem_pio2+0x644>
 8009dd6:	9b02      	ldr	r3, [sp, #8]
 8009dd8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8009ddc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f040 8099 	bne.w	8009f18 <__kernel_rem_pio2+0x658>
 8009de6:	9b01      	ldr	r3, [sp, #4]
 8009de8:	e9c3 5600 	strd	r5, r6, [r3]
 8009dec:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009df0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009df4:	e7ce      	b.n	8009d94 <__kernel_rem_pio2+0x4d4>
 8009df6:	ab48      	add	r3, sp, #288	; 0x120
 8009df8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f7f6 f9f0 	bl	80001e4 <__adddf3>
 8009e04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e08:	f1bb 0f00 	cmp.w	fp, #0
 8009e0c:	daf3      	bge.n	8009df6 <__kernel_rem_pio2+0x536>
 8009e0e:	9b02      	ldr	r3, [sp, #8]
 8009e10:	b113      	cbz	r3, 8009e18 <__kernel_rem_pio2+0x558>
 8009e12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e16:	4619      	mov	r1, r3
 8009e18:	9b01      	ldr	r3, [sp, #4]
 8009e1a:	e9c3 0100 	strd	r0, r1, [r3]
 8009e1e:	e7b9      	b.n	8009d94 <__kernel_rem_pio2+0x4d4>
 8009e20:	2000      	movs	r0, #0
 8009e22:	2100      	movs	r1, #0
 8009e24:	e7f0      	b.n	8009e08 <__kernel_rem_pio2+0x548>
 8009e26:	ab48      	add	r3, sp, #288	; 0x120
 8009e28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 f9d8 	bl	80001e4 <__adddf3>
 8009e34:	3c01      	subs	r4, #1
 8009e36:	2c00      	cmp	r4, #0
 8009e38:	daf5      	bge.n	8009e26 <__kernel_rem_pio2+0x566>
 8009e3a:	9b02      	ldr	r3, [sp, #8]
 8009e3c:	b1e3      	cbz	r3, 8009e78 <__kernel_rem_pio2+0x5b8>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e44:	9c01      	ldr	r4, [sp, #4]
 8009e46:	e9c4 2300 	strd	r2, r3, [r4]
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009e52:	f7f6 f9c5 	bl	80001e0 <__aeabi_dsub>
 8009e56:	ad4a      	add	r5, sp, #296	; 0x128
 8009e58:	2401      	movs	r4, #1
 8009e5a:	45a3      	cmp	fp, r4
 8009e5c:	da0f      	bge.n	8009e7e <__kernel_rem_pio2+0x5be>
 8009e5e:	9b02      	ldr	r3, [sp, #8]
 8009e60:	b113      	cbz	r3, 8009e68 <__kernel_rem_pio2+0x5a8>
 8009e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e66:	4619      	mov	r1, r3
 8009e68:	9b01      	ldr	r3, [sp, #4]
 8009e6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009e6e:	e791      	b.n	8009d94 <__kernel_rem_pio2+0x4d4>
 8009e70:	465c      	mov	r4, fp
 8009e72:	2000      	movs	r0, #0
 8009e74:	2100      	movs	r1, #0
 8009e76:	e7de      	b.n	8009e36 <__kernel_rem_pio2+0x576>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	e7e2      	b.n	8009e44 <__kernel_rem_pio2+0x584>
 8009e7e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009e82:	f7f6 f9af 	bl	80001e4 <__adddf3>
 8009e86:	3401      	adds	r4, #1
 8009e88:	e7e7      	b.n	8009e5a <__kernel_rem_pio2+0x59a>
 8009e8a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009e8e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8009e92:	4620      	mov	r0, r4
 8009e94:	4632      	mov	r2, r6
 8009e96:	463b      	mov	r3, r7
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7f6 f9a3 	bl	80001e4 <__adddf3>
 8009e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	f7f6 f999 	bl	80001e0 <__aeabi_dsub>
 8009eae:	4632      	mov	r2, r6
 8009eb0:	463b      	mov	r3, r7
 8009eb2:	f7f6 f997 	bl	80001e4 <__adddf3>
 8009eb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009eba:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009ebe:	ed88 7b00 	vstr	d7, [r8]
 8009ec2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009ec6:	e776      	b.n	8009db6 <__kernel_rem_pio2+0x4f6>
 8009ec8:	e9da 8900 	ldrd	r8, r9, [sl]
 8009ecc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009ed0:	4640      	mov	r0, r8
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	463b      	mov	r3, r7
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	f7f6 f984 	bl	80001e4 <__adddf3>
 8009edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4640      	mov	r0, r8
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	f7f6 f97a 	bl	80001e0 <__aeabi_dsub>
 8009eec:	4632      	mov	r2, r6
 8009eee:	463b      	mov	r3, r7
 8009ef0:	f7f6 f978 	bl	80001e4 <__adddf3>
 8009ef4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009ef8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009efc:	ed8a 7b00 	vstr	d7, [sl]
 8009f00:	3c01      	subs	r4, #1
 8009f02:	e75e      	b.n	8009dc2 <__kernel_rem_pio2+0x502>
 8009f04:	ab48      	add	r3, sp, #288	; 0x120
 8009f06:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f7f6 f969 	bl	80001e4 <__adddf3>
 8009f12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f16:	e75a      	b.n	8009dce <__kernel_rem_pio2+0x50e>
 8009f18:	9b01      	ldr	r3, [sp, #4]
 8009f1a:	9a01      	ldr	r2, [sp, #4]
 8009f1c:	601d      	str	r5, [r3, #0]
 8009f1e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009f22:	605c      	str	r4, [r3, #4]
 8009f24:	609f      	str	r7, [r3, #8]
 8009f26:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009f2a:	60d3      	str	r3, [r2, #12]
 8009f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f30:	6110      	str	r0, [r2, #16]
 8009f32:	6153      	str	r3, [r2, #20]
 8009f34:	e72e      	b.n	8009d94 <__kernel_rem_pio2+0x4d4>
 8009f36:	bf00      	nop
 8009f38:	41700000 	.word	0x41700000
 8009f3c:	3e700000 	.word	0x3e700000

08009f40 <__kernel_sin>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	ed2d 8b04 	vpush	{d8-d9}
 8009f48:	eeb0 8a41 	vmov.f32	s16, s2
 8009f4c:	eef0 8a61 	vmov.f32	s17, s3
 8009f50:	ec55 4b10 	vmov	r4, r5, d0
 8009f54:	b083      	sub	sp, #12
 8009f56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009f5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009f5e:	9001      	str	r0, [sp, #4]
 8009f60:	da06      	bge.n	8009f70 <__kernel_sin+0x30>
 8009f62:	ee10 0a10 	vmov	r0, s0
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7f6 fda2 	bl	8000ab0 <__aeabi_d2iz>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d051      	beq.n	800a014 <__kernel_sin+0xd4>
 8009f70:	4622      	mov	r2, r4
 8009f72:	462b      	mov	r3, r5
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 faea 	bl	8000550 <__aeabi_dmul>
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	468b      	mov	fp, r1
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4620      	mov	r0, r4
 8009f86:	4629      	mov	r1, r5
 8009f88:	f7f6 fae2 	bl	8000550 <__aeabi_dmul>
 8009f8c:	a341      	add	r3, pc, #260	; (adr r3, 800a094 <__kernel_sin+0x154>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	4680      	mov	r8, r0
 8009f94:	4689      	mov	r9, r1
 8009f96:	4650      	mov	r0, sl
 8009f98:	4659      	mov	r1, fp
 8009f9a:	f7f6 fad9 	bl	8000550 <__aeabi_dmul>
 8009f9e:	a33f      	add	r3, pc, #252	; (adr r3, 800a09c <__kernel_sin+0x15c>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 f91c 	bl	80001e0 <__aeabi_dsub>
 8009fa8:	4652      	mov	r2, sl
 8009faa:	465b      	mov	r3, fp
 8009fac:	f7f6 fad0 	bl	8000550 <__aeabi_dmul>
 8009fb0:	a33c      	add	r3, pc, #240	; (adr r3, 800a0a4 <__kernel_sin+0x164>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	f7f6 f915 	bl	80001e4 <__adddf3>
 8009fba:	4652      	mov	r2, sl
 8009fbc:	465b      	mov	r3, fp
 8009fbe:	f7f6 fac7 	bl	8000550 <__aeabi_dmul>
 8009fc2:	a33a      	add	r3, pc, #232	; (adr r3, 800a0ac <__kernel_sin+0x16c>)
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	f7f6 f90a 	bl	80001e0 <__aeabi_dsub>
 8009fcc:	4652      	mov	r2, sl
 8009fce:	465b      	mov	r3, fp
 8009fd0:	f7f6 fabe 	bl	8000550 <__aeabi_dmul>
 8009fd4:	a337      	add	r3, pc, #220	; (adr r3, 800a0b4 <__kernel_sin+0x174>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	f7f6 f903 	bl	80001e4 <__adddf3>
 8009fde:	9b01      	ldr	r3, [sp, #4]
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	460f      	mov	r7, r1
 8009fe4:	b9eb      	cbnz	r3, 800a022 <__kernel_sin+0xe2>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4650      	mov	r0, sl
 8009fec:	4659      	mov	r1, fp
 8009fee:	f7f6 faaf 	bl	8000550 <__aeabi_dmul>
 8009ff2:	a325      	add	r3, pc, #148	; (adr r3, 800a088 <__kernel_sin+0x148>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	f7f6 f8f2 	bl	80001e0 <__aeabi_dsub>
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	464b      	mov	r3, r9
 800a000:	f7f6 faa6 	bl	8000550 <__aeabi_dmul>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4620      	mov	r0, r4
 800a00a:	4629      	mov	r1, r5
 800a00c:	f7f6 f8ea 	bl	80001e4 <__adddf3>
 800a010:	4604      	mov	r4, r0
 800a012:	460d      	mov	r5, r1
 800a014:	ec45 4b10 	vmov	d0, r4, r5
 800a018:	b003      	add	sp, #12
 800a01a:	ecbd 8b04 	vpop	{d8-d9}
 800a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a022:	4b1b      	ldr	r3, [pc, #108]	; (800a090 <__kernel_sin+0x150>)
 800a024:	ec51 0b18 	vmov	r0, r1, d8
 800a028:	2200      	movs	r2, #0
 800a02a:	f7f6 fa91 	bl	8000550 <__aeabi_dmul>
 800a02e:	4632      	mov	r2, r6
 800a030:	ec41 0b19 	vmov	d9, r0, r1
 800a034:	463b      	mov	r3, r7
 800a036:	4640      	mov	r0, r8
 800a038:	4649      	mov	r1, r9
 800a03a:	f7f6 fa89 	bl	8000550 <__aeabi_dmul>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	ec51 0b19 	vmov	r0, r1, d9
 800a046:	f7f6 f8cb 	bl	80001e0 <__aeabi_dsub>
 800a04a:	4652      	mov	r2, sl
 800a04c:	465b      	mov	r3, fp
 800a04e:	f7f6 fa7f 	bl	8000550 <__aeabi_dmul>
 800a052:	ec53 2b18 	vmov	r2, r3, d8
 800a056:	f7f6 f8c3 	bl	80001e0 <__aeabi_dsub>
 800a05a:	a30b      	add	r3, pc, #44	; (adr r3, 800a088 <__kernel_sin+0x148>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	4606      	mov	r6, r0
 800a062:	460f      	mov	r7, r1
 800a064:	4640      	mov	r0, r8
 800a066:	4649      	mov	r1, r9
 800a068:	f7f6 fa72 	bl	8000550 <__aeabi_dmul>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 f8b6 	bl	80001e4 <__adddf3>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4620      	mov	r0, r4
 800a07e:	4629      	mov	r1, r5
 800a080:	f7f6 f8ae 	bl	80001e0 <__aeabi_dsub>
 800a084:	e7c4      	b.n	800a010 <__kernel_sin+0xd0>
 800a086:	bf00      	nop
 800a088:	55555549 	.word	0x55555549
 800a08c:	3fc55555 	.word	0x3fc55555
 800a090:	3fe00000 	.word	0x3fe00000
 800a094:	5acfd57c 	.word	0x5acfd57c
 800a098:	3de5d93a 	.word	0x3de5d93a
 800a09c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a0a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800a0a4:	57b1fe7d 	.word	0x57b1fe7d
 800a0a8:	3ec71de3 	.word	0x3ec71de3
 800a0ac:	19c161d5 	.word	0x19c161d5
 800a0b0:	3f2a01a0 	.word	0x3f2a01a0
 800a0b4:	1110f8a6 	.word	0x1110f8a6
 800a0b8:	3f811111 	.word	0x3f811111
 800a0bc:	00000000 	.word	0x00000000

0800a0c0 <__kernel_tan>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	ed2d 8b04 	vpush	{d8-d9}
 800a0c8:	ec5b ab10 	vmov	sl, fp, d0
 800a0cc:	4be2      	ldr	r3, [pc, #904]	; (800a458 <__kernel_tan+0x398>)
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800a0d4:	429f      	cmp	r7, r3
 800a0d6:	ed8d 1b00 	vstr	d1, [sp]
 800a0da:	4606      	mov	r6, r0
 800a0dc:	f8cd b00c 	str.w	fp, [sp, #12]
 800a0e0:	dc24      	bgt.n	800a12c <__kernel_tan+0x6c>
 800a0e2:	ee10 0a10 	vmov	r0, s0
 800a0e6:	4659      	mov	r1, fp
 800a0e8:	f7f6 fce2 	bl	8000ab0 <__aeabi_d2iz>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d148      	bne.n	800a182 <__kernel_tan+0xc2>
 800a0f0:	1c73      	adds	r3, r6, #1
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	433b      	orrs	r3, r7
 800a0f8:	d112      	bne.n	800a120 <__kernel_tan+0x60>
 800a0fa:	ec4b ab10 	vmov	d0, sl, fp
 800a0fe:	f000 f9b3 	bl	800a468 <fabs>
 800a102:	49d6      	ldr	r1, [pc, #856]	; (800a45c <__kernel_tan+0x39c>)
 800a104:	ec53 2b10 	vmov	r2, r3, d0
 800a108:	2000      	movs	r0, #0
 800a10a:	f7f6 fb4b 	bl	80007a4 <__aeabi_ddiv>
 800a10e:	4682      	mov	sl, r0
 800a110:	468b      	mov	fp, r1
 800a112:	ec4b ab10 	vmov	d0, sl, fp
 800a116:	b005      	add	sp, #20
 800a118:	ecbd 8b04 	vpop	{d8-d9}
 800a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a120:	2e01      	cmp	r6, #1
 800a122:	d0f6      	beq.n	800a112 <__kernel_tan+0x52>
 800a124:	49ce      	ldr	r1, [pc, #824]	; (800a460 <__kernel_tan+0x3a0>)
 800a126:	465b      	mov	r3, fp
 800a128:	2000      	movs	r0, #0
 800a12a:	e7ee      	b.n	800a10a <__kernel_tan+0x4a>
 800a12c:	4bcd      	ldr	r3, [pc, #820]	; (800a464 <__kernel_tan+0x3a4>)
 800a12e:	429f      	cmp	r7, r3
 800a130:	dd27      	ble.n	800a182 <__kernel_tan+0xc2>
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	da0a      	bge.n	800a14e <__kernel_tan+0x8e>
 800a138:	e9dd 2100 	ldrd	r2, r1, [sp]
 800a13c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a140:	469b      	mov	fp, r3
 800a142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a146:	e9cd 2300 	strd	r2, r3, [sp]
 800a14a:	ee10 aa10 	vmov	sl, s0
 800a14e:	4652      	mov	r2, sl
 800a150:	465b      	mov	r3, fp
 800a152:	a1a1      	add	r1, pc, #644	; (adr r1, 800a3d8 <__kernel_tan+0x318>)
 800a154:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a158:	f7f6 f842 	bl	80001e0 <__aeabi_dsub>
 800a15c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a160:	4604      	mov	r4, r0
 800a162:	460d      	mov	r5, r1
 800a164:	a19e      	add	r1, pc, #632	; (adr r1, 800a3e0 <__kernel_tan+0x320>)
 800a166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a16a:	f7f6 f839 	bl	80001e0 <__aeabi_dsub>
 800a16e:	4622      	mov	r2, r4
 800a170:	462b      	mov	r3, r5
 800a172:	f7f6 f837 	bl	80001e4 <__adddf3>
 800a176:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800a3e8 <__kernel_tan+0x328>
 800a17a:	ed8d 7b00 	vstr	d7, [sp]
 800a17e:	4682      	mov	sl, r0
 800a180:	468b      	mov	fp, r1
 800a182:	4652      	mov	r2, sl
 800a184:	465b      	mov	r3, fp
 800a186:	4650      	mov	r0, sl
 800a188:	4659      	mov	r1, fp
 800a18a:	f7f6 f9e1 	bl	8000550 <__aeabi_dmul>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4680      	mov	r8, r0
 800a194:	4689      	mov	r9, r1
 800a196:	f7f6 f9db 	bl	8000550 <__aeabi_dmul>
 800a19a:	4642      	mov	r2, r8
 800a19c:	4604      	mov	r4, r0
 800a19e:	460d      	mov	r5, r1
 800a1a0:	464b      	mov	r3, r9
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	f7f6 f9d3 	bl	8000550 <__aeabi_dmul>
 800a1aa:	a391      	add	r3, pc, #580	; (adr r3, 800a3f0 <__kernel_tan+0x330>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	ec41 0b18 	vmov	d8, r0, r1
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	f7f6 f9ca 	bl	8000550 <__aeabi_dmul>
 800a1bc:	a38e      	add	r3, pc, #568	; (adr r3, 800a3f8 <__kernel_tan+0x338>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	f7f6 f80f 	bl	80001e4 <__adddf3>
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	462b      	mov	r3, r5
 800a1ca:	f7f6 f9c1 	bl	8000550 <__aeabi_dmul>
 800a1ce:	a38c      	add	r3, pc, #560	; (adr r3, 800a400 <__kernel_tan+0x340>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f7f6 f806 	bl	80001e4 <__adddf3>
 800a1d8:	4622      	mov	r2, r4
 800a1da:	462b      	mov	r3, r5
 800a1dc:	f7f6 f9b8 	bl	8000550 <__aeabi_dmul>
 800a1e0:	a389      	add	r3, pc, #548	; (adr r3, 800a408 <__kernel_tan+0x348>)
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	f7f5 fffd 	bl	80001e4 <__adddf3>
 800a1ea:	4622      	mov	r2, r4
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	f7f6 f9af 	bl	8000550 <__aeabi_dmul>
 800a1f2:	a387      	add	r3, pc, #540	; (adr r3, 800a410 <__kernel_tan+0x350>)
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	f7f5 fff4 	bl	80001e4 <__adddf3>
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	462b      	mov	r3, r5
 800a200:	f7f6 f9a6 	bl	8000550 <__aeabi_dmul>
 800a204:	a384      	add	r3, pc, #528	; (adr r3, 800a418 <__kernel_tan+0x358>)
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	f7f5 ffeb 	bl	80001e4 <__adddf3>
 800a20e:	4642      	mov	r2, r8
 800a210:	464b      	mov	r3, r9
 800a212:	f7f6 f99d 	bl	8000550 <__aeabi_dmul>
 800a216:	a382      	add	r3, pc, #520	; (adr r3, 800a420 <__kernel_tan+0x360>)
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	ec41 0b19 	vmov	d9, r0, r1
 800a220:	4620      	mov	r0, r4
 800a222:	4629      	mov	r1, r5
 800a224:	f7f6 f994 	bl	8000550 <__aeabi_dmul>
 800a228:	a37f      	add	r3, pc, #508	; (adr r3, 800a428 <__kernel_tan+0x368>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f5 ffd9 	bl	80001e4 <__adddf3>
 800a232:	4622      	mov	r2, r4
 800a234:	462b      	mov	r3, r5
 800a236:	f7f6 f98b 	bl	8000550 <__aeabi_dmul>
 800a23a:	a37d      	add	r3, pc, #500	; (adr r3, 800a430 <__kernel_tan+0x370>)
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7f5 ffd0 	bl	80001e4 <__adddf3>
 800a244:	4622      	mov	r2, r4
 800a246:	462b      	mov	r3, r5
 800a248:	f7f6 f982 	bl	8000550 <__aeabi_dmul>
 800a24c:	a37a      	add	r3, pc, #488	; (adr r3, 800a438 <__kernel_tan+0x378>)
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	f7f5 ffc7 	bl	80001e4 <__adddf3>
 800a256:	4622      	mov	r2, r4
 800a258:	462b      	mov	r3, r5
 800a25a:	f7f6 f979 	bl	8000550 <__aeabi_dmul>
 800a25e:	a378      	add	r3, pc, #480	; (adr r3, 800a440 <__kernel_tan+0x380>)
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	f7f5 ffbe 	bl	80001e4 <__adddf3>
 800a268:	4622      	mov	r2, r4
 800a26a:	462b      	mov	r3, r5
 800a26c:	f7f6 f970 	bl	8000550 <__aeabi_dmul>
 800a270:	a375      	add	r3, pc, #468	; (adr r3, 800a448 <__kernel_tan+0x388>)
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f7f5 ffb5 	bl	80001e4 <__adddf3>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	ec51 0b19 	vmov	r0, r1, d9
 800a282:	f7f5 ffaf 	bl	80001e4 <__adddf3>
 800a286:	ec53 2b18 	vmov	r2, r3, d8
 800a28a:	f7f6 f961 	bl	8000550 <__aeabi_dmul>
 800a28e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a292:	f7f5 ffa7 	bl	80001e4 <__adddf3>
 800a296:	4642      	mov	r2, r8
 800a298:	464b      	mov	r3, r9
 800a29a:	f7f6 f959 	bl	8000550 <__aeabi_dmul>
 800a29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2a2:	f7f5 ff9f 	bl	80001e4 <__adddf3>
 800a2a6:	a36a      	add	r3, pc, #424	; (adr r3, 800a450 <__kernel_tan+0x390>)
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	ec51 0b18 	vmov	r0, r1, d8
 800a2b4:	f7f6 f94c 	bl	8000550 <__aeabi_dmul>
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	462b      	mov	r3, r5
 800a2bc:	f7f5 ff92 	bl	80001e4 <__adddf3>
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	ec41 0b18 	vmov	d8, r0, r1
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	4650      	mov	r0, sl
 800a2cc:	f7f5 ff8a 	bl	80001e4 <__adddf3>
 800a2d0:	4b64      	ldr	r3, [pc, #400]	; (800a464 <__kernel_tan+0x3a4>)
 800a2d2:	429f      	cmp	r7, r3
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	dd3e      	ble.n	800a358 <__kernel_tan+0x298>
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7f6 f8ce 	bl	800047c <__aeabi_i2d>
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	4689      	mov	r9, r1
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	f7f6 f930 	bl	8000550 <__aeabi_dmul>
 800a2f0:	4642      	mov	r2, r8
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	460f      	mov	r7, r1
 800a2f6:	464b      	mov	r3, r9
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	f7f5 ff72 	bl	80001e4 <__adddf3>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4630      	mov	r0, r6
 800a306:	4639      	mov	r1, r7
 800a308:	f7f6 fa4c 	bl	80007a4 <__aeabi_ddiv>
 800a30c:	ec53 2b18 	vmov	r2, r3, d8
 800a310:	f7f5 ff66 	bl	80001e0 <__aeabi_dsub>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4650      	mov	r0, sl
 800a31a:	4659      	mov	r1, fp
 800a31c:	f7f5 ff60 	bl	80001e0 <__aeabi_dsub>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	f7f5 ff5e 	bl	80001e4 <__adddf3>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	4640      	mov	r0, r8
 800a32e:	4649      	mov	r1, r9
 800a330:	f7f5 ff56 	bl	80001e0 <__aeabi_dsub>
 800a334:	9b03      	ldr	r3, [sp, #12]
 800a336:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800a33a:	f00a 0a02 	and.w	sl, sl, #2
 800a33e:	4604      	mov	r4, r0
 800a340:	f1ca 0001 	rsb	r0, sl, #1
 800a344:	460d      	mov	r5, r1
 800a346:	f7f6 f899 	bl	800047c <__aeabi_i2d>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4620      	mov	r0, r4
 800a350:	4629      	mov	r1, r5
 800a352:	f7f6 f8fd 	bl	8000550 <__aeabi_dmul>
 800a356:	e6da      	b.n	800a10e <__kernel_tan+0x4e>
 800a358:	2e01      	cmp	r6, #1
 800a35a:	d038      	beq.n	800a3ce <__kernel_tan+0x30e>
 800a35c:	460f      	mov	r7, r1
 800a35e:	4689      	mov	r9, r1
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	2000      	movs	r0, #0
 800a366:	493e      	ldr	r1, [pc, #248]	; (800a460 <__kernel_tan+0x3a0>)
 800a368:	f7f6 fa1c 	bl	80007a4 <__aeabi_ddiv>
 800a36c:	2600      	movs	r6, #0
 800a36e:	e9cd 0100 	strd	r0, r1, [sp]
 800a372:	4652      	mov	r2, sl
 800a374:	465b      	mov	r3, fp
 800a376:	4630      	mov	r0, r6
 800a378:	4639      	mov	r1, r7
 800a37a:	f7f5 ff31 	bl	80001e0 <__aeabi_dsub>
 800a37e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	ec51 0b18 	vmov	r0, r1, d8
 800a38a:	f7f5 ff29 	bl	80001e0 <__aeabi_dsub>
 800a38e:	4632      	mov	r2, r6
 800a390:	462b      	mov	r3, r5
 800a392:	f7f6 f8dd 	bl	8000550 <__aeabi_dmul>
 800a396:	46b0      	mov	r8, r6
 800a398:	460f      	mov	r7, r1
 800a39a:	4606      	mov	r6, r0
 800a39c:	4642      	mov	r2, r8
 800a39e:	462b      	mov	r3, r5
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	f7f6 f8d4 	bl	8000550 <__aeabi_dmul>
 800a3a8:	4b2c      	ldr	r3, [pc, #176]	; (800a45c <__kernel_tan+0x39c>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f7f5 ff1a 	bl	80001e4 <__adddf3>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	f7f5 ff14 	bl	80001e4 <__adddf3>
 800a3bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3c0:	f7f6 f8c6 	bl	8000550 <__aeabi_dmul>
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	462b      	mov	r3, r5
 800a3c8:	f7f5 ff0c 	bl	80001e4 <__adddf3>
 800a3cc:	e69f      	b.n	800a10e <__kernel_tan+0x4e>
 800a3ce:	4682      	mov	sl, r0
 800a3d0:	468b      	mov	fp, r1
 800a3d2:	e69e      	b.n	800a112 <__kernel_tan+0x52>
 800a3d4:	f3af 8000 	nop.w
 800a3d8:	54442d18 	.word	0x54442d18
 800a3dc:	3fe921fb 	.word	0x3fe921fb
 800a3e0:	33145c07 	.word	0x33145c07
 800a3e4:	3c81a626 	.word	0x3c81a626
	...
 800a3f0:	74bf7ad4 	.word	0x74bf7ad4
 800a3f4:	3efb2a70 	.word	0x3efb2a70
 800a3f8:	32f0a7e9 	.word	0x32f0a7e9
 800a3fc:	3f12b80f 	.word	0x3f12b80f
 800a400:	1a8d1068 	.word	0x1a8d1068
 800a404:	3f3026f7 	.word	0x3f3026f7
 800a408:	fee08315 	.word	0xfee08315
 800a40c:	3f57dbc8 	.word	0x3f57dbc8
 800a410:	e96e8493 	.word	0xe96e8493
 800a414:	3f8226e3 	.word	0x3f8226e3
 800a418:	1bb341fe 	.word	0x1bb341fe
 800a41c:	3faba1ba 	.word	0x3faba1ba
 800a420:	db605373 	.word	0xdb605373
 800a424:	bef375cb 	.word	0xbef375cb
 800a428:	a03792a6 	.word	0xa03792a6
 800a42c:	3f147e88 	.word	0x3f147e88
 800a430:	f2f26501 	.word	0xf2f26501
 800a434:	3f4344d8 	.word	0x3f4344d8
 800a438:	c9560328 	.word	0xc9560328
 800a43c:	3f6d6d22 	.word	0x3f6d6d22
 800a440:	8406d637 	.word	0x8406d637
 800a444:	3f9664f4 	.word	0x3f9664f4
 800a448:	1110fe7a 	.word	0x1110fe7a
 800a44c:	3fc11111 	.word	0x3fc11111
 800a450:	55555563 	.word	0x55555563
 800a454:	3fd55555 	.word	0x3fd55555
 800a458:	3e2fffff 	.word	0x3e2fffff
 800a45c:	3ff00000 	.word	0x3ff00000
 800a460:	bff00000 	.word	0xbff00000
 800a464:	3fe59427 	.word	0x3fe59427

0800a468 <fabs>:
 800a468:	ec51 0b10 	vmov	r0, r1, d0
 800a46c:	ee10 2a10 	vmov	r2, s0
 800a470:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a474:	ec43 2b10 	vmov	d0, r2, r3
 800a478:	4770      	bx	lr

0800a47a <finite>:
 800a47a:	b082      	sub	sp, #8
 800a47c:	ed8d 0b00 	vstr	d0, [sp]
 800a480:	9801      	ldr	r0, [sp, #4]
 800a482:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a486:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a48a:	0fc0      	lsrs	r0, r0, #31
 800a48c:	b002      	add	sp, #8
 800a48e:	4770      	bx	lr

0800a490 <floor>:
 800a490:	ec51 0b10 	vmov	r0, r1, d0
 800a494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a498:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a49c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a4a0:	2e13      	cmp	r6, #19
 800a4a2:	ee10 5a10 	vmov	r5, s0
 800a4a6:	ee10 8a10 	vmov	r8, s0
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	dc32      	bgt.n	800a514 <floor+0x84>
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	da14      	bge.n	800a4dc <floor+0x4c>
 800a4b2:	a333      	add	r3, pc, #204	; (adr r3, 800a580 <floor+0xf0>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f7f5 fe94 	bl	80001e4 <__adddf3>
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f7f6 fad6 	bl	8000a70 <__aeabi_dcmpgt>
 800a4c4:	b138      	cbz	r0, 800a4d6 <floor+0x46>
 800a4c6:	2c00      	cmp	r4, #0
 800a4c8:	da57      	bge.n	800a57a <floor+0xea>
 800a4ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a4ce:	431d      	orrs	r5, r3
 800a4d0:	d001      	beq.n	800a4d6 <floor+0x46>
 800a4d2:	4c2d      	ldr	r4, [pc, #180]	; (800a588 <floor+0xf8>)
 800a4d4:	2500      	movs	r5, #0
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	e025      	b.n	800a528 <floor+0x98>
 800a4dc:	4f2b      	ldr	r7, [pc, #172]	; (800a58c <floor+0xfc>)
 800a4de:	4137      	asrs	r7, r6
 800a4e0:	ea01 0307 	and.w	r3, r1, r7
 800a4e4:	4303      	orrs	r3, r0
 800a4e6:	d01f      	beq.n	800a528 <floor+0x98>
 800a4e8:	a325      	add	r3, pc, #148	; (adr r3, 800a580 <floor+0xf0>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	f7f5 fe79 	bl	80001e4 <__adddf3>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f7f6 fabb 	bl	8000a70 <__aeabi_dcmpgt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d0eb      	beq.n	800a4d6 <floor+0x46>
 800a4fe:	2c00      	cmp	r4, #0
 800a500:	bfbe      	ittt	lt
 800a502:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a506:	fa43 f606 	asrlt.w	r6, r3, r6
 800a50a:	19a4      	addlt	r4, r4, r6
 800a50c:	ea24 0407 	bic.w	r4, r4, r7
 800a510:	2500      	movs	r5, #0
 800a512:	e7e0      	b.n	800a4d6 <floor+0x46>
 800a514:	2e33      	cmp	r6, #51	; 0x33
 800a516:	dd0b      	ble.n	800a530 <floor+0xa0>
 800a518:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a51c:	d104      	bne.n	800a528 <floor+0x98>
 800a51e:	ee10 2a10 	vmov	r2, s0
 800a522:	460b      	mov	r3, r1
 800a524:	f7f5 fe5e 	bl	80001e4 <__adddf3>
 800a528:	ec41 0b10 	vmov	d0, r0, r1
 800a52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a530:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a534:	f04f 33ff 	mov.w	r3, #4294967295
 800a538:	fa23 f707 	lsr.w	r7, r3, r7
 800a53c:	4207      	tst	r7, r0
 800a53e:	d0f3      	beq.n	800a528 <floor+0x98>
 800a540:	a30f      	add	r3, pc, #60	; (adr r3, 800a580 <floor+0xf0>)
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f7f5 fe4d 	bl	80001e4 <__adddf3>
 800a54a:	2200      	movs	r2, #0
 800a54c:	2300      	movs	r3, #0
 800a54e:	f7f6 fa8f 	bl	8000a70 <__aeabi_dcmpgt>
 800a552:	2800      	cmp	r0, #0
 800a554:	d0bf      	beq.n	800a4d6 <floor+0x46>
 800a556:	2c00      	cmp	r4, #0
 800a558:	da02      	bge.n	800a560 <floor+0xd0>
 800a55a:	2e14      	cmp	r6, #20
 800a55c:	d103      	bne.n	800a566 <floor+0xd6>
 800a55e:	3401      	adds	r4, #1
 800a560:	ea25 0507 	bic.w	r5, r5, r7
 800a564:	e7b7      	b.n	800a4d6 <floor+0x46>
 800a566:	2301      	movs	r3, #1
 800a568:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a56c:	fa03 f606 	lsl.w	r6, r3, r6
 800a570:	4435      	add	r5, r6
 800a572:	4545      	cmp	r5, r8
 800a574:	bf38      	it	cc
 800a576:	18e4      	addcc	r4, r4, r3
 800a578:	e7f2      	b.n	800a560 <floor+0xd0>
 800a57a:	2500      	movs	r5, #0
 800a57c:	462c      	mov	r4, r5
 800a57e:	e7aa      	b.n	800a4d6 <floor+0x46>
 800a580:	8800759c 	.word	0x8800759c
 800a584:	7e37e43c 	.word	0x7e37e43c
 800a588:	bff00000 	.word	0xbff00000
 800a58c:	000fffff 	.word	0x000fffff

0800a590 <nan>:
 800a590:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a598 <nan+0x8>
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	00000000 	.word	0x00000000
 800a59c:	7ff80000 	.word	0x7ff80000

0800a5a0 <rint>:
 800a5a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5a2:	ec51 0b10 	vmov	r0, r1, d0
 800a5a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a5aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a5ae:	2e13      	cmp	r6, #19
 800a5b0:	ee10 4a10 	vmov	r4, s0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a5ba:	dc58      	bgt.n	800a66e <rint+0xce>
 800a5bc:	2e00      	cmp	r6, #0
 800a5be:	da2b      	bge.n	800a618 <rint+0x78>
 800a5c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a5c4:	4302      	orrs	r2, r0
 800a5c6:	d023      	beq.n	800a610 <rint+0x70>
 800a5c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a5cc:	4302      	orrs	r2, r0
 800a5ce:	4254      	negs	r4, r2
 800a5d0:	4314      	orrs	r4, r2
 800a5d2:	0c4b      	lsrs	r3, r1, #17
 800a5d4:	0b24      	lsrs	r4, r4, #12
 800a5d6:	045b      	lsls	r3, r3, #17
 800a5d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a5dc:	ea44 0103 	orr.w	r1, r4, r3
 800a5e0:	4b32      	ldr	r3, [pc, #200]	; (800a6ac <rint+0x10c>)
 800a5e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a5e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	f7f5 fdf7 	bl	80001e4 <__adddf3>
 800a5f6:	e9cd 0100 	strd	r0, r1, [sp]
 800a5fa:	463b      	mov	r3, r7
 800a5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a600:	4632      	mov	r2, r6
 800a602:	f7f5 fded 	bl	80001e0 <__aeabi_dsub>
 800a606:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a60a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a60e:	4639      	mov	r1, r7
 800a610:	ec41 0b10 	vmov	d0, r0, r1
 800a614:	b003      	add	sp, #12
 800a616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a618:	4a25      	ldr	r2, [pc, #148]	; (800a6b0 <rint+0x110>)
 800a61a:	4132      	asrs	r2, r6
 800a61c:	ea01 0702 	and.w	r7, r1, r2
 800a620:	4307      	orrs	r7, r0
 800a622:	d0f5      	beq.n	800a610 <rint+0x70>
 800a624:	0851      	lsrs	r1, r2, #1
 800a626:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a62a:	4314      	orrs	r4, r2
 800a62c:	d00c      	beq.n	800a648 <rint+0xa8>
 800a62e:	ea23 0201 	bic.w	r2, r3, r1
 800a632:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a636:	2e13      	cmp	r6, #19
 800a638:	fa43 f606 	asr.w	r6, r3, r6
 800a63c:	bf0c      	ite	eq
 800a63e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a642:	2400      	movne	r4, #0
 800a644:	ea42 0306 	orr.w	r3, r2, r6
 800a648:	4918      	ldr	r1, [pc, #96]	; (800a6ac <rint+0x10c>)
 800a64a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a64e:	4622      	mov	r2, r4
 800a650:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	f7f5 fdc4 	bl	80001e4 <__adddf3>
 800a65c:	e9cd 0100 	strd	r0, r1, [sp]
 800a660:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a664:	4622      	mov	r2, r4
 800a666:	462b      	mov	r3, r5
 800a668:	f7f5 fdba 	bl	80001e0 <__aeabi_dsub>
 800a66c:	e7d0      	b.n	800a610 <rint+0x70>
 800a66e:	2e33      	cmp	r6, #51	; 0x33
 800a670:	dd07      	ble.n	800a682 <rint+0xe2>
 800a672:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a676:	d1cb      	bne.n	800a610 <rint+0x70>
 800a678:	ee10 2a10 	vmov	r2, s0
 800a67c:	f7f5 fdb2 	bl	80001e4 <__adddf3>
 800a680:	e7c6      	b.n	800a610 <rint+0x70>
 800a682:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a686:	f04f 36ff 	mov.w	r6, #4294967295
 800a68a:	40d6      	lsrs	r6, r2
 800a68c:	4230      	tst	r0, r6
 800a68e:	d0bf      	beq.n	800a610 <rint+0x70>
 800a690:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a694:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a698:	bf1f      	itttt	ne
 800a69a:	ea24 0101 	bicne.w	r1, r4, r1
 800a69e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a6a2:	fa44 f202 	asrne.w	r2, r4, r2
 800a6a6:	ea41 0402 	orrne.w	r4, r1, r2
 800a6aa:	e7cd      	b.n	800a648 <rint+0xa8>
 800a6ac:	0800ad80 	.word	0x0800ad80
 800a6b0:	000fffff 	.word	0x000fffff
 800a6b4:	00000000 	.word	0x00000000

0800a6b8 <scalbn>:
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	ec55 4b10 	vmov	r4, r5, d0
 800a6be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	462b      	mov	r3, r5
 800a6c6:	b99a      	cbnz	r2, 800a6f0 <scalbn+0x38>
 800a6c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a6cc:	4323      	orrs	r3, r4
 800a6ce:	d036      	beq.n	800a73e <scalbn+0x86>
 800a6d0:	4b39      	ldr	r3, [pc, #228]	; (800a7b8 <scalbn+0x100>)
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	ee10 0a10 	vmov	r0, s0
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f7f5 ff39 	bl	8000550 <__aeabi_dmul>
 800a6de:	4b37      	ldr	r3, [pc, #220]	; (800a7bc <scalbn+0x104>)
 800a6e0:	429e      	cmp	r6, r3
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	460d      	mov	r5, r1
 800a6e6:	da10      	bge.n	800a70a <scalbn+0x52>
 800a6e8:	a32b      	add	r3, pc, #172	; (adr r3, 800a798 <scalbn+0xe0>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	e03a      	b.n	800a766 <scalbn+0xae>
 800a6f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a6f4:	428a      	cmp	r2, r1
 800a6f6:	d10c      	bne.n	800a712 <scalbn+0x5a>
 800a6f8:	ee10 2a10 	vmov	r2, s0
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f5 fd70 	bl	80001e4 <__adddf3>
 800a704:	4604      	mov	r4, r0
 800a706:	460d      	mov	r5, r1
 800a708:	e019      	b.n	800a73e <scalbn+0x86>
 800a70a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a70e:	460b      	mov	r3, r1
 800a710:	3a36      	subs	r2, #54	; 0x36
 800a712:	4432      	add	r2, r6
 800a714:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a718:	428a      	cmp	r2, r1
 800a71a:	dd08      	ble.n	800a72e <scalbn+0x76>
 800a71c:	2d00      	cmp	r5, #0
 800a71e:	a120      	add	r1, pc, #128	; (adr r1, 800a7a0 <scalbn+0xe8>)
 800a720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a724:	da1c      	bge.n	800a760 <scalbn+0xa8>
 800a726:	a120      	add	r1, pc, #128	; (adr r1, 800a7a8 <scalbn+0xf0>)
 800a728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a72c:	e018      	b.n	800a760 <scalbn+0xa8>
 800a72e:	2a00      	cmp	r2, #0
 800a730:	dd08      	ble.n	800a744 <scalbn+0x8c>
 800a732:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a736:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a73a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a73e:	ec45 4b10 	vmov	d0, r4, r5
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a748:	da19      	bge.n	800a77e <scalbn+0xc6>
 800a74a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a74e:	429e      	cmp	r6, r3
 800a750:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a754:	dd0a      	ble.n	800a76c <scalbn+0xb4>
 800a756:	a112      	add	r1, pc, #72	; (adr r1, 800a7a0 <scalbn+0xe8>)
 800a758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e2      	bne.n	800a726 <scalbn+0x6e>
 800a760:	a30f      	add	r3, pc, #60	; (adr r3, 800a7a0 <scalbn+0xe8>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 fef3 	bl	8000550 <__aeabi_dmul>
 800a76a:	e7cb      	b.n	800a704 <scalbn+0x4c>
 800a76c:	a10a      	add	r1, pc, #40	; (adr r1, 800a798 <scalbn+0xe0>)
 800a76e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0b8      	beq.n	800a6e8 <scalbn+0x30>
 800a776:	a10e      	add	r1, pc, #56	; (adr r1, 800a7b0 <scalbn+0xf8>)
 800a778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a77c:	e7b4      	b.n	800a6e8 <scalbn+0x30>
 800a77e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a782:	3236      	adds	r2, #54	; 0x36
 800a784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a788:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a78c:	4620      	mov	r0, r4
 800a78e:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <scalbn+0x108>)
 800a790:	2200      	movs	r2, #0
 800a792:	e7e8      	b.n	800a766 <scalbn+0xae>
 800a794:	f3af 8000 	nop.w
 800a798:	c2f8f359 	.word	0xc2f8f359
 800a79c:	01a56e1f 	.word	0x01a56e1f
 800a7a0:	8800759c 	.word	0x8800759c
 800a7a4:	7e37e43c 	.word	0x7e37e43c
 800a7a8:	8800759c 	.word	0x8800759c
 800a7ac:	fe37e43c 	.word	0xfe37e43c
 800a7b0:	c2f8f359 	.word	0xc2f8f359
 800a7b4:	81a56e1f 	.word	0x81a56e1f
 800a7b8:	43500000 	.word	0x43500000
 800a7bc:	ffff3cb0 	.word	0xffff3cb0
 800a7c0:	3c900000 	.word	0x3c900000

0800a7c4 <abort>:
 800a7c4:	b508      	push	{r3, lr}
 800a7c6:	2006      	movs	r0, #6
 800a7c8:	f000 f936 	bl	800aa38 <raise>
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	f7f9 fe73 	bl	80044b8 <_exit>
	...

0800a7d4 <__errno>:
 800a7d4:	4b01      	ldr	r3, [pc, #4]	; (800a7dc <__errno+0x8>)
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	2000023c 	.word	0x2000023c

0800a7e0 <__libc_init_array>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	4d0d      	ldr	r5, [pc, #52]	; (800a818 <__libc_init_array+0x38>)
 800a7e4:	4c0d      	ldr	r4, [pc, #52]	; (800a81c <__libc_init_array+0x3c>)
 800a7e6:	1b64      	subs	r4, r4, r5
 800a7e8:	10a4      	asrs	r4, r4, #2
 800a7ea:	2600      	movs	r6, #0
 800a7ec:	42a6      	cmp	r6, r4
 800a7ee:	d109      	bne.n	800a804 <__libc_init_array+0x24>
 800a7f0:	4d0b      	ldr	r5, [pc, #44]	; (800a820 <__libc_init_array+0x40>)
 800a7f2:	4c0c      	ldr	r4, [pc, #48]	; (800a824 <__libc_init_array+0x44>)
 800a7f4:	f000 f95a 	bl	800aaac <_init>
 800a7f8:	1b64      	subs	r4, r4, r5
 800a7fa:	10a4      	asrs	r4, r4, #2
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	42a6      	cmp	r6, r4
 800a800:	d105      	bne.n	800a80e <__libc_init_array+0x2e>
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	f855 3b04 	ldr.w	r3, [r5], #4
 800a808:	4798      	blx	r3
 800a80a:	3601      	adds	r6, #1
 800a80c:	e7ee      	b.n	800a7ec <__libc_init_array+0xc>
 800a80e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a812:	4798      	blx	r3
 800a814:	3601      	adds	r6, #1
 800a816:	e7f2      	b.n	800a7fe <__libc_init_array+0x1e>
 800a818:	0800ad98 	.word	0x0800ad98
 800a81c:	0800ad98 	.word	0x0800ad98
 800a820:	0800ad98 	.word	0x0800ad98
 800a824:	0800ad9c 	.word	0x0800ad9c

0800a828 <malloc>:
 800a828:	4b02      	ldr	r3, [pc, #8]	; (800a834 <malloc+0xc>)
 800a82a:	4601      	mov	r1, r0
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f000 b871 	b.w	800a914 <_malloc_r>
 800a832:	bf00      	nop
 800a834:	2000023c 	.word	0x2000023c

0800a838 <free>:
 800a838:	4b02      	ldr	r3, [pc, #8]	; (800a844 <free+0xc>)
 800a83a:	4601      	mov	r1, r0
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	f000 b819 	b.w	800a874 <_free_r>
 800a842:	bf00      	nop
 800a844:	2000023c 	.word	0x2000023c

0800a848 <memcpy>:
 800a848:	440a      	add	r2, r1
 800a84a:	4291      	cmp	r1, r2
 800a84c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a850:	d100      	bne.n	800a854 <memcpy+0xc>
 800a852:	4770      	bx	lr
 800a854:	b510      	push	{r4, lr}
 800a856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a85e:	4291      	cmp	r1, r2
 800a860:	d1f9      	bne.n	800a856 <memcpy+0xe>
 800a862:	bd10      	pop	{r4, pc}

0800a864 <memset>:
 800a864:	4402      	add	r2, r0
 800a866:	4603      	mov	r3, r0
 800a868:	4293      	cmp	r3, r2
 800a86a:	d100      	bne.n	800a86e <memset+0xa>
 800a86c:	4770      	bx	lr
 800a86e:	f803 1b01 	strb.w	r1, [r3], #1
 800a872:	e7f9      	b.n	800a868 <memset+0x4>

0800a874 <_free_r>:
 800a874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a876:	2900      	cmp	r1, #0
 800a878:	d048      	beq.n	800a90c <_free_r+0x98>
 800a87a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a87e:	9001      	str	r0, [sp, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	f1a1 0404 	sub.w	r4, r1, #4
 800a886:	bfb8      	it	lt
 800a888:	18e4      	addlt	r4, r4, r3
 800a88a:	f000 f901 	bl	800aa90 <__malloc_lock>
 800a88e:	4a20      	ldr	r2, [pc, #128]	; (800a910 <_free_r+0x9c>)
 800a890:	9801      	ldr	r0, [sp, #4]
 800a892:	6813      	ldr	r3, [r2, #0]
 800a894:	4615      	mov	r5, r2
 800a896:	b933      	cbnz	r3, 800a8a6 <_free_r+0x32>
 800a898:	6063      	str	r3, [r4, #4]
 800a89a:	6014      	str	r4, [r2, #0]
 800a89c:	b003      	add	sp, #12
 800a89e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8a2:	f000 b8fb 	b.w	800aa9c <__malloc_unlock>
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	d90b      	bls.n	800a8c2 <_free_r+0x4e>
 800a8aa:	6821      	ldr	r1, [r4, #0]
 800a8ac:	1862      	adds	r2, r4, r1
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	bf04      	itt	eq
 800a8b2:	681a      	ldreq	r2, [r3, #0]
 800a8b4:	685b      	ldreq	r3, [r3, #4]
 800a8b6:	6063      	str	r3, [r4, #4]
 800a8b8:	bf04      	itt	eq
 800a8ba:	1852      	addeq	r2, r2, r1
 800a8bc:	6022      	streq	r2, [r4, #0]
 800a8be:	602c      	str	r4, [r5, #0]
 800a8c0:	e7ec      	b.n	800a89c <_free_r+0x28>
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	b10b      	cbz	r3, 800a8cc <_free_r+0x58>
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d9fa      	bls.n	800a8c2 <_free_r+0x4e>
 800a8cc:	6811      	ldr	r1, [r2, #0]
 800a8ce:	1855      	adds	r5, r2, r1
 800a8d0:	42a5      	cmp	r5, r4
 800a8d2:	d10b      	bne.n	800a8ec <_free_r+0x78>
 800a8d4:	6824      	ldr	r4, [r4, #0]
 800a8d6:	4421      	add	r1, r4
 800a8d8:	1854      	adds	r4, r2, r1
 800a8da:	42a3      	cmp	r3, r4
 800a8dc:	6011      	str	r1, [r2, #0]
 800a8de:	d1dd      	bne.n	800a89c <_free_r+0x28>
 800a8e0:	681c      	ldr	r4, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	6053      	str	r3, [r2, #4]
 800a8e6:	4421      	add	r1, r4
 800a8e8:	6011      	str	r1, [r2, #0]
 800a8ea:	e7d7      	b.n	800a89c <_free_r+0x28>
 800a8ec:	d902      	bls.n	800a8f4 <_free_r+0x80>
 800a8ee:	230c      	movs	r3, #12
 800a8f0:	6003      	str	r3, [r0, #0]
 800a8f2:	e7d3      	b.n	800a89c <_free_r+0x28>
 800a8f4:	6825      	ldr	r5, [r4, #0]
 800a8f6:	1961      	adds	r1, r4, r5
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	bf04      	itt	eq
 800a8fc:	6819      	ldreq	r1, [r3, #0]
 800a8fe:	685b      	ldreq	r3, [r3, #4]
 800a900:	6063      	str	r3, [r4, #4]
 800a902:	bf04      	itt	eq
 800a904:	1949      	addeq	r1, r1, r5
 800a906:	6021      	streq	r1, [r4, #0]
 800a908:	6054      	str	r4, [r2, #4]
 800a90a:	e7c7      	b.n	800a89c <_free_r+0x28>
 800a90c:	b003      	add	sp, #12
 800a90e:	bd30      	pop	{r4, r5, pc}
 800a910:	20002274 	.word	0x20002274

0800a914 <_malloc_r>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	1ccd      	adds	r5, r1, #3
 800a918:	f025 0503 	bic.w	r5, r5, #3
 800a91c:	3508      	adds	r5, #8
 800a91e:	2d0c      	cmp	r5, #12
 800a920:	bf38      	it	cc
 800a922:	250c      	movcc	r5, #12
 800a924:	2d00      	cmp	r5, #0
 800a926:	4606      	mov	r6, r0
 800a928:	db01      	blt.n	800a92e <_malloc_r+0x1a>
 800a92a:	42a9      	cmp	r1, r5
 800a92c:	d903      	bls.n	800a936 <_malloc_r+0x22>
 800a92e:	230c      	movs	r3, #12
 800a930:	6033      	str	r3, [r6, #0]
 800a932:	2000      	movs	r0, #0
 800a934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a936:	f000 f8ab 	bl	800aa90 <__malloc_lock>
 800a93a:	4921      	ldr	r1, [pc, #132]	; (800a9c0 <_malloc_r+0xac>)
 800a93c:	680a      	ldr	r2, [r1, #0]
 800a93e:	4614      	mov	r4, r2
 800a940:	b99c      	cbnz	r4, 800a96a <_malloc_r+0x56>
 800a942:	4f20      	ldr	r7, [pc, #128]	; (800a9c4 <_malloc_r+0xb0>)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	b923      	cbnz	r3, 800a952 <_malloc_r+0x3e>
 800a948:	4621      	mov	r1, r4
 800a94a:	4630      	mov	r0, r6
 800a94c:	f000 f83c 	bl	800a9c8 <_sbrk_r>
 800a950:	6038      	str	r0, [r7, #0]
 800a952:	4629      	mov	r1, r5
 800a954:	4630      	mov	r0, r6
 800a956:	f000 f837 	bl	800a9c8 <_sbrk_r>
 800a95a:	1c43      	adds	r3, r0, #1
 800a95c:	d123      	bne.n	800a9a6 <_malloc_r+0x92>
 800a95e:	230c      	movs	r3, #12
 800a960:	6033      	str	r3, [r6, #0]
 800a962:	4630      	mov	r0, r6
 800a964:	f000 f89a 	bl	800aa9c <__malloc_unlock>
 800a968:	e7e3      	b.n	800a932 <_malloc_r+0x1e>
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	1b5b      	subs	r3, r3, r5
 800a96e:	d417      	bmi.n	800a9a0 <_malloc_r+0x8c>
 800a970:	2b0b      	cmp	r3, #11
 800a972:	d903      	bls.n	800a97c <_malloc_r+0x68>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	441c      	add	r4, r3
 800a978:	6025      	str	r5, [r4, #0]
 800a97a:	e004      	b.n	800a986 <_malloc_r+0x72>
 800a97c:	6863      	ldr	r3, [r4, #4]
 800a97e:	42a2      	cmp	r2, r4
 800a980:	bf0c      	ite	eq
 800a982:	600b      	streq	r3, [r1, #0]
 800a984:	6053      	strne	r3, [r2, #4]
 800a986:	4630      	mov	r0, r6
 800a988:	f000 f888 	bl	800aa9c <__malloc_unlock>
 800a98c:	f104 000b 	add.w	r0, r4, #11
 800a990:	1d23      	adds	r3, r4, #4
 800a992:	f020 0007 	bic.w	r0, r0, #7
 800a996:	1ac2      	subs	r2, r0, r3
 800a998:	d0cc      	beq.n	800a934 <_malloc_r+0x20>
 800a99a:	1a1b      	subs	r3, r3, r0
 800a99c:	50a3      	str	r3, [r4, r2]
 800a99e:	e7c9      	b.n	800a934 <_malloc_r+0x20>
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	6864      	ldr	r4, [r4, #4]
 800a9a4:	e7cc      	b.n	800a940 <_malloc_r+0x2c>
 800a9a6:	1cc4      	adds	r4, r0, #3
 800a9a8:	f024 0403 	bic.w	r4, r4, #3
 800a9ac:	42a0      	cmp	r0, r4
 800a9ae:	d0e3      	beq.n	800a978 <_malloc_r+0x64>
 800a9b0:	1a21      	subs	r1, r4, r0
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f000 f808 	bl	800a9c8 <_sbrk_r>
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d1dd      	bne.n	800a978 <_malloc_r+0x64>
 800a9bc:	e7cf      	b.n	800a95e <_malloc_r+0x4a>
 800a9be:	bf00      	nop
 800a9c0:	20002274 	.word	0x20002274
 800a9c4:	20002278 	.word	0x20002278

0800a9c8 <_sbrk_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4d06      	ldr	r5, [pc, #24]	; (800a9e4 <_sbrk_r+0x1c>)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	602b      	str	r3, [r5, #0]
 800a9d4:	f7f9 fd7a 	bl	80044cc <_sbrk>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d102      	bne.n	800a9e2 <_sbrk_r+0x1a>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	b103      	cbz	r3, 800a9e2 <_sbrk_r+0x1a>
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	20002280 	.word	0x20002280

0800a9e8 <_raise_r>:
 800a9e8:	291f      	cmp	r1, #31
 800a9ea:	b538      	push	{r3, r4, r5, lr}
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	460d      	mov	r5, r1
 800a9f0:	d904      	bls.n	800a9fc <_raise_r+0x14>
 800a9f2:	2316      	movs	r3, #22
 800a9f4:	6003      	str	r3, [r0, #0]
 800a9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9fe:	b112      	cbz	r2, 800aa06 <_raise_r+0x1e>
 800aa00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa04:	b94b      	cbnz	r3, 800aa1a <_raise_r+0x32>
 800aa06:	4620      	mov	r0, r4
 800aa08:	f000 f830 	bl	800aa6c <_getpid_r>
 800aa0c:	462a      	mov	r2, r5
 800aa0e:	4601      	mov	r1, r0
 800aa10:	4620      	mov	r0, r4
 800aa12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa16:	f000 b817 	b.w	800aa48 <_kill_r>
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d00a      	beq.n	800aa34 <_raise_r+0x4c>
 800aa1e:	1c59      	adds	r1, r3, #1
 800aa20:	d103      	bne.n	800aa2a <_raise_r+0x42>
 800aa22:	2316      	movs	r3, #22
 800aa24:	6003      	str	r3, [r0, #0]
 800aa26:	2001      	movs	r0, #1
 800aa28:	e7e7      	b.n	800a9fa <_raise_r+0x12>
 800aa2a:	2400      	movs	r4, #0
 800aa2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa30:	4628      	mov	r0, r5
 800aa32:	4798      	blx	r3
 800aa34:	2000      	movs	r0, #0
 800aa36:	e7e0      	b.n	800a9fa <_raise_r+0x12>

0800aa38 <raise>:
 800aa38:	4b02      	ldr	r3, [pc, #8]	; (800aa44 <raise+0xc>)
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	6818      	ldr	r0, [r3, #0]
 800aa3e:	f7ff bfd3 	b.w	800a9e8 <_raise_r>
 800aa42:	bf00      	nop
 800aa44:	2000023c 	.word	0x2000023c

0800aa48 <_kill_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d07      	ldr	r5, [pc, #28]	; (800aa68 <_kill_r+0x20>)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	4611      	mov	r1, r2
 800aa54:	602b      	str	r3, [r5, #0]
 800aa56:	f7f9 fd1f 	bl	8004498 <_kill>
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	d102      	bne.n	800aa64 <_kill_r+0x1c>
 800aa5e:	682b      	ldr	r3, [r5, #0]
 800aa60:	b103      	cbz	r3, 800aa64 <_kill_r+0x1c>
 800aa62:	6023      	str	r3, [r4, #0]
 800aa64:	bd38      	pop	{r3, r4, r5, pc}
 800aa66:	bf00      	nop
 800aa68:	20002280 	.word	0x20002280

0800aa6c <_getpid_r>:
 800aa6c:	f7f9 bd0c 	b.w	8004488 <_getpid>

0800aa70 <strcat>:
 800aa70:	b510      	push	{r4, lr}
 800aa72:	4602      	mov	r2, r0
 800aa74:	7814      	ldrb	r4, [r2, #0]
 800aa76:	4613      	mov	r3, r2
 800aa78:	3201      	adds	r2, #1
 800aa7a:	2c00      	cmp	r4, #0
 800aa7c:	d1fa      	bne.n	800aa74 <strcat+0x4>
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa84:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa88:	2a00      	cmp	r2, #0
 800aa8a:	d1f9      	bne.n	800aa80 <strcat+0x10>
 800aa8c:	bd10      	pop	{r4, pc}
	...

0800aa90 <__malloc_lock>:
 800aa90:	4801      	ldr	r0, [pc, #4]	; (800aa98 <__malloc_lock+0x8>)
 800aa92:	f000 b809 	b.w	800aaa8 <__retarget_lock_acquire_recursive>
 800aa96:	bf00      	nop
 800aa98:	20002288 	.word	0x20002288

0800aa9c <__malloc_unlock>:
 800aa9c:	4801      	ldr	r0, [pc, #4]	; (800aaa4 <__malloc_unlock+0x8>)
 800aa9e:	f000 b804 	b.w	800aaaa <__retarget_lock_release_recursive>
 800aaa2:	bf00      	nop
 800aaa4:	20002288 	.word	0x20002288

0800aaa8 <__retarget_lock_acquire_recursive>:
 800aaa8:	4770      	bx	lr

0800aaaa <__retarget_lock_release_recursive>:
 800aaaa:	4770      	bx	lr

0800aaac <_init>:
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	bf00      	nop
 800aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab2:	bc08      	pop	{r3}
 800aab4:	469e      	mov	lr, r3
 800aab6:	4770      	bx	lr

0800aab8 <_fini>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr
